/****************************************************************************
*
* This is a part of TOTEM offline software.
* Authors: 
*  Jan Ka≈°par (jan.kaspar@gmail.com) 
*    
* $Id: GeneratorValidation.cc 4803 2011-08-23 14:44:01Z pkaczmar $
* $Revision: 4803 $
* $Date: 2011-08-23 16:44:01 +0200 (Tue, 23 Aug 2011) $
*
****************************************************************************/

#include <stdio.h>
#include <iostream>
#include <string>

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "SimDataFormats/GeneratorProducts/interface/HepMCProduct.h"
#include "HepMC/GenEvent.h"
#include "FWCore/Framework/interface/MakerMacros.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"

#include "TH1D.h"
#include "TH2D.h"
#include "TFile.h"

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

/**
 *\brief Makes plots of t's and xi's of forward protons generated by MC generators.
**/
class GeneratorValidation : public edm::EDAnalyzer
{
 public:
  enum {rLeft, rCent, rRight};

  explicit GeneratorValidation(const edm::ParameterSet&);
  ~GeneratorValidation() {}

 private:
  edm::InputTag hepMCProductLabel;
  unsigned int verbosity;

  double thetaLimit;
  double E_nom;
  
  TH1D *h_l_t, *h_l_xi;
  TH2D *h_l_t_xi;
  TH1D *h_r_t, *h_r_xi;
  TH2D *h_r_t_xi;
  TH1D *h_b_t, *h_b_xi;
  TH2D *h_b_t_xi;
  
  TH2D *h_tl_tr, *h_xil_xir;

  std::string outputFile;

  virtual void beginJob() {}
  virtual void analyze(const edm::Event&, const edm::EventSetup&);
  virtual void endJob();
};



using namespace std;
using namespace edm;
using namespace HepMC;

//----------------------------------------------------------------------------------------------------

GeneratorValidation::GeneratorValidation(const edm::ParameterSet& conf) :
  verbosity(conf.getUntrackedParameter<unsigned int>("verbosity", 0)),
  thetaLimit(conf.getParameter<double>("thetaLimit")),
  E_nom(conf.getParameter<double>("E_nom")),
  outputFile(conf.getParameter<std::string>("outputFile"))
{
  hepMCProductLabel = conf.getParameter<edm::InputTag>("HepMCProductLabel");
  double t_min = 0., t_max = 5.;
  double xi_min = 0., xi_max = 0.2;

  h_l_t = new TH1D("h_l_t", "|t|   (GeV)", 100, t_min, t_max);
  h_l_xi = new TH1D("h_l_xi", "#xi", 100, xi_min, xi_max);
  h_l_t_xi = new TH2D("h_l_t_xi", "|t|   (GeV);#xi", 100, t_min, t_max, 100, xi_min, xi_max);
  
  h_r_t = new TH1D("h_r_t", "|t|   (GeV)", 100, t_min, t_max);
  h_r_xi = new TH1D("h_r_xi", "#xi", 100, xi_min, xi_max);
  h_r_t_xi = new TH2D("h_r_t_xi", "|t|   (GeV);#xi", 100, t_min, t_max, 100, xi_min, xi_max);
  
  h_b_t = new TH1D("h_b_t", "|t|   (GeV)", 100, t_min, t_max);
  h_b_xi = new TH1D("h_b_xi", "#xi", 100, xi_min, xi_max);
  h_b_t_xi = new TH2D("h_b_t_xi", "|t|   (GeV);#xi", 100, t_min, t_max, 100, xi_min, xi_max);
  
  h_tl_tr = new TH2D("h_tl_tr", "|t_{l}|   (GeV);|t_{r}|   (GeV)", 100, t_min, t_max, 100, t_min, t_max);
  h_xil_xir = new TH2D("h_xil_xir", "|#xi_{l}|   (GeV);|#xi_{r}|   (GeV)", 100, xi_min, xi_max, 100, xi_min, xi_max);
}

//----------------------------------------------------------------------------------------------------

void GeneratorValidation::analyze(const edm::Event& event, const edm::EventSetup& eSetup)
{
  edm::Handle< HepMCProduct > mcPr;
  event.getByLabel(hepMCProductLabel, mcPr);
  HepMC::GenEvent *mcEv = (HepMC::GenEvent *) mcPr->GetEvent();

  unsigned int n_r = 0, n_l = 0;
  FourVector p_r, p_l;
  double t_l=0., t_r=0.;
  double xi_l=0., xi_r=0.;

  printf("--------------------\n");

  // go through all particles
  for (GenEvent::particle_const_iterator pit = mcEv->particles_begin(); pit != mcEv->particles_end(); ++pit) {
    FourVector p = (*pit)->momentum();
  
    // determine direction region
    double th = p.theta();
    int idx = rCent;
    if (th < thetaLimit)
      idx = rRight;
    if (th > (M_PI - thetaLimit))
      idx = rLeft;

    if (idx == rCent || (*pit)->status() != 1 || (*pit)->pdg_id() != 2212 || p.t() < 0.5*E_nom)
      continue;
    
    printf("pid = %i, region = %i, E = %E, p.z = %E, status = %i\n", (*pit)->pdg_id(), idx, p.t(), p.z(), (*pit)->status());

    if (idx == rRight) {
      FourVector mom_tr(p.x(), p.y(), p.z() - E_nom, p.t() - E_nom);
      double t = -mom_tr.m2();
      double xi = 1. - p.t()/E_nom;
      n_r++; p_r = p; t_r = t; xi_r = xi;
      h_r_t->Fill(t); h_b_t->Fill(t);
      h_r_xi->Fill(xi); h_b_xi->Fill(xi);
      h_r_t_xi->Fill(t, xi); h_b_t_xi->Fill(t, xi);

      printf("\tR: t = %E, xi = %E\n", t, xi);
    }
    
    if (idx == rLeft) {
      FourVector mom_tr(p.x(), p.y(), p.z() + E_nom, p.t() - E_nom);
      double t = -mom_tr.m2();
      double xi = 1. - p.t()/E_nom;
      n_l++; p_l = p; t_l = t; xi_l = xi;
      h_l_t->Fill(t); h_b_t->Fill(t);
      h_l_xi->Fill(xi); h_b_xi->Fill(xi);
      h_l_t_xi->Fill(t, xi); h_b_t_xi->Fill(t, xi);
  
      printf("\tL: t = %E, xi = %E\n", t, xi);
    }
  }

  printf("n_r=%i, n_l=%i\n", n_r, n_l);

  if (n_r == 1 && n_l == 1) {
    h_tl_tr->Fill(t_l, t_r);
    h_xil_xir->Fill(xi_l, xi_r);
  }
}

//----------------------------------------------------------------------------------------------------

void GeneratorValidation::endJob()
{
  TFile *of = TFile::Open(outputFile.c_str(), "recreate");
  if (!of || !of->IsWritable())
      throw cms::Exception("GeneratorValidation::endJob") << "Output file not opened correctly." << std::endl;

  gDirectory = of->mkdir("left");
  h_l_t->Write();
  h_l_xi->Write();
  h_l_t_xi->Write();
  
  gDirectory = of->mkdir("right");
  h_r_t->Write();
  h_r_xi->Write();
  h_r_t_xi->Write();
  
  gDirectory = of->mkdir("both");
  h_r_t->Write();
  h_r_xi->Write();
  h_r_t_xi->Write();
  
  gDirectory = of->mkdir("left-right correlation");
  h_tl_tr->Write();
  h_xil_xir->Write();
  
  of->Close();
}

//----------------------------------------------------------------------------------------------------

DEFINE_FWK_MODULE(GeneratorValidation);

