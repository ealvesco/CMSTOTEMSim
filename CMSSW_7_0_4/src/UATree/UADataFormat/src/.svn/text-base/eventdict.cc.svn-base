//
// File generated by rootcint at Thu Jan 22 17:12:38 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME eventdict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "eventdict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef pair< ::string, bool > pairlEstringcOboolgR;
      #else
      class pairlEstringcOboolgR  {
         public:
         //friend XX;
         string first; //
         bool second; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void MyBeamSpot_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyBeamSpot(void *p = 0);
   static void *newArray_MyBeamSpot(Long_t size, void *p);
   static void delete_MyBeamSpot(void *p);
   static void deleteArray_MyBeamSpot(void *p);
   static void destruct_MyBeamSpot(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyBeamSpot*)
   {
      ::MyBeamSpot *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyBeamSpot >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyBeamSpot", ::MyBeamSpot::Class_Version(), "./MyBeamSpot.h", 6,
                  typeid(::MyBeamSpot), DefineBehavior(ptr, ptr),
                  &::MyBeamSpot::Dictionary, isa_proxy, 4,
                  sizeof(::MyBeamSpot) );
      instance.SetNew(&new_MyBeamSpot);
      instance.SetNewArray(&newArray_MyBeamSpot);
      instance.SetDelete(&delete_MyBeamSpot);
      instance.SetDeleteArray(&deleteArray_MyBeamSpot);
      instance.SetDestructor(&destruct_MyBeamSpot);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyBeamSpot*)
   {
      return GenerateInitInstanceLocal((::MyBeamSpot*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyBeamSpot*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyCastorDigi_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyCastorDigi(void *p = 0);
   static void *newArray_MyCastorDigi(Long_t size, void *p);
   static void delete_MyCastorDigi(void *p);
   static void deleteArray_MyCastorDigi(void *p);
   static void destruct_MyCastorDigi(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyCastorDigi*)
   {
      ::MyCastorDigi *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyCastorDigi >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyCastorDigi", ::MyCastorDigi::Class_Version(), "./MyCastorDigi.h", 8,
                  typeid(::MyCastorDigi), DefineBehavior(ptr, ptr),
                  &::MyCastorDigi::Dictionary, isa_proxy, 4,
                  sizeof(::MyCastorDigi) );
      instance.SetNew(&new_MyCastorDigi);
      instance.SetNewArray(&newArray_MyCastorDigi);
      instance.SetDelete(&delete_MyCastorDigi);
      instance.SetDeleteArray(&deleteArray_MyCastorDigi);
      instance.SetDestructor(&destruct_MyCastorDigi);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyCastorDigi*)
   {
      return GenerateInitInstanceLocal((::MyCastorDigi*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyCastorDigi*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyCastorJet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyCastorJet(void *p = 0);
   static void *newArray_MyCastorJet(Long_t size, void *p);
   static void delete_MyCastorJet(void *p);
   static void deleteArray_MyCastorJet(void *p);
   static void destruct_MyCastorJet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyCastorJet*)
   {
      ::MyCastorJet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyCastorJet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyCastorJet", ::MyCastorJet::Class_Version(), "./MyCastorJet.h", 8,
                  typeid(::MyCastorJet), DefineBehavior(ptr, ptr),
                  &::MyCastorJet::Dictionary, isa_proxy, 4,
                  sizeof(::MyCastorJet) );
      instance.SetNew(&new_MyCastorJet);
      instance.SetNewArray(&newArray_MyCastorJet);
      instance.SetDelete(&delete_MyCastorJet);
      instance.SetDeleteArray(&deleteArray_MyCastorJet);
      instance.SetDestructor(&destruct_MyCastorJet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyCastorJet*)
   {
      return GenerateInitInstanceLocal((::MyCastorJet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyCastorJet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyCastorRecHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyCastorRecHit(void *p = 0);
   static void *newArray_MyCastorRecHit(Long_t size, void *p);
   static void delete_MyCastorRecHit(void *p);
   static void deleteArray_MyCastorRecHit(void *p);
   static void destruct_MyCastorRecHit(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyCastorRecHit*)
   {
      ::MyCastorRecHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyCastorRecHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyCastorRecHit", ::MyCastorRecHit::Class_Version(), "./MyCastorRecHit.h", 9,
                  typeid(::MyCastorRecHit), DefineBehavior(ptr, ptr),
                  &::MyCastorRecHit::Dictionary, isa_proxy, 4,
                  sizeof(::MyCastorRecHit) );
      instance.SetNew(&new_MyCastorRecHit);
      instance.SetNewArray(&newArray_MyCastorRecHit);
      instance.SetDelete(&delete_MyCastorRecHit);
      instance.SetDeleteArray(&deleteArray_MyCastorRecHit);
      instance.SetDestructor(&destruct_MyCastorRecHit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyCastorRecHit*)
   {
      return GenerateInitInstanceLocal((::MyCastorRecHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyCastorRecHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyDiJet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyDiJet(void *p = 0);
   static void *newArray_MyDiJet(Long_t size, void *p);
   static void delete_MyDiJet(void *p);
   static void deleteArray_MyDiJet(void *p);
   static void destruct_MyDiJet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyDiJet*)
   {
      ::MyDiJet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyDiJet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyDiJet", ::MyDiJet::Class_Version(), "./MyDiJet.h", 7,
                  typeid(::MyDiJet), DefineBehavior(ptr, ptr),
                  &::MyDiJet::Dictionary, isa_proxy, 4,
                  sizeof(::MyDiJet) );
      instance.SetNew(&new_MyDiJet);
      instance.SetNewArray(&newArray_MyDiJet);
      instance.SetDelete(&delete_MyDiJet);
      instance.SetDeleteArray(&deleteArray_MyDiJet);
      instance.SetDestructor(&destruct_MyDiJet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyDiJet*)
   {
      return GenerateInitInstanceLocal((::MyDiJet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyDiJet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyEvtId_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyEvtId(void *p = 0);
   static void *newArray_MyEvtId(Long_t size, void *p);
   static void delete_MyEvtId(void *p);
   static void deleteArray_MyEvtId(void *p);
   static void destruct_MyEvtId(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyEvtId*)
   {
      ::MyEvtId *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyEvtId >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyEvtId", ::MyEvtId::Class_Version(), "./MyEvtId.h", 9,
                  typeid(::MyEvtId), DefineBehavior(ptr, ptr),
                  &::MyEvtId::Dictionary, isa_proxy, 4,
                  sizeof(::MyEvtId) );
      instance.SetNew(&new_MyEvtId);
      instance.SetNewArray(&newArray_MyEvtId);
      instance.SetDelete(&delete_MyEvtId);
      instance.SetDeleteArray(&deleteArray_MyEvtId);
      instance.SetDestructor(&destruct_MyEvtId);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyEvtId*)
   {
      return GenerateInitInstanceLocal((::MyEvtId*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyEvtId*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyFwdGap_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyFwdGap(void *p = 0);
   static void *newArray_MyFwdGap(Long_t size, void *p);
   static void delete_MyFwdGap(void *p);
   static void deleteArray_MyFwdGap(void *p);
   static void destruct_MyFwdGap(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyFwdGap*)
   {
      ::MyFwdGap *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyFwdGap >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyFwdGap", ::MyFwdGap::Class_Version(), "./MyFwdGap.h", 6,
                  typeid(::MyFwdGap), DefineBehavior(ptr, ptr),
                  &::MyFwdGap::Dictionary, isa_proxy, 4,
                  sizeof(::MyFwdGap) );
      instance.SetNew(&new_MyFwdGap);
      instance.SetNewArray(&newArray_MyFwdGap);
      instance.SetDelete(&delete_MyFwdGap);
      instance.SetDeleteArray(&deleteArray_MyFwdGap);
      instance.SetDestructor(&destruct_MyFwdGap);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyFwdGap*)
   {
      return GenerateInitInstanceLocal((::MyFwdGap*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyFwdGap*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyPart_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyPart(void *p = 0);
   static void *newArray_MyPart(Long_t size, void *p);
   static void delete_MyPart(void *p);
   static void deleteArray_MyPart(void *p);
   static void destruct_MyPart(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyPart*)
   {
      ::MyPart *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyPart >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyPart", ::MyPart::Class_Version(), "./MyPart.h", 6,
                  typeid(::MyPart), DefineBehavior(ptr, ptr),
                  &::MyPart::Dictionary, isa_proxy, 4,
                  sizeof(::MyPart) );
      instance.SetNew(&new_MyPart);
      instance.SetNewArray(&newArray_MyPart);
      instance.SetDelete(&delete_MyPart);
      instance.SetDeleteArray(&deleteArray_MyPart);
      instance.SetDestructor(&destruct_MyPart);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyPart*)
   {
      return GenerateInitInstanceLocal((::MyPart*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyPart*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyMet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyMet(void *p = 0);
   static void *newArray_MyMet(Long_t size, void *p);
   static void delete_MyMet(void *p);
   static void deleteArray_MyMet(void *p);
   static void destruct_MyMet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyMet*)
   {
      ::MyMet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyMet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyMet", ::MyMet::Class_Version(), "./MyMet.h", 6,
                  typeid(::MyMet), DefineBehavior(ptr, ptr),
                  &::MyMet::Dictionary, isa_proxy, 4,
                  sizeof(::MyMet) );
      instance.SetNew(&new_MyMet);
      instance.SetNewArray(&newArray_MyMet);
      instance.SetDelete(&delete_MyMet);
      instance.SetDeleteArray(&deleteArray_MyMet);
      instance.SetDestructor(&destruct_MyMet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyMet*)
   {
      return GenerateInitInstanceLocal((::MyMet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyMet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyGenMet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyGenMet(void *p = 0);
   static void *newArray_MyGenMet(Long_t size, void *p);
   static void delete_MyGenMet(void *p);
   static void deleteArray_MyGenMet(void *p);
   static void destruct_MyGenMet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyGenMet*)
   {
      ::MyGenMet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyGenMet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyGenMet", ::MyGenMet::Class_Version(), "./MyGenMet.h", 7,
                  typeid(::MyGenMet), DefineBehavior(ptr, ptr),
                  &::MyGenMet::Dictionary, isa_proxy, 4,
                  sizeof(::MyGenMet) );
      instance.SetNew(&new_MyGenMet);
      instance.SetNewArray(&newArray_MyGenMet);
      instance.SetDelete(&delete_MyGenMet);
      instance.SetDeleteArray(&deleteArray_MyGenMet);
      instance.SetDestructor(&destruct_MyGenMet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyGenMet*)
   {
      return GenerateInitInstanceLocal((::MyGenMet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyGenMet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyGenKin_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyGenKin(void *p = 0);
   static void *newArray_MyGenKin(Long_t size, void *p);
   static void delete_MyGenKin(void *p);
   static void deleteArray_MyGenKin(void *p);
   static void destruct_MyGenKin(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyGenKin*)
   {
      ::MyGenKin *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyGenKin >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyGenKin", ::MyGenKin::Class_Version(), "./MyGenKin.h", 7,
                  typeid(::MyGenKin), DefineBehavior(ptr, ptr),
                  &::MyGenKin::Dictionary, isa_proxy, 4,
                  sizeof(::MyGenKin) );
      instance.SetNew(&new_MyGenKin);
      instance.SetNewArray(&newArray_MyGenKin);
      instance.SetDelete(&delete_MyGenKin);
      instance.SetDeleteArray(&deleteArray_MyGenKin);
      instance.SetDestructor(&destruct_MyGenKin);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyGenKin*)
   {
      return GenerateInitInstanceLocal((::MyGenKin*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyGenKin*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyGenPart_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyGenPart(void *p = 0);
   static void *newArray_MyGenPart(Long_t size, void *p);
   static void delete_MyGenPart(void *p);
   static void deleteArray_MyGenPart(void *p);
   static void destruct_MyGenPart(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyGenPart*)
   {
      ::MyGenPart *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyGenPart >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyGenPart", ::MyGenPart::Class_Version(), "./MyGenPart.h", 7,
                  typeid(::MyGenPart), DefineBehavior(ptr, ptr),
                  &::MyGenPart::Dictionary, isa_proxy, 4,
                  sizeof(::MyGenPart) );
      instance.SetNew(&new_MyGenPart);
      instance.SetNewArray(&newArray_MyGenPart);
      instance.SetDelete(&delete_MyGenPart);
      instance.SetDeleteArray(&deleteArray_MyGenPart);
      instance.SetDestructor(&destruct_MyGenPart);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyGenPart*)
   {
      return GenerateInitInstanceLocal((::MyGenPart*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyGenPart*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyGenJet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyGenJet(void *p = 0);
   static void *newArray_MyGenJet(Long_t size, void *p);
   static void delete_MyGenJet(void *p);
   static void deleteArray_MyGenJet(void *p);
   static void destruct_MyGenJet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyGenJet*)
   {
      ::MyGenJet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyGenJet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyGenJet", ::MyGenJet::Class_Version(), "./MyGenJet.h", 9,
                  typeid(::MyGenJet), DefineBehavior(ptr, ptr),
                  &::MyGenJet::Dictionary, isa_proxy, 4,
                  sizeof(::MyGenJet) );
      instance.SetNew(&new_MyGenJet);
      instance.SetNewArray(&newArray_MyGenJet);
      instance.SetDelete(&delete_MyGenJet);
      instance.SetDeleteArray(&deleteArray_MyGenJet);
      instance.SetDestructor(&destruct_MyGenJet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyGenJet*)
   {
      return GenerateInitInstanceLocal((::MyGenJet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyGenJet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyPUSumInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyPUSumInfo(void *p = 0);
   static void *newArray_MyPUSumInfo(Long_t size, void *p);
   static void delete_MyPUSumInfo(void *p);
   static void deleteArray_MyPUSumInfo(void *p);
   static void destruct_MyPUSumInfo(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyPUSumInfo*)
   {
      ::MyPUSumInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyPUSumInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyPUSumInfo", ::MyPUSumInfo::Class_Version(), "./MyPUSumInfo.h", 9,
                  typeid(::MyPUSumInfo), DefineBehavior(ptr, ptr),
                  &::MyPUSumInfo::Dictionary, isa_proxy, 4,
                  sizeof(::MyPUSumInfo) );
      instance.SetNew(&new_MyPUSumInfo);
      instance.SetNewArray(&newArray_MyPUSumInfo);
      instance.SetDelete(&delete_MyPUSumInfo);
      instance.SetDeleteArray(&deleteArray_MyPUSumInfo);
      instance.SetDestructor(&destruct_MyPUSumInfo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyPUSumInfo*)
   {
      return GenerateInitInstanceLocal((::MyPUSumInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyPUSumInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyHLTrig_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyHLTrig(void *p = 0);
   static void *newArray_MyHLTrig(Long_t size, void *p);
   static void delete_MyHLTrig(void *p);
   static void deleteArray_MyHLTrig(void *p);
   static void destruct_MyHLTrig(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyHLTrig*)
   {
      ::MyHLTrig *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyHLTrig >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyHLTrig", ::MyHLTrig::Class_Version(), "./MyHLTrig.h", 8,
                  typeid(::MyHLTrig), DefineBehavior(ptr, ptr),
                  &::MyHLTrig::Dictionary, isa_proxy, 4,
                  sizeof(::MyHLTrig) );
      instance.SetNew(&new_MyHLTrig);
      instance.SetNewArray(&newArray_MyHLTrig);
      instance.SetDelete(&delete_MyHLTrig);
      instance.SetDeleteArray(&deleteArray_MyHLTrig);
      instance.SetDestructor(&destruct_MyHLTrig);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyHLTrig*)
   {
      return GenerateInitInstanceLocal((::MyHLTrig*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyHLTrig*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void pairlEstringcOboolgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void pairlEstringcOboolgR_Dictionary();
   static void *new_pairlEstringcOboolgR(void *p = 0);
   static void *newArray_pairlEstringcOboolgR(Long_t size, void *p);
   static void delete_pairlEstringcOboolgR(void *p);
   static void deleteArray_pairlEstringcOboolgR(void *p);
   static void destruct_pairlEstringcOboolgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const pair<string,bool>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(pair<string,bool>) == sizeof(::ROOT::Shadow::pairlEstringcOboolgR));
      pair<string,bool> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(pair<string,bool>),0);
      static ::ROOT::TGenericClassInfo 
         instance("pair<string,bool>", "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/utility", 17,
                  typeid(pair<string,bool>), DefineBehavior(ptr, ptr),
                  &pairlEstringcOboolgR_ShowMembers, &pairlEstringcOboolgR_Dictionary, isa_proxy, 4,
                  sizeof(pair<string,bool>) );
      instance.SetNew(&new_pairlEstringcOboolgR);
      instance.SetNewArray(&newArray_pairlEstringcOboolgR);
      instance.SetDelete(&delete_pairlEstringcOboolgR);
      instance.SetDeleteArray(&deleteArray_pairlEstringcOboolgR);
      instance.SetDestructor(&destruct_pairlEstringcOboolgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const pair<string,bool>*)
   {
      return GenerateInitInstanceLocal((pair<string,bool>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const pair<string,bool>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void pairlEstringcOboolgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const pair<string,bool>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void MyL1Trig_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyL1Trig(void *p = 0);
   static void *newArray_MyL1Trig(Long_t size, void *p);
   static void delete_MyL1Trig(void *p);
   static void deleteArray_MyL1Trig(void *p);
   static void destruct_MyL1Trig(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyL1Trig*)
   {
      ::MyL1Trig *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyL1Trig >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyL1Trig", ::MyL1Trig::Class_Version(), "./MyL1Trig.h", 8,
                  typeid(::MyL1Trig), DefineBehavior(ptr, ptr),
                  &::MyL1Trig::Dictionary, isa_proxy, 4,
                  sizeof(::MyL1Trig) );
      instance.SetNew(&new_MyL1Trig);
      instance.SetNewArray(&newArray_MyL1Trig);
      instance.SetDelete(&delete_MyL1Trig);
      instance.SetDeleteArray(&deleteArray_MyL1Trig);
      instance.SetDestructor(&destruct_MyL1Trig);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyL1Trig*)
   {
      return GenerateInitInstanceLocal((::MyL1Trig*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyL1Trig*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyL1TrigOld_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyL1TrigOld(void *p = 0);
   static void *newArray_MyL1TrigOld(Long_t size, void *p);
   static void delete_MyL1TrigOld(void *p);
   static void deleteArray_MyL1TrigOld(void *p);
   static void destruct_MyL1TrigOld(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyL1TrigOld*)
   {
      ::MyL1TrigOld *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyL1TrigOld >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyL1TrigOld", ::MyL1TrigOld::Class_Version(), "./MyL1TrigOld.h", 7,
                  typeid(::MyL1TrigOld), DefineBehavior(ptr, ptr),
                  &::MyL1TrigOld::Dictionary, isa_proxy, 4,
                  sizeof(::MyL1TrigOld) );
      instance.SetNew(&new_MyL1TrigOld);
      instance.SetNewArray(&newArray_MyL1TrigOld);
      instance.SetDelete(&delete_MyL1TrigOld);
      instance.SetDeleteArray(&deleteArray_MyL1TrigOld);
      instance.SetDestructor(&destruct_MyL1TrigOld);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyL1TrigOld*)
   {
      return GenerateInitInstanceLocal((::MyL1TrigOld*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyL1TrigOld*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyMITEvtSel_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyMITEvtSel(void *p = 0);
   static void *newArray_MyMITEvtSel(Long_t size, void *p);
   static void delete_MyMITEvtSel(void *p);
   static void deleteArray_MyMITEvtSel(void *p);
   static void destruct_MyMITEvtSel(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyMITEvtSel*)
   {
      ::MyMITEvtSel *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyMITEvtSel >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyMITEvtSel", ::MyMITEvtSel::Class_Version(), "./MyMITEvtSel.h", 6,
                  typeid(::MyMITEvtSel), DefineBehavior(ptr, ptr),
                  &::MyMITEvtSel::Dictionary, isa_proxy, 4,
                  sizeof(::MyMITEvtSel) );
      instance.SetNew(&new_MyMITEvtSel);
      instance.SetNewArray(&newArray_MyMITEvtSel);
      instance.SetDelete(&delete_MyMITEvtSel);
      instance.SetDeleteArray(&deleteArray_MyMITEvtSel);
      instance.SetDestructor(&destruct_MyMITEvtSel);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyMITEvtSel*)
   {
      return GenerateInitInstanceLocal((::MyMITEvtSel*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyMITEvtSel*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MySimVertex_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MySimVertex(void *p = 0);
   static void *newArray_MySimVertex(Long_t size, void *p);
   static void delete_MySimVertex(void *p);
   static void deleteArray_MySimVertex(void *p);
   static void destruct_MySimVertex(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MySimVertex*)
   {
      ::MySimVertex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MySimVertex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MySimVertex", ::MySimVertex::Class_Version(), "./MySimVertex.h", 6,
                  typeid(::MySimVertex), DefineBehavior(ptr, ptr),
                  &::MySimVertex::Dictionary, isa_proxy, 4,
                  sizeof(::MySimVertex) );
      instance.SetNew(&new_MySimVertex);
      instance.SetNewArray(&newArray_MySimVertex);
      instance.SetDelete(&delete_MySimVertex);
      instance.SetDeleteArray(&deleteArray_MySimVertex);
      instance.SetDestructor(&destruct_MySimVertex);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MySimVertex*)
   {
      return GenerateInitInstanceLocal((::MySimVertex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MySimVertex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyVertex_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyVertex(void *p = 0);
   static void *newArray_MyVertex(Long_t size, void *p);
   static void delete_MyVertex(void *p);
   static void deleteArray_MyVertex(void *p);
   static void destruct_MyVertex(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyVertex*)
   {
      ::MyVertex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyVertex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyVertex", ::MyVertex::Class_Version(), "./MyVertex.h", 6,
                  typeid(::MyVertex), DefineBehavior(ptr, ptr),
                  &::MyVertex::Dictionary, isa_proxy, 4,
                  sizeof(::MyVertex) );
      instance.SetNew(&new_MyVertex);
      instance.SetNewArray(&newArray_MyVertex);
      instance.SetDelete(&delete_MyVertex);
      instance.SetDeleteArray(&deleteArray_MyVertex);
      instance.SetDestructor(&destruct_MyVertex);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyVertex*)
   {
      return GenerateInitInstanceLocal((::MyVertex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyVertex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyTracks_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyTracks(void *p = 0);
   static void *newArray_MyTracks(Long_t size, void *p);
   static void delete_MyTracks(void *p);
   static void deleteArray_MyTracks(void *p);
   static void destruct_MyTracks(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyTracks*)
   {
      ::MyTracks *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyTracks >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyTracks", ::MyTracks::Class_Version(), "./MyTracks.h", 11,
                  typeid(::MyTracks), DefineBehavior(ptr, ptr),
                  &::MyTracks::Dictionary, isa_proxy, 4,
                  sizeof(::MyTracks) );
      instance.SetNew(&new_MyTracks);
      instance.SetNewArray(&newArray_MyTracks);
      instance.SetDelete(&delete_MyTracks);
      instance.SetDeleteArray(&deleteArray_MyTracks);
      instance.SetDestructor(&destruct_MyTracks);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyTracks*)
   {
      return GenerateInitInstanceLocal((::MyTracks*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyTracks*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyElectron_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyElectron(void *p = 0);
   static void *newArray_MyElectron(Long_t size, void *p);
   static void delete_MyElectron(void *p);
   static void deleteArray_MyElectron(void *p);
   static void destruct_MyElectron(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyElectron*)
   {
      ::MyElectron *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyElectron >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyElectron", ::MyElectron::Class_Version(), "./MyElectron.h", 8,
                  typeid(::MyElectron), DefineBehavior(ptr, ptr),
                  &::MyElectron::Dictionary, isa_proxy, 4,
                  sizeof(::MyElectron) );
      instance.SetNew(&new_MyElectron);
      instance.SetNewArray(&newArray_MyElectron);
      instance.SetDelete(&delete_MyElectron);
      instance.SetDeleteArray(&deleteArray_MyElectron);
      instance.SetDestructor(&destruct_MyElectron);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyElectron*)
   {
      return GenerateInitInstanceLocal((::MyElectron*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyElectron*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyMuon_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyMuon(void *p = 0);
   static void *newArray_MyMuon(Long_t size, void *p);
   static void delete_MyMuon(void *p);
   static void deleteArray_MyMuon(void *p);
   static void destruct_MyMuon(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyMuon*)
   {
      ::MyMuon *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyMuon >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyMuon", ::MyMuon::Class_Version(), "./MyMuon.h", 8,
                  typeid(::MyMuon), DefineBehavior(ptr, ptr),
                  &::MyMuon::Dictionary, isa_proxy, 4,
                  sizeof(::MyMuon) );
      instance.SetNew(&new_MyMuon);
      instance.SetNewArray(&newArray_MyMuon);
      instance.SetDelete(&delete_MyMuon);
      instance.SetDeleteArray(&deleteArray_MyMuon);
      instance.SetDestructor(&destruct_MyMuon);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyMuon*)
   {
      return GenerateInitInstanceLocal((::MyMuon*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyMuon*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyBaseJet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyBaseJet(void *p = 0);
   static void *newArray_MyBaseJet(Long_t size, void *p);
   static void delete_MyBaseJet(void *p);
   static void deleteArray_MyBaseJet(void *p);
   static void destruct_MyBaseJet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyBaseJet*)
   {
      ::MyBaseJet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyBaseJet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyBaseJet", ::MyBaseJet::Class_Version(), "./MyBaseJet.h", 6,
                  typeid(::MyBaseJet), DefineBehavior(ptr, ptr),
                  &::MyBaseJet::Dictionary, isa_proxy, 4,
                  sizeof(::MyBaseJet) );
      instance.SetNew(&new_MyBaseJet);
      instance.SetNewArray(&newArray_MyBaseJet);
      instance.SetDelete(&delete_MyBaseJet);
      instance.SetDeleteArray(&deleteArray_MyBaseJet);
      instance.SetDestructor(&destruct_MyBaseJet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyBaseJet*)
   {
      return GenerateInitInstanceLocal((::MyBaseJet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyBaseJet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyJet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyJet(void *p = 0);
   static void *newArray_MyJet(Long_t size, void *p);
   static void delete_MyJet(void *p);
   static void deleteArray_MyJet(void *p);
   static void destruct_MyJet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyJet*)
   {
      ::MyJet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyJet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyJet", ::MyJet::Class_Version(), "./MyJet.h", 13,
                  typeid(::MyJet), DefineBehavior(ptr, ptr),
                  &::MyJet::Dictionary, isa_proxy, 4,
                  sizeof(::MyJet) );
      instance.SetNew(&new_MyJet);
      instance.SetNewArray(&newArray_MyJet);
      instance.SetDelete(&delete_MyJet);
      instance.SetDeleteArray(&deleteArray_MyJet);
      instance.SetDestructor(&destruct_MyJet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyJet*)
   {
      return GenerateInitInstanceLocal((::MyJet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyJet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyCaloJet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyCaloJet(void *p = 0);
   static void *newArray_MyCaloJet(Long_t size, void *p);
   static void delete_MyCaloJet(void *p);
   static void deleteArray_MyCaloJet(void *p);
   static void destruct_MyCaloJet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyCaloJet*)
   {
      ::MyCaloJet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyCaloJet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyCaloJet", ::MyCaloJet::Class_Version(), "./MyCaloJet.h", 6,
                  typeid(::MyCaloJet), DefineBehavior(ptr, ptr),
                  &::MyCaloJet::Dictionary, isa_proxy, 4,
                  sizeof(::MyCaloJet) );
      instance.SetNew(&new_MyCaloJet);
      instance.SetNewArray(&newArray_MyCaloJet);
      instance.SetDelete(&delete_MyCaloJet);
      instance.SetDeleteArray(&deleteArray_MyCaloJet);
      instance.SetDestructor(&destruct_MyCaloJet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyCaloJet*)
   {
      return GenerateInitInstanceLocal((::MyCaloJet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyCaloJet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyTrackJet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyTrackJet(void *p = 0);
   static void *newArray_MyTrackJet(Long_t size, void *p);
   static void delete_MyTrackJet(void *p);
   static void deleteArray_MyTrackJet(void *p);
   static void destruct_MyTrackJet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyTrackJet*)
   {
      ::MyTrackJet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyTrackJet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyTrackJet", ::MyTrackJet::Class_Version(), "./MyTrackJet.h", 10,
                  typeid(::MyTrackJet), DefineBehavior(ptr, ptr),
                  &::MyTrackJet::Dictionary, isa_proxy, 4,
                  sizeof(::MyTrackJet) );
      instance.SetNew(&new_MyTrackJet);
      instance.SetNewArray(&newArray_MyTrackJet);
      instance.SetDelete(&delete_MyTrackJet);
      instance.SetDeleteArray(&deleteArray_MyTrackJet);
      instance.SetDestructor(&destruct_MyTrackJet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyTrackJet*)
   {
      return GenerateInitInstanceLocal((::MyTrackJet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyTrackJet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyPFJet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyPFJet(void *p = 0);
   static void *newArray_MyPFJet(Long_t size, void *p);
   static void delete_MyPFJet(void *p);
   static void deleteArray_MyPFJet(void *p);
   static void destruct_MyPFJet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyPFJet*)
   {
      ::MyPFJet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyPFJet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyPFJet", ::MyPFJet::Class_Version(), "./MyPFJet.h", 8,
                  typeid(::MyPFJet), DefineBehavior(ptr, ptr),
                  &::MyPFJet::Dictionary, isa_proxy, 4,
                  sizeof(::MyPFJet) );
      instance.SetNew(&new_MyPFJet);
      instance.SetNewArray(&newArray_MyPFJet);
      instance.SetDelete(&delete_MyPFJet);
      instance.SetDeleteArray(&deleteArray_MyPFJet);
      instance.SetDestructor(&destruct_MyPFJet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyPFJet*)
   {
      return GenerateInitInstanceLocal((::MyPFJet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyPFJet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyPFCand_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyPFCand(void *p = 0);
   static void *newArray_MyPFCand(Long_t size, void *p);
   static void delete_MyPFCand(void *p);
   static void deleteArray_MyPFCand(void *p);
   static void destruct_MyPFCand(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyPFCand*)
   {
      ::MyPFCand *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyPFCand >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyPFCand", ::MyPFCand::Class_Version(), "./MyPFCand.h", 6,
                  typeid(::MyPFCand), DefineBehavior(ptr, ptr),
                  &::MyPFCand::Dictionary, isa_proxy, 4,
                  sizeof(::MyPFCand) );
      instance.SetNew(&new_MyPFCand);
      instance.SetNewArray(&newArray_MyPFCand);
      instance.SetDelete(&delete_MyPFCand);
      instance.SetDeleteArray(&deleteArray_MyPFCand);
      instance.SetDestructor(&destruct_MyPFCand);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyPFCand*)
   {
      return GenerateInitInstanceLocal((::MyPFCand*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyPFCand*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyCaloTower_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyCaloTower(void *p = 0);
   static void *newArray_MyCaloTower(Long_t size, void *p);
   static void delete_MyCaloTower(void *p);
   static void deleteArray_MyCaloTower(void *p);
   static void destruct_MyCaloTower(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyCaloTower*)
   {
      ::MyCaloTower *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyCaloTower >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyCaloTower", ::MyCaloTower::Class_Version(), "./MyCaloTower.h", 9,
                  typeid(::MyCaloTower), DefineBehavior(ptr, ptr),
                  &::MyCaloTower::Dictionary, isa_proxy, 4,
                  sizeof(::MyCaloTower) );
      instance.SetNew(&new_MyCaloTower);
      instance.SetNewArray(&newArray_MyCaloTower);
      instance.SetDelete(&delete_MyCaloTower);
      instance.SetDeleteArray(&deleteArray_MyCaloTower);
      instance.SetDestructor(&destruct_MyCaloTower);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyCaloTower*)
   {
      return GenerateInitInstanceLocal((::MyCaloTower*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyCaloTower*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyZDCHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyZDCHit(void *p = 0);
   static void *newArray_MyZDCHit(Long_t size, void *p);
   static void delete_MyZDCHit(void *p);
   static void deleteArray_MyZDCHit(void *p);
   static void destruct_MyZDCHit(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyZDCHit*)
   {
      ::MyZDCHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyZDCHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyZDCHit", ::MyZDCHit::Class_Version(), "./MyZDCHit.h", 6,
                  typeid(::MyZDCHit), DefineBehavior(ptr, ptr),
                  &::MyZDCHit::Dictionary, isa_proxy, 4,
                  sizeof(::MyZDCHit) );
      instance.SetNew(&new_MyZDCHit);
      instance.SetNewArray(&newArray_MyZDCHit);
      instance.SetDelete(&delete_MyZDCHit);
      instance.SetDeleteArray(&deleteArray_MyZDCHit);
      instance.SetDestructor(&destruct_MyZDCHit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyZDCHit*)
   {
      return GenerateInitInstanceLocal((::MyZDCHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyZDCHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyZDCDigi_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyZDCDigi(void *p = 0);
   static void *newArray_MyZDCDigi(Long_t size, void *p);
   static void delete_MyZDCDigi(void *p);
   static void deleteArray_MyZDCDigi(void *p);
   static void destruct_MyZDCDigi(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyZDCDigi*)
   {
      ::MyZDCDigi *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyZDCDigi >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyZDCDigi", ::MyZDCDigi::Class_Version(), "./MyZDCDigi.h", 8,
                  typeid(::MyZDCDigi), DefineBehavior(ptr, ptr),
                  &::MyZDCDigi::Dictionary, isa_proxy, 4,
                  sizeof(::MyZDCDigi) );
      instance.SetNew(&new_MyZDCDigi);
      instance.SetNewArray(&newArray_MyZDCDigi);
      instance.SetDelete(&delete_MyZDCDigi);
      instance.SetDeleteArray(&deleteArray_MyZDCDigi);
      instance.SetDestructor(&destruct_MyZDCDigi);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyZDCDigi*)
   {
      return GenerateInitInstanceLocal((::MyZDCDigi*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyZDCDigi*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyZDCInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyZDCInfo(void *p = 0);
   static void *newArray_MyZDCInfo(Long_t size, void *p);
   static void delete_MyZDCInfo(void *p);
   static void deleteArray_MyZDCInfo(void *p);
   static void destruct_MyZDCInfo(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyZDCInfo*)
   {
      ::MyZDCInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyZDCInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyZDCInfo", ::MyZDCInfo::Class_Version(), "./MyZDCInfo.h", 8,
                  typeid(::MyZDCInfo), DefineBehavior(ptr, ptr),
                  &::MyZDCInfo::Dictionary, isa_proxy, 4,
                  sizeof(::MyZDCInfo) );
      instance.SetNew(&new_MyZDCInfo);
      instance.SetNewArray(&newArray_MyZDCInfo);
      instance.SetDelete(&delete_MyZDCInfo);
      instance.SetDeleteArray(&deleteArray_MyZDCInfo);
      instance.SetDestructor(&destruct_MyZDCInfo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyZDCInfo*)
   {
      return GenerateInitInstanceLocal((::MyZDCInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyZDCInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyFSCHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyFSCHit(void *p = 0);
   static void *newArray_MyFSCHit(Long_t size, void *p);
   static void delete_MyFSCHit(void *p);
   static void deleteArray_MyFSCHit(void *p);
   static void destruct_MyFSCHit(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyFSCHit*)
   {
      ::MyFSCHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyFSCHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyFSCHit", ::MyFSCHit::Class_Version(), "./MyFSCHit.h", 6,
                  typeid(::MyFSCHit), DefineBehavior(ptr, ptr),
                  &::MyFSCHit::Dictionary, isa_proxy, 4,
                  sizeof(::MyFSCHit) );
      instance.SetNew(&new_MyFSCHit);
      instance.SetNewArray(&newArray_MyFSCHit);
      instance.SetDelete(&delete_MyFSCHit);
      instance.SetDeleteArray(&deleteArray_MyFSCHit);
      instance.SetDestructor(&destruct_MyFSCHit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyFSCHit*)
   {
      return GenerateInitInstanceLocal((::MyFSCHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyFSCHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyFSCDigi_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyFSCDigi(void *p = 0);
   static void *newArray_MyFSCDigi(Long_t size, void *p);
   static void delete_MyFSCDigi(void *p);
   static void deleteArray_MyFSCDigi(void *p);
   static void destruct_MyFSCDigi(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyFSCDigi*)
   {
      ::MyFSCDigi *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyFSCDigi >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyFSCDigi", ::MyFSCDigi::Class_Version(), "./MyFSCDigi.h", 8,
                  typeid(::MyFSCDigi), DefineBehavior(ptr, ptr),
                  &::MyFSCDigi::Dictionary, isa_proxy, 4,
                  sizeof(::MyFSCDigi) );
      instance.SetNew(&new_MyFSCDigi);
      instance.SetNewArray(&newArray_MyFSCDigi);
      instance.SetDelete(&delete_MyFSCDigi);
      instance.SetDeleteArray(&deleteArray_MyFSCDigi);
      instance.SetDestructor(&destruct_MyFSCDigi);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyFSCDigi*)
   {
      return GenerateInitInstanceLocal((::MyFSCDigi*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyFSCDigi*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyFSCInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MyFSCInfo(void *p = 0);
   static void *newArray_MyFSCInfo(Long_t size, void *p);
   static void delete_MyFSCInfo(void *p);
   static void deleteArray_MyFSCInfo(void *p);
   static void destruct_MyFSCInfo(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyFSCInfo*)
   {
      ::MyFSCInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyFSCInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyFSCInfo", ::MyFSCInfo::Class_Version(), "./MyFSCInfo.h", 8,
                  typeid(::MyFSCInfo), DefineBehavior(ptr, ptr),
                  &::MyFSCInfo::Dictionary, isa_proxy, 4,
                  sizeof(::MyFSCInfo) );
      instance.SetNew(&new_MyFSCInfo);
      instance.SetNewArray(&newArray_MyFSCInfo);
      instance.SetDelete(&delete_MyFSCInfo);
      instance.SetDeleteArray(&deleteArray_MyFSCInfo);
      instance.SetDestructor(&destruct_MyFSCInfo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyFSCInfo*)
   {
      return GenerateInitInstanceLocal((::MyFSCInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyFSCInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *MyBeamSpot::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyBeamSpot::Class_Name()
{
   return "MyBeamSpot";
}

//______________________________________________________________________________
const char *MyBeamSpot::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyBeamSpot*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyBeamSpot::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyBeamSpot*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyBeamSpot::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyBeamSpot*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyBeamSpot::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyBeamSpot*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyCastorDigi::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyCastorDigi::Class_Name()
{
   return "MyCastorDigi";
}

//______________________________________________________________________________
const char *MyCastorDigi::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCastorDigi*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyCastorDigi::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCastorDigi*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyCastorDigi::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCastorDigi*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyCastorDigi::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCastorDigi*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyCastorJet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyCastorJet::Class_Name()
{
   return "MyCastorJet";
}

//______________________________________________________________________________
const char *MyCastorJet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCastorJet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyCastorJet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCastorJet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyCastorJet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCastorJet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyCastorJet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCastorJet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyCastorRecHit::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyCastorRecHit::Class_Name()
{
   return "MyCastorRecHit";
}

//______________________________________________________________________________
const char *MyCastorRecHit::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCastorRecHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyCastorRecHit::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCastorRecHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyCastorRecHit::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCastorRecHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyCastorRecHit::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCastorRecHit*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyDiJet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyDiJet::Class_Name()
{
   return "MyDiJet";
}

//______________________________________________________________________________
const char *MyDiJet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyDiJet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyDiJet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyDiJet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyDiJet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyDiJet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyDiJet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyDiJet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyEvtId::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyEvtId::Class_Name()
{
   return "MyEvtId";
}

//______________________________________________________________________________
const char *MyEvtId::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyEvtId*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyEvtId::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyEvtId*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyEvtId::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyEvtId*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyEvtId::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyEvtId*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyFwdGap::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyFwdGap::Class_Name()
{
   return "MyFwdGap";
}

//______________________________________________________________________________
const char *MyFwdGap::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyFwdGap*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyFwdGap::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyFwdGap*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyFwdGap::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyFwdGap*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyFwdGap::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyFwdGap*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyPart::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyPart::Class_Name()
{
   return "MyPart";
}

//______________________________________________________________________________
const char *MyPart::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyPart*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyPart::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyPart*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyPart::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyPart*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyPart::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyPart*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyMet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyMet::Class_Name()
{
   return "MyMet";
}

//______________________________________________________________________________
const char *MyMet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyMet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyMet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyMet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyMet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyMet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyMet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyMet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyGenMet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyGenMet::Class_Name()
{
   return "MyGenMet";
}

//______________________________________________________________________________
const char *MyGenMet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyGenMet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyGenMet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyGenMet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyGenMet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyGenMet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyGenMet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyGenMet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyGenKin::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyGenKin::Class_Name()
{
   return "MyGenKin";
}

//______________________________________________________________________________
const char *MyGenKin::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyGenKin*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyGenKin::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyGenKin*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyGenKin::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyGenKin*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyGenKin::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyGenKin*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyGenPart::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyGenPart::Class_Name()
{
   return "MyGenPart";
}

//______________________________________________________________________________
const char *MyGenPart::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyGenPart*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyGenPart::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyGenPart*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyGenPart::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyGenPart*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyGenPart::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyGenPart*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyGenJet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyGenJet::Class_Name()
{
   return "MyGenJet";
}

//______________________________________________________________________________
const char *MyGenJet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyGenJet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyGenJet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyGenJet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyGenJet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyGenJet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyGenJet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyGenJet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyPUSumInfo::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyPUSumInfo::Class_Name()
{
   return "MyPUSumInfo";
}

//______________________________________________________________________________
const char *MyPUSumInfo::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyPUSumInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyPUSumInfo::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyPUSumInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyPUSumInfo::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyPUSumInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyPUSumInfo::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyPUSumInfo*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyHLTrig::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyHLTrig::Class_Name()
{
   return "MyHLTrig";
}

//______________________________________________________________________________
const char *MyHLTrig::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyHLTrig*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyHLTrig::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyHLTrig*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyHLTrig::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyHLTrig*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyHLTrig::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyHLTrig*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyL1Trig::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyL1Trig::Class_Name()
{
   return "MyL1Trig";
}

//______________________________________________________________________________
const char *MyL1Trig::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyL1Trig*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyL1Trig::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyL1Trig*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyL1Trig::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyL1Trig*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyL1Trig::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyL1Trig*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyL1TrigOld::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyL1TrigOld::Class_Name()
{
   return "MyL1TrigOld";
}

//______________________________________________________________________________
const char *MyL1TrigOld::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyL1TrigOld*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyL1TrigOld::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyL1TrigOld*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyL1TrigOld::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyL1TrigOld*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyL1TrigOld::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyL1TrigOld*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyMITEvtSel::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyMITEvtSel::Class_Name()
{
   return "MyMITEvtSel";
}

//______________________________________________________________________________
const char *MyMITEvtSel::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyMITEvtSel*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyMITEvtSel::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyMITEvtSel*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyMITEvtSel::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyMITEvtSel*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyMITEvtSel::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyMITEvtSel*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MySimVertex::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MySimVertex::Class_Name()
{
   return "MySimVertex";
}

//______________________________________________________________________________
const char *MySimVertex::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MySimVertex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MySimVertex::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MySimVertex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MySimVertex::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MySimVertex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MySimVertex::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MySimVertex*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyVertex::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyVertex::Class_Name()
{
   return "MyVertex";
}

//______________________________________________________________________________
const char *MyVertex::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyVertex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyVertex::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyVertex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyVertex::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyVertex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyVertex::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyVertex*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyTracks::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyTracks::Class_Name()
{
   return "MyTracks";
}

//______________________________________________________________________________
const char *MyTracks::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyTracks*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyTracks::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyTracks*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyTracks::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyTracks*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyTracks::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyTracks*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyElectron::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyElectron::Class_Name()
{
   return "MyElectron";
}

//______________________________________________________________________________
const char *MyElectron::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyElectron*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyElectron::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyElectron*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyElectron::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyElectron*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyElectron::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyElectron*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyMuon::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyMuon::Class_Name()
{
   return "MyMuon";
}

//______________________________________________________________________________
const char *MyMuon::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyMuon*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyMuon::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyMuon*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyMuon::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyMuon*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyMuon::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyMuon*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyBaseJet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyBaseJet::Class_Name()
{
   return "MyBaseJet";
}

//______________________________________________________________________________
const char *MyBaseJet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyBaseJet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyBaseJet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyBaseJet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyBaseJet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyBaseJet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyBaseJet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyBaseJet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyJet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyJet::Class_Name()
{
   return "MyJet";
}

//______________________________________________________________________________
const char *MyJet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyJet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyJet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyJet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyJet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyJet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyJet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyJet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyCaloJet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyCaloJet::Class_Name()
{
   return "MyCaloJet";
}

//______________________________________________________________________________
const char *MyCaloJet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCaloJet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyCaloJet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCaloJet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyCaloJet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCaloJet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyCaloJet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCaloJet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyTrackJet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyTrackJet::Class_Name()
{
   return "MyTrackJet";
}

//______________________________________________________________________________
const char *MyTrackJet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyTrackJet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyTrackJet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyTrackJet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyTrackJet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyTrackJet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyTrackJet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyTrackJet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyPFJet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyPFJet::Class_Name()
{
   return "MyPFJet";
}

//______________________________________________________________________________
const char *MyPFJet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyPFJet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyPFJet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyPFJet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyPFJet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyPFJet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyPFJet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyPFJet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyPFCand::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyPFCand::Class_Name()
{
   return "MyPFCand";
}

//______________________________________________________________________________
const char *MyPFCand::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyPFCand*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyPFCand::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyPFCand*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyPFCand::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyPFCand*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyPFCand::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyPFCand*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyCaloTower::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyCaloTower::Class_Name()
{
   return "MyCaloTower";
}

//______________________________________________________________________________
const char *MyCaloTower::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCaloTower*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyCaloTower::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyCaloTower*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyCaloTower::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCaloTower*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyCaloTower::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyCaloTower*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyZDCHit::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyZDCHit::Class_Name()
{
   return "MyZDCHit";
}

//______________________________________________________________________________
const char *MyZDCHit::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyZDCHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyZDCHit::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyZDCHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyZDCHit::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyZDCHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyZDCHit::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyZDCHit*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyZDCDigi::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyZDCDigi::Class_Name()
{
   return "MyZDCDigi";
}

//______________________________________________________________________________
const char *MyZDCDigi::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyZDCDigi*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyZDCDigi::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyZDCDigi*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyZDCDigi::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyZDCDigi*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyZDCDigi::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyZDCDigi*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyZDCInfo::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyZDCInfo::Class_Name()
{
   return "MyZDCInfo";
}

//______________________________________________________________________________
const char *MyZDCInfo::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyZDCInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyZDCInfo::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyZDCInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyZDCInfo::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyZDCInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyZDCInfo::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyZDCInfo*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyFSCHit::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyFSCHit::Class_Name()
{
   return "MyFSCHit";
}

//______________________________________________________________________________
const char *MyFSCHit::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyFSCHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyFSCHit::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyFSCHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyFSCHit::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyFSCHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyFSCHit::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyFSCHit*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyFSCDigi::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyFSCDigi::Class_Name()
{
   return "MyFSCDigi";
}

//______________________________________________________________________________
const char *MyFSCDigi::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyFSCDigi*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyFSCDigi::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyFSCDigi*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyFSCDigi::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyFSCDigi*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyFSCDigi::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyFSCDigi*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyFSCInfo::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyFSCInfo::Class_Name()
{
   return "MyFSCInfo";
}

//______________________________________________________________________________
const char *MyFSCInfo::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyFSCInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyFSCInfo::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyFSCInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyFSCInfo::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyFSCInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyFSCInfo::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyFSCInfo*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
namespace ROOT {
   void pairlEstringcOboolgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class pair<string,bool>.
      typedef ::ROOT::Shadow::pairlEstringcOboolgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const pair<string,bool>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "first", (void*)&sobj->first);
      R__insp.InspectMember("string", (void*)&sobj->first, "first.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "second", &sobj->second);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_pairlEstringcOboolgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) pair<string,bool> : new pair<string,bool>;
   }
   static void *newArray_pairlEstringcOboolgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) pair<string,bool>[nElements] : new pair<string,bool>[nElements];
   }
   // Wrapper around operator delete
   static void delete_pairlEstringcOboolgR(void *p) {
      delete ((pair<string,bool>*)p);
   }
   static void deleteArray_pairlEstringcOboolgR(void *p) {
      delete [] ((pair<string,bool>*)p);
   }
   static void destruct_pairlEstringcOboolgR(void *p) {
      typedef pair<string,bool> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class pair<string,bool>

//______________________________________________________________________________
void MyBeamSpot::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyBeamSpot.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyBeamSpot::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyBeamSpot::Class(),this);
   }
}

//______________________________________________________________________________
void MyBeamSpot::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyBeamSpot.
      TClass *R__cl = ::MyBeamSpot::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ex", &ex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ey", &ey);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ez", &ez);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaZ", &sigmaZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxdz", &dxdz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dydz", &dydz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "esigmaZ", &esigmaZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "edxdz", &edxdz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "edydz", &edydz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BeamWidthX", &BeamWidthX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BeamWidthY", &BeamWidthY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eBeamWidthX", &eBeamWidthX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eBeamWidthY", &eBeamWidthY);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyBeamSpot(void *p) {
      return  p ? new(p) ::MyBeamSpot : new ::MyBeamSpot;
   }
   static void *newArray_MyBeamSpot(Long_t nElements, void *p) {
      return p ? new(p) ::MyBeamSpot[nElements] : new ::MyBeamSpot[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyBeamSpot(void *p) {
      delete ((::MyBeamSpot*)p);
   }
   static void deleteArray_MyBeamSpot(void *p) {
      delete [] ((::MyBeamSpot*)p);
   }
   static void destruct_MyBeamSpot(void *p) {
      typedef ::MyBeamSpot current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyBeamSpot

//______________________________________________________________________________
void MyCastorDigi::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyCastorDigi.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyCastorDigi::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyCastorDigi::Class(),this);
   }
}

//______________________________________________________________________________
void MyCastorDigi::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyCastorDigi.
      TClass *R__cl = ::MyCastorDigi::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "adc", (void*)&adc);
      R__insp.InspectMember("vector<Double_t>", (void*)&adc, "adc.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fC", (void*)&fC);
      R__insp.InspectMember("vector<Double_t>", (void*)&fC, "fC.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mod", &mod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sec", &sec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cha", &cha);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyCastorDigi(void *p) {
      return  p ? new(p) ::MyCastorDigi : new ::MyCastorDigi;
   }
   static void *newArray_MyCastorDigi(Long_t nElements, void *p) {
      return p ? new(p) ::MyCastorDigi[nElements] : new ::MyCastorDigi[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyCastorDigi(void *p) {
      delete ((::MyCastorDigi*)p);
   }
   static void deleteArray_MyCastorDigi(void *p) {
      delete [] ((::MyCastorDigi*)p);
   }
   static void destruct_MyCastorDigi(void *p) {
      typedef ::MyCastorDigi current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyCastorDigi

//______________________________________________________________________________
void MyCastorJet::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyCastorJet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyCastorJet::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyCastorJet::Class(),this);
   }
}

//______________________________________________________________________________
void MyCastorJet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyCastorJet.
      TClass *R__cl = ::MyCastorJet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy", &energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fem", &fem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eem", &eem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ehad", &ehad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "width", &width);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "depth", &depth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fhot", &fhot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaz", &sigmaz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntower", &ntower);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyCastorJet(void *p) {
      return  p ? new(p) ::MyCastorJet : new ::MyCastorJet;
   }
   static void *newArray_MyCastorJet(Long_t nElements, void *p) {
      return p ? new(p) ::MyCastorJet[nElements] : new ::MyCastorJet[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyCastorJet(void *p) {
      delete ((::MyCastorJet*)p);
   }
   static void deleteArray_MyCastorJet(void *p) {
      delete [] ((::MyCastorJet*)p);
   }
   static void destruct_MyCastorJet(void *p) {
      typedef ::MyCastorJet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyCastorJet

//______________________________________________________________________________
void MyCastorRecHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyCastorRecHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyCastorRecHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyCastorRecHit::Class(),this);
   }
}

//______________________________________________________________________________
void MyCastorRecHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyCastorRecHit.
      TClass *R__cl = ::MyCastorRecHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy", &energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fC", &fC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mod", &mod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sec", &sec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cha", &cha);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "smearing", &smearing);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy_smeared", &energy_smeared);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fC_smeared", &fC_smeared);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyCastorRecHit(void *p) {
      return  p ? new(p) ::MyCastorRecHit : new ::MyCastorRecHit;
   }
   static void *newArray_MyCastorRecHit(Long_t nElements, void *p) {
      return p ? new(p) ::MyCastorRecHit[nElements] : new ::MyCastorRecHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyCastorRecHit(void *p) {
      delete ((::MyCastorRecHit*)p);
   }
   static void deleteArray_MyCastorRecHit(void *p) {
      delete [] ((::MyCastorRecHit*)p);
   }
   static void destruct_MyCastorRecHit(void *p) {
      typedef ::MyCastorRecHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyCastorRecHit

//______________________________________________________________________________
void MyDiJet::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyDiJet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyDiJet::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyDiJet::Class(),this);
   }
}

//______________________________________________________________________________
void MyDiJet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyDiJet.
      TClass *R__cl = ::MyDiJet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isDiJet", &isDiJet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "posJet1", &posJet1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "posJet2", &posJet2);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyDiJet(void *p) {
      return  p ? new(p) ::MyDiJet : new ::MyDiJet;
   }
   static void *newArray_MyDiJet(Long_t nElements, void *p) {
      return p ? new(p) ::MyDiJet[nElements] : new ::MyDiJet[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyDiJet(void *p) {
      delete ((::MyDiJet*)p);
   }
   static void deleteArray_MyDiJet(void *p) {
      delete [] ((::MyDiJet*)p);
   }
   static void destruct_MyDiJet(void *p) {
      typedef ::MyDiJet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyDiJet

//______________________________________________________________________________
void MyEvtId::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyEvtId.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyEvtId::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyEvtId::Class(),this);
   }
}

//______________________________________________________________________________
void MyEvtId::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyEvtId.
      TClass *R__cl = ::MyEvtId::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Run", &Run);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Evt", &Evt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LumiSect", &LumiSect);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IsData", &IsData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ExpType", &ExpType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Bunch", &Bunch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Orbit", &Orbit);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyEvtId(void *p) {
      return  p ? new(p) ::MyEvtId : new ::MyEvtId;
   }
   static void *newArray_MyEvtId(Long_t nElements, void *p) {
      return p ? new(p) ::MyEvtId[nElements] : new ::MyEvtId[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyEvtId(void *p) {
      delete ((::MyEvtId*)p);
   }
   static void deleteArray_MyEvtId(void *p) {
      delete [] ((::MyEvtId*)p);
   }
   static void destruct_MyEvtId(void *p) {
      typedef ::MyEvtId current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyEvtId

//______________________________________________________________________________
void MyFwdGap::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyFwdGap.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyFwdGap::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyFwdGap::Class(),this);
   }
}

//______________________________________________________________________________
void MyFwdGap::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyFwdGap.
      TClass *R__cl = ::MyFwdGap::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTowersHF_plus", &nTowersHF_plus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTowersHF_minus", &nTowersHF_minus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTowersHE_plus", &nTowersHE_plus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTowersHE_minus", &nTowersHE_minus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTowersHB_plus", &nTowersHB_plus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTowersHB_minus", &nTowersHB_minus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTowersEE_plus", &nTowersEE_plus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTowersEE_minus", &nTowersEE_minus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTowersEB_plus", &nTowersEB_plus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTowersEB_minus", &nTowersEB_minus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumEHF_plus", &sumEHF_plus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumEHF_minus", &sumEHF_minus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumEHE_plus", &sumEHE_plus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumEHE_minus", &sumEHE_minus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumEHB_plus", &sumEHB_plus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumEHB_minus", &sumEHB_minus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumEEE_plus", &sumEEE_plus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumEEE_minus", &sumEEE_minus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumEEB_plus", &sumEEB_plus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumEEB_minus", &sumEEB_minus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumETHF_plus", &sumETHF_plus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumETHF_minus", &sumETHF_minus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumETHE_plus", &sumETHE_plus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumETHE_minus", &sumETHE_minus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumETHB_plus", &sumETHB_plus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumETHB_minus", &sumETHB_minus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumETEE_plus", &sumETEE_plus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumETEE_minus", &sumETEE_minus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumETEB_plus", &sumETEB_plus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumETEB_minus", &sumETEB_minus);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyFwdGap(void *p) {
      return  p ? new(p) ::MyFwdGap : new ::MyFwdGap;
   }
   static void *newArray_MyFwdGap(Long_t nElements, void *p) {
      return p ? new(p) ::MyFwdGap[nElements] : new ::MyFwdGap[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyFwdGap(void *p) {
      delete ((::MyFwdGap*)p);
   }
   static void deleteArray_MyFwdGap(void *p) {
      delete [] ((::MyFwdGap*)p);
   }
   static void destruct_MyFwdGap(void *p) {
      typedef ::MyFwdGap current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyFwdGap

//______________________________________________________________________________
void MyGenKin::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyGenKin.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyGenKin::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyGenKin::Class(),this);
   }
}

//______________________________________________________________________________
void MyGenKin::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyGenKin.
      TClass *R__cl = ::MyGenKin::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MCProcId", &MCProcId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PtHat", &PtHat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genWeight", &genWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x1", &x1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x2", &x2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Q", &Q);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Part1Id", &Part1Id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Part2Id", &Part2Id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kfactor", &kfactor);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyGenKin(void *p) {
      return  p ? new(p) ::MyGenKin : new ::MyGenKin;
   }
   static void *newArray_MyGenKin(Long_t nElements, void *p) {
      return p ? new(p) ::MyGenKin[nElements] : new ::MyGenKin[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyGenKin(void *p) {
      delete ((::MyGenKin*)p);
   }
   static void deleteArray_MyGenKin(void *p) {
      delete [] ((::MyGenKin*)p);
   }
   static void destruct_MyGenKin(void *p) {
      typedef ::MyGenKin current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyGenKin

//______________________________________________________________________________
void MyPUSumInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyPUSumInfo.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyPUSumInfo::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyPUSumInfo::Class(),this);
   }
}

//______________________________________________________________________________
void MyPUSumInfo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyPUSumInfo.
      TClass *R__cl = ::MyPUSumInfo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPU", &nPU);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zposition", (void*)&zposition);
      R__insp.InspectMember("vector<Float_t>", (void*)&zposition, "zposition.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumpT_lowpT", (void*)&sumpT_lowpT);
      R__insp.InspectMember("vector<Float_t>", (void*)&sumpT_lowpT, "sumpT_lowpT.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumpT_highpT", (void*)&sumpT_highpT);
      R__insp.InspectMember("vector<Float_t>", (void*)&sumpT_highpT, "sumpT_highpT.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntrks_lowpT", (void*)&ntrks_lowpT);
      R__insp.InspectMember("vector<Int_t>", (void*)&ntrks_lowpT, "ntrks_lowpT.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntrks_highpT", (void*)&ntrks_highpT);
      R__insp.InspectMember("vector<Int_t>", (void*)&ntrks_highpT, "ntrks_highpT.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyPUSumInfo(void *p) {
      return  p ? new(p) ::MyPUSumInfo : new ::MyPUSumInfo;
   }
   static void *newArray_MyPUSumInfo(Long_t nElements, void *p) {
      return p ? new(p) ::MyPUSumInfo[nElements] : new ::MyPUSumInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyPUSumInfo(void *p) {
      delete ((::MyPUSumInfo*)p);
   }
   static void deleteArray_MyPUSumInfo(void *p) {
      delete [] ((::MyPUSumInfo*)p);
   }
   static void destruct_MyPUSumInfo(void *p) {
      typedef ::MyPUSumInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyPUSumInfo

//______________________________________________________________________________
void MyMet::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyMet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyMet::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyMet::Class(),this);
   }
}

//______________________________________________________________________________
void MyMet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyMet.
      TClass *R__cl = ::MyMet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumet", &sumet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "elongit", &elongit);
      MyPart::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyMet(void *p) {
      return  p ? new(p) ::MyMet : new ::MyMet;
   }
   static void *newArray_MyMet(Long_t nElements, void *p) {
      return p ? new(p) ::MyMet[nElements] : new ::MyMet[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyMet(void *p) {
      delete ((::MyMet*)p);
   }
   static void deleteArray_MyMet(void *p) {
      delete [] ((::MyMet*)p);
   }
   static void destruct_MyMet(void *p) {
      typedef ::MyMet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyMet

//______________________________________________________________________________
void MyGenMet::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyGenMet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyGenMet::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyGenMet::Class(),this);
   }
}

//______________________________________________________________________________
void MyGenMet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyGenMet.
      TClass *R__cl = ::MyGenMet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Met", &Met);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MetX", &MetX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MetY", &MetY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MetPhi", &MetPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MetGP1", &MetGP1);
      R__insp.InspectMember(MetGP1, "MetGP1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MetGP3", &MetGP3);
      R__insp.InspectMember(MetGP3, "MetGP3.");
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyGenMet(void *p) {
      return  p ? new(p) ::MyGenMet : new ::MyGenMet;
   }
   static void *newArray_MyGenMet(Long_t nElements, void *p) {
      return p ? new(p) ::MyGenMet[nElements] : new ::MyGenMet[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyGenMet(void *p) {
      delete ((::MyGenMet*)p);
   }
   static void deleteArray_MyGenMet(void *p) {
      delete [] ((::MyGenMet*)p);
   }
   static void destruct_MyGenMet(void *p) {
      typedef ::MyGenMet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyGenMet

//______________________________________________________________________________
void MyGenPart::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyGenPart.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyGenPart::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyGenPart::Class(),this);
   }
}

//______________________________________________________________________________
void MyGenPart::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyGenPart.
      TClass *R__cl = ::MyGenPart::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdgId", &pdgId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mo1", &mo1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mo2", &mo2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "da1", &da1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "da2", &da2);
      MyPart::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyGenPart(void *p) {
      return  p ? new(p) ::MyGenPart : new ::MyGenPart;
   }
   static void *newArray_MyGenPart(Long_t nElements, void *p) {
      return p ? new(p) ::MyGenPart[nElements] : new ::MyGenPart[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyGenPart(void *p) {
      delete ((::MyGenPart*)p);
   }
   static void deleteArray_MyGenPart(void *p) {
      delete [] ((::MyGenPart*)p);
   }
   static void destruct_MyGenPart(void *p) {
      typedef ::MyGenPart current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyGenPart

//______________________________________________________________________________
void MyGenJet::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyGenJet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyGenJet::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyGenJet::Class(),this);
   }
}

//______________________________________________________________________________
void MyGenJet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyGenJet.
      TClass *R__cl = ::MyGenJet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "npart", &npart);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "JetPart", (void*)&JetPart);
      R__insp.InspectMember("vector<MyGenPart>", (void*)&JetPart, "JetPart.", false);
      MyPart::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyGenJet(void *p) {
      return  p ? new(p) ::MyGenJet : new ::MyGenJet;
   }
   static void *newArray_MyGenJet(Long_t nElements, void *p) {
      return p ? new(p) ::MyGenJet[nElements] : new ::MyGenJet[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyGenJet(void *p) {
      delete ((::MyGenJet*)p);
   }
   static void deleteArray_MyGenJet(void *p) {
      delete [] ((::MyGenJet*)p);
   }
   static void destruct_MyGenJet(void *p) {
      typedef ::MyGenJet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyGenJet

//______________________________________________________________________________
void MyHLTrig::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyHLTrig.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyHLTrig::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyHLTrig::Class(),this);
   }
}

//______________________________________________________________________________
void MyHLTrig::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyHLTrig.
      TClass *R__cl = ::MyHLTrig::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HLTmap", (void*)&HLTmap);
      R__insp.InspectMember("map<string,bool>", (void*)&HLTmap, "HLTmap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HLTprescale", (void*)&HLTprescale);
      R__insp.InspectMember("map<string,double>", (void*)&HLTprescale, "HLTprescale.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyHLTrig(void *p) {
      return  p ? new(p) ::MyHLTrig : new ::MyHLTrig;
   }
   static void *newArray_MyHLTrig(Long_t nElements, void *p) {
      return p ? new(p) ::MyHLTrig[nElements] : new ::MyHLTrig[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyHLTrig(void *p) {
      delete ((::MyHLTrig*)p);
   }
   static void deleteArray_MyHLTrig(void *p) {
      delete [] ((::MyHLTrig*)p);
   }
   static void destruct_MyHLTrig(void *p) {
      typedef ::MyHLTrig current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyHLTrig

//______________________________________________________________________________
void MyL1Trig::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyL1Trig.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyL1Trig::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyL1Trig::Class(),this);
   }
}

//______________________________________________________________________________
void MyL1Trig::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyL1Trig.
      TClass *R__cl = ::MyL1Trig::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhysMap", (void*)&fPhysMap);
      R__insp.InspectMember("MyL1Trig::TrigMap", (void*)&fPhysMap, "fPhysMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhysMask[128]", fPhysMask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhysDecisionBefore[128]", fPhysDecisionBefore);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhysDecisionAfter[128]", fPhysDecisionAfter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhysPrescale[128]", fPhysPrescale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhysAlias[128]", fPhysAlias);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTechMap", (void*)&fTechMap);
      R__insp.InspectMember("MyL1Trig::TrigMap", (void*)&fTechMap, "fTechMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTechMask[64]", fTechMask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTechDecisionBefore[64]", fTechDecisionBefore);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTechDecisionAfter[64]", fTechDecisionAfter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTechPrescale[64]", fTechPrescale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTechAlias[64]", fTechAlias);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyL1Trig(void *p) {
      return  p ? new(p) ::MyL1Trig : new ::MyL1Trig;
   }
   static void *newArray_MyL1Trig(Long_t nElements, void *p) {
      return p ? new(p) ::MyL1Trig[nElements] : new ::MyL1Trig[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyL1Trig(void *p) {
      delete ((::MyL1Trig*)p);
   }
   static void deleteArray_MyL1Trig(void *p) {
      delete [] ((::MyL1Trig*)p);
   }
   static void destruct_MyL1Trig(void *p) {
      typedef ::MyL1Trig current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyL1Trig

//______________________________________________________________________________
void MyL1TrigOld::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyL1TrigOld.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyL1TrigOld::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyL1TrigOld::Class(),this);
   }
}

//______________________________________________________________________________
void MyL1TrigOld::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyL1TrigOld.
      TClass *R__cl = ::MyL1TrigOld::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PhysTrigWord[128]", PhysTrigWord);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TechTrigWord[64]", TechTrigWord);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyL1TrigOld(void *p) {
      return  p ? new(p) ::MyL1TrigOld : new ::MyL1TrigOld;
   }
   static void *newArray_MyL1TrigOld(Long_t nElements, void *p) {
      return p ? new(p) ::MyL1TrigOld[nElements] : new ::MyL1TrigOld[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyL1TrigOld(void *p) {
      delete ((::MyL1TrigOld*)p);
   }
   static void deleteArray_MyL1TrigOld(void *p) {
      delete [] ((::MyL1TrigOld*)p);
   }
   static void destruct_MyL1TrigOld(void *p) {
      typedef ::MyL1TrigOld current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyL1TrigOld

//______________________________________________________________________________
void MyMITEvtSel::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyMITEvtSel.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyMITEvtSel::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyMITEvtSel::Class(),this);
   }
}

//______________________________________________________________________________
void MyMITEvtSel::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyMITEvtSel.
      TClass *R__cl = ::MyMITEvtSel::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eHcalNeg", &eHcalNeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eHcalPos", &eHcalPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eHfNeg", &eHfNeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eHfPos", &eHfPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eHfNegTime", &eHfNegTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eHfPosTime", &eHfPosTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCaNeg", &eCaNeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCaPos", &eCaPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCaNegTime", &eCaNegTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCaPosTime", &eCaPosTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZdcNeg", &eZdcNeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZdcPos", &eZdcPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZdcNegTime", &eZdcNegTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZdcPosTime", &eZdcPosTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePxbHits", &ePxbHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePxHits", &ePxHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eClusVtxQual", &eClusVtxQual);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eClusVtxDiff", &eClusVtxDiff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nHfNegHits", &nHfNegHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nHfPosHits", &nHfPosHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nHfTowersP", &nHfTowersP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nHfTowersN", &nHfTowersN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumEsubEpPos", &sumEsubEpPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumEaddEpPos", &sumEaddEpPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumEsubEpNeg", &sumEsubEpNeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumEaddEpNeg", &sumEaddEpNeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumHfEsubEpPos", &sumHfEsubEpPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumHfEaddEpPos", &sumHfEaddEpPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumHfEsubEpNeg", &sumHfEsubEpNeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumHfEaddEpNeg", &sumHfEaddEpNeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eHPTrkFrac", &eHPTrkFrac);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyMITEvtSel(void *p) {
      return  p ? new(p) ::MyMITEvtSel : new ::MyMITEvtSel;
   }
   static void *newArray_MyMITEvtSel(Long_t nElements, void *p) {
      return p ? new(p) ::MyMITEvtSel[nElements] : new ::MyMITEvtSel[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyMITEvtSel(void *p) {
      delete ((::MyMITEvtSel*)p);
   }
   static void deleteArray_MyMITEvtSel(void *p) {
      delete [] ((::MyMITEvtSel*)p);
   }
   static void destruct_MyMITEvtSel(void *p) {
      typedef ::MyMITEvtSel current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyMITEvtSel

//______________________________________________________________________________
void MyPart::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyPart.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyPart::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyPart::Class(),this);
   }
}

//______________________________________________________________________________
void MyPart::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyPart.
      TClass *R__cl = ::MyPart::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      TLorentzVector::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyPart(void *p) {
      return  p ? new(p) ::MyPart : new ::MyPart;
   }
   static void *newArray_MyPart(Long_t nElements, void *p) {
      return p ? new(p) ::MyPart[nElements] : new ::MyPart[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyPart(void *p) {
      delete ((::MyPart*)p);
   }
   static void deleteArray_MyPart(void *p) {
      delete [] ((::MyPart*)p);
   }
   static void destruct_MyPart(void *p) {
      typedef ::MyPart current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyPart

//______________________________________________________________________________
void MySimVertex::Streamer(TBuffer &R__b)
{
   // Stream an object of class MySimVertex.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MySimVertex::Class(),this);
   } else {
      R__b.WriteClassBuffer(MySimVertex::Class(),this);
   }
}

//______________________________________________________________________________
void MySimVertex::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MySimVertex.
      TClass *R__cl = ::MySimVertex::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MySimVertex(void *p) {
      return  p ? new(p) ::MySimVertex : new ::MySimVertex;
   }
   static void *newArray_MySimVertex(Long_t nElements, void *p) {
      return p ? new(p) ::MySimVertex[nElements] : new ::MySimVertex[nElements];
   }
   // Wrapper around operator delete
   static void delete_MySimVertex(void *p) {
      delete ((::MySimVertex*)p);
   }
   static void deleteArray_MySimVertex(void *p) {
      delete [] ((::MySimVertex*)p);
   }
   static void destruct_MySimVertex(void *p) {
      typedef ::MySimVertex current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MySimVertex

//______________________________________________________________________________
void MyVertex::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyVertex.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyVertex::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyVertex::Class(),this);
   }
}

//______________________________________________________________________________
void MyVertex::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyVertex.
      TClass *R__cl = ::MyVertex::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id", &id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ex", &ex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ey", &ey);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ez", &ez);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "validity", &validity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fake", &fake);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2", &chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndof", &ndof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntracks", &ntracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SumPtTracks", &SumPtTracks);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyVertex(void *p) {
      return  p ? new(p) ::MyVertex : new ::MyVertex;
   }
   static void *newArray_MyVertex(Long_t nElements, void *p) {
      return p ? new(p) ::MyVertex[nElements] : new ::MyVertex[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyVertex(void *p) {
      delete ((::MyVertex*)p);
   }
   static void deleteArray_MyVertex(void *p) {
      delete [] ((::MyVertex*)p);
   }
   static void destruct_MyVertex(void *p) {
      typedef ::MyVertex current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyVertex

//______________________________________________________________________________
void MyTracks::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyTracks.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyTracks::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyTracks::Class(),this);
   }
}

//______________________________________________________________________________
void MyTracks::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyTracks.
      TClass *R__cl = ::MyTracks::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quality[5]", quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackAlgo", &trackAlgo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nhit", &nhit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nValidPixelHits", &nValidPixelHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nValidStripHits", &nValidStripHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nValidMuonCSCHits", &nValidMuonCSCHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nValidMuonDTHits", &nValidMuonDTHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nValidMuonRPCHits", &nValidMuonRPCHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2n", &chi2n);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dz", &dz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d0", &d0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "edz", &edz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ed0", &ed0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ept", &ept);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vx", &vx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vy", &vy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vz", &vz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vtxid", (void*)&vtxid);
      R__insp.InspectMember("vector<Int_t>", (void*)&vtxid, "vtxid.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vtxdxy", (void*)&vtxdxy);
      R__insp.InspectMember("vector<Double_t>", (void*)&vtxdxy, "vtxdxy.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vtxdz", (void*)&vtxdz);
      R__insp.InspectMember("vector<Double_t>", (void*)&vtxdz, "vtxdz.", false);
      MyPart::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyTracks(void *p) {
      return  p ? new(p) ::MyTracks : new ::MyTracks;
   }
   static void *newArray_MyTracks(Long_t nElements, void *p) {
      return p ? new(p) ::MyTracks[nElements] : new ::MyTracks[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyTracks(void *p) {
      delete ((::MyTracks*)p);
   }
   static void deleteArray_MyTracks(void *p) {
      delete [] ((::MyTracks*)p);
   }
   static void destruct_MyTracks(void *p) {
      typedef ::MyTracks current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyTracks

//______________________________________________________________________________
void MyElectron::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyElectron.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyElectron::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyElectron::Class(),this);
   }
}

//______________________________________________________________________________
void MyElectron::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyElectron.
      TClass *R__cl = ::MyElectron::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "GsfTrack", &GsfTrack);
      R__insp.InspectMember(GsfTrack, "GsfTrack.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TrackerTrack", &TrackerTrack);
      R__insp.InspectMember(TrackerTrack, "TrackerTrack.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSupClusOverP", &eSupClusOverP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSeedClusOverPout", &eSeedClusOverPout);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PIn", &PIn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "POut", &POut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dEtaSupClusTrVtx", &dEtaSupClusTrVtx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dEtaSeedClusTrCalo", &dEtaSeedClusTrCalo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dPhiSupClusTrVtx", &dPhiSupClusTrVtx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dPhiSeedClusTrCalo", &dPhiSeedClusTrCalo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbrem", &fbrem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isBarrel", &isBarrel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isEndCap", &isEndCap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isEcalDriven", &isEcalDriven);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isTrackerDriven", &isTrackerDriven);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isEScaleCorr", &isEScaleCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isMomentumCorr", &isMomentumCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nClus", &nClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "classification", &classification);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "expectedInnerHits", &expectedInnerHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EcalRecHitIsoDr04", &EcalRecHitIsoDr04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HcalDepth1TowerSumEtDr04", &HcalDepth1TowerSumEtDr04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HcalDepth2TowerSumEtDr04", &HcalDepth2TowerSumEtDr04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TrackIsolationDr04", &TrackIsolationDr04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EcalRecHitIsoDr03", &EcalRecHitIsoDr03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HcalTowerSumEtDr03", &HcalTowerSumEtDr03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HcalDepth1TowerSumEtDr03", &HcalDepth1TowerSumEtDr03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HcalDepth2TowerSumEtDr03", &HcalDepth2TowerSumEtDr03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TrackIsolationDr03", &TrackIsolationDr03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eidRobustLoose", &eidRobustLoose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eidRobustTight", &eidRobustTight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eidLoose", &eidLoose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eidTight", &eidTight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E15", &E15);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E25Max", &E25Max);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E55", &E55);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CovEtaEta", &CovEtaEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CoviEtaiEta", &CoviEtaiEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HadronicOverEm", &HadronicOverEm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HcalDepth1OverEcal", &HcalDepth1OverEcal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HcalDepth2OverEcal", &HcalDepth2OverEcal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dist_conv", &dist_conv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dcot_conv", &dcot_conv);
      MyPart::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyElectron(void *p) {
      return  p ? new(p) ::MyElectron : new ::MyElectron;
   }
   static void *newArray_MyElectron(Long_t nElements, void *p) {
      return p ? new(p) ::MyElectron[nElements] : new ::MyElectron[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyElectron(void *p) {
      delete ((::MyElectron*)p);
   }
   static void deleteArray_MyElectron(void *p) {
      delete [] ((::MyElectron*)p);
   }
   static void destruct_MyElectron(void *p) {
      typedef ::MyElectron current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyElectron

//______________________________________________________________________________
void MyMuon::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyMuon.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyMuon::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyMuon::Class(),this);
   }
}

//______________________________________________________________________________
void MyMuon::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyMuon.
      TClass *R__cl = ::MyMuon::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globalTrack", &globalTrack);
      R__insp.InspectMember(globalTrack, "globalTrack.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "innerTrack", &innerTrack);
      R__insp.InspectMember(innerTrack, "innerTrack.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "outerTrack", &outerTrack);
      R__insp.InspectMember(outerTrack, "outerTrack.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nChambers", &nChambers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nChambersMatched", &nChambersMatched);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isoR03sumPt", &isoR03sumPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isoR03emEt", &isoR03emEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isoR03hadEt", &isoR03hadEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isoR03hoEt", &isoR03hoEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isoR03nTracks", &isoR03nTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isoR03nJets", &isoR03nJets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isoR05sumPt", &isoR05sumPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isoR05emEt", &isoR05emEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isoR05hadEt", &isoR05hadEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isoR05hoEt", &isoR05hoEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isoR05nTracks", &isoR05nTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isoR05nJets", &isoR05nJets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calEnergyEm", &calEnergyEm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calEnergyHad", &calEnergyHad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calEnergyHo", &calEnergyHo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calEnergyEmS9", &calEnergyEmS9);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calEnergyHadS9", &calEnergyHadS9);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calEnergyHoS9", &calEnergyHoS9);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IsGlobalMuon", &IsGlobalMuon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IsTrackerMuon", &IsTrackerMuon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IsStandaloneMuon", &IsStandaloneMuon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IsCaloMuon", &IsCaloMuon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "AllGlobalMuons", &AllGlobalMuons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "AllStandAloneMuons", &AllStandAloneMuons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "AllTrackerMuons", &AllTrackerMuons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TrackerMuonArbitrated", &TrackerMuonArbitrated);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "AllArbitrated", &AllArbitrated);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "GlobalMuonPromptTight", &GlobalMuonPromptTight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TMLastStationLoose", &TMLastStationLoose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TMLastStationTight", &TMLastStationTight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TM2DCompatibilityLoose", &TM2DCompatibilityLoose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TM2DCompatibilityTight", &TM2DCompatibilityTight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TMOneStationLoose", &TMOneStationLoose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TMOneStationTight", &TMOneStationTight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TMLastStationOptimizedLowPtLoose", &TMLastStationOptimizedLowPtLoose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TMLastStationOptimizedLowPtTight", &TMLastStationOptimizedLowPtTight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "GMTkChiCompatibility", &GMTkChiCompatibility);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "GMStaChiCompatibility", &GMStaChiCompatibility);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "GMTkKinkTight", &GMTkKinkTight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TMLastStationAngLoose", &TMLastStationAngLoose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TMLastStationAngTight", &TMLastStationAngTight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TMOneStationAngLoose", &TMOneStationAngLoose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TMOneStationAngTight", &TMOneStationAngTight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TMLastStationOptimizedBarrelLowPtLoose", &TMLastStationOptimizedBarrelLowPtLoose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TMLastStationOptimizedBarrelLowPtTight", &TMLastStationOptimizedBarrelLowPtTight);
      MyPart::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyMuon(void *p) {
      return  p ? new(p) ::MyMuon : new ::MyMuon;
   }
   static void *newArray_MyMuon(Long_t nElements, void *p) {
      return p ? new(p) ::MyMuon[nElements] : new ::MyMuon[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyMuon(void *p) {
      delete ((::MyMuon*)p);
   }
   static void deleteArray_MyMuon(void *p) {
      delete [] ((::MyMuon*)p);
   }
   static void destruct_MyMuon(void *p) {
      typedef ::MyMuon current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyMuon

//______________________________________________________________________________
void MyBaseJet::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyBaseJet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyBaseJet::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyBaseJet::Class(),this);
   }
}

//______________________________________________________________________________
void MyBaseJet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyBaseJet.
      TClass *R__cl = ::MyBaseJet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jec", &jec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jec_unc", &jec_unc);
      MyPart::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyBaseJet(void *p) {
      return  p ? new(p) ::MyBaseJet : new ::MyBaseJet;
   }
   static void *newArray_MyBaseJet(Long_t nElements, void *p) {
      return p ? new(p) ::MyBaseJet[nElements] : new ::MyBaseJet[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyBaseJet(void *p) {
      delete ((::MyBaseJet*)p);
   }
   static void deleteArray_MyBaseJet(void *p) {
      delete [] ((::MyBaseJet*)p);
   }
   static void destruct_MyBaseJet(void *p) {
      typedef ::MyBaseJet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyBaseJet

//______________________________________________________________________________
void MyJet::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyJet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyJet::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyJet::Class(),this);
   }
}

//______________________________________________________________________________
void MyJet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyJet.
      TClass *R__cl = ::MyJet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mapjet", (void*)&mapjet);
      R__insp.InspectMember("map<string,MyBaseJet>", (void*)&mapjet, "mapjet.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nconstituent", &nconstituent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LooseJetId", &LooseJetId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TightJetId", &TightJetId);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyJet(void *p) {
      return  p ? new(p) ::MyJet : new ::MyJet;
   }
   static void *newArray_MyJet(Long_t nElements, void *p) {
      return p ? new(p) ::MyJet[nElements] : new ::MyJet[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyJet(void *p) {
      delete ((::MyJet*)p);
   }
   static void deleteArray_MyJet(void *p) {
      delete [] ((::MyJet*)p);
   }
   static void destruct_MyJet(void *p) {
      typedef ::MyJet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyJet

//______________________________________________________________________________
void MyCaloJet::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyCaloJet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyCaloJet::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyCaloJet::Class(),this);
   }
}

//______________________________________________________________________________
void MyCaloJet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyCaloJet.
      TClass *R__cl = ::MyCaloJet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fem", &fem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eem_EB", &eem_EB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eem_EE", &eem_EE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eem_HF", &eem_HF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fhad", &fhad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ehad_HB", &ehad_HB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ehad_HE", &ehad_HE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ehad_HF", &ehad_HF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ehad_HO", &ehad_HO);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n60", &n60);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n90", &n90);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "emax_ecal", &emax_ecal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "emax_hcal", &emax_hcal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n90hits", &n90hits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HPD", &HPD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RBX", &RBX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma_eta", &sigma_eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma_phi", &sigma_phi);
      MyJet::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyCaloJet(void *p) {
      return  p ? new(p) ::MyCaloJet : new ::MyCaloJet;
   }
   static void *newArray_MyCaloJet(Long_t nElements, void *p) {
      return p ? new(p) ::MyCaloJet[nElements] : new ::MyCaloJet[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyCaloJet(void *p) {
      delete ((::MyCaloJet*)p);
   }
   static void deleteArray_MyCaloJet(void *p) {
      delete [] ((::MyCaloJet*)p);
   }
   static void destruct_MyCaloJet(void *p) {
      typedef ::MyCaloJet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyCaloJet

//______________________________________________________________________________
void MyTrackJet::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyTrackJet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyTrackJet::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyTrackJet::Class(),this);
   }
}

//______________________________________________________________________________
void MyTrackJet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyTrackJet.
      TClass *R__cl = ::MyTrackJet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vtxId", &vtxId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mapjet", (void*)&mapjet);
      R__insp.InspectMember("map<string,MyBaseJet>", (void*)&mapjet, "mapjet.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e_raw", &e_raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt_raw", &pt_raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta_raw", &eta_raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_raw", &phi_raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "px_raw", &px_raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "py_raw", &py_raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pz_raw", &pz_raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e_cal", &e_cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt_cal", &pt_cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta_cal", &eta_cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_cal", &phi_cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "px_cal", &px_cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "py_cal", &py_cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pz_cal", &pz_cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntrack", &ntrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vtracks", (void*)&vtracks);
      R__insp.InspectMember("vector<MyTracks>", (void*)&vtracks, "vtracks.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackjet_pv", &trackjet_pv);
      MyBaseJet::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyTrackJet(void *p) {
      return  p ? new(p) ::MyTrackJet : new ::MyTrackJet;
   }
   static void *newArray_MyTrackJet(Long_t nElements, void *p) {
      return p ? new(p) ::MyTrackJet[nElements] : new ::MyTrackJet[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyTrackJet(void *p) {
      delete ((::MyTrackJet*)p);
   }
   static void deleteArray_MyTrackJet(void *p) {
      delete [] ((::MyTrackJet*)p);
   }
   static void destruct_MyTrackJet(void *p) {
      typedef ::MyTrackJet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyTrackJet

//______________________________________________________________________________
void MyPFJet::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyPFJet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyPFJet::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyPFJet::Class(),this);
   }
}

//______________________________________________________________________________
void MyPFJet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyPFJet.
      TClass *R__cl = ::MyPFJet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fhad_ch", &fhad_ch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fhad_ne", &fhad_ne);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fem_ch", &fem_ch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fem_ne", &fem_ne);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "multi_ch", &multi_ch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "multi_ne", &multi_ne);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "multi_ch_had", &multi_ch_had);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "multi_ne_had", &multi_ne_had);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "multi_gamma", &multi_gamma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "multi_ele", &multi_ele);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "multi_mu", &multi_mu);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntrack", &ntrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vtracks", (void*)&vtracks);
      R__insp.InspectMember("vector<MyTracks>", (void*)&vtracks, "vtracks.", false);
      MyJet::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyPFJet(void *p) {
      return  p ? new(p) ::MyPFJet : new ::MyPFJet;
   }
   static void *newArray_MyPFJet(Long_t nElements, void *p) {
      return p ? new(p) ::MyPFJet[nElements] : new ::MyPFJet[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyPFJet(void *p) {
      delete ((::MyPFJet*)p);
   }
   static void deleteArray_MyPFJet(void *p) {
      delete [] ((::MyPFJet*)p);
   }
   static void destruct_MyPFJet(void *p) {
      typedef ::MyPFJet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyPFJet

//______________________________________________________________________________
void MyPFCand::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyPFCand.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyPFCand::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyPFCand::Class(),this);
   }
}

//______________________________________________________________________________
void MyPFCand::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyPFCand.
      TClass *R__cl = ::MyPFCand::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "particleId", &particleId);
      MyPart::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyPFCand(void *p) {
      return  p ? new(p) ::MyPFCand : new ::MyPFCand;
   }
   static void *newArray_MyPFCand(Long_t nElements, void *p) {
      return p ? new(p) ::MyPFCand[nElements] : new ::MyPFCand[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyPFCand(void *p) {
      delete ((::MyPFCand*)p);
   }
   static void deleteArray_MyPFCand(void *p) {
      delete [] ((::MyPFCand*)p);
   }
   static void destruct_MyPFCand(void *p) {
      typedef ::MyPFCand current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyPFCand

//______________________________________________________________________________
void MyCaloTower::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyCaloTower.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyCaloTower::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyCaloTower::Class(),this);
   }
}

//______________________________________________________________________________
void MyCaloTower::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyCaloTower.
      TClass *R__cl = ::MyCaloTower::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "emEnergy", &emEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hadEnergy", &hadEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasEB", &hasEB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasEE", &hasEE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasHB", &hasHB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasHE", &hasHE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasHF", &hasHF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zside", &zside);
      MyPart::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyCaloTower(void *p) {
      return  p ? new(p) ::MyCaloTower : new ::MyCaloTower;
   }
   static void *newArray_MyCaloTower(Long_t nElements, void *p) {
      return p ? new(p) ::MyCaloTower[nElements] : new ::MyCaloTower[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyCaloTower(void *p) {
      delete ((::MyCaloTower*)p);
   }
   static void deleteArray_MyCaloTower(void *p) {
      delete [] ((::MyCaloTower*)p);
   }
   static void destruct_MyCaloTower(void *p) {
      typedef ::MyCaloTower current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyCaloTower

//______________________________________________________________________________
void MyZDCHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyZDCHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyZDCHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyZDCHit::Class(),this);
   }
}

//______________________________________________________________________________
void MyZDCHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyZDCHit.
      TClass *R__cl = ::MyZDCHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "side", &side);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "section", &section);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "channel", &channel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "channelId", &channelId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy", &energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &time);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyZDCHit(void *p) {
      return  p ? new(p) ::MyZDCHit : new ::MyZDCHit;
   }
   static void *newArray_MyZDCHit(Long_t nElements, void *p) {
      return p ? new(p) ::MyZDCHit[nElements] : new ::MyZDCHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyZDCHit(void *p) {
      delete ((::MyZDCHit*)p);
   }
   static void deleteArray_MyZDCHit(void *p) {
      delete [] ((::MyZDCHit*)p);
   }
   static void destruct_MyZDCHit(void *p) {
      typedef ::MyZDCHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyZDCHit

//______________________________________________________________________________
void MyZDCDigi::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyZDCDigi.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyZDCDigi::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyZDCDigi::Class(),this);
   }
}

//______________________________________________________________________________
void MyZDCDigi::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyZDCDigi.
      TClass *R__cl = ::MyZDCDigi::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "side", &side);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "section", &section);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "channel", &channel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "channelId", &channelId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "digiADC", (void*)&digiADC);
      R__insp.InspectMember("vector<int>", (void*)&digiADC, "digiADC.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "digifC", (void*)&digifC);
      R__insp.InspectMember("vector<float>", (void*)&digifC, "digifC.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyZDCDigi(void *p) {
      return  p ? new(p) ::MyZDCDigi : new ::MyZDCDigi;
   }
   static void *newArray_MyZDCDigi(Long_t nElements, void *p) {
      return p ? new(p) ::MyZDCDigi[nElements] : new ::MyZDCDigi[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyZDCDigi(void *p) {
      delete ((::MyZDCDigi*)p);
   }
   static void deleteArray_MyZDCDigi(void *p) {
      delete [] ((::MyZDCDigi*)p);
   }
   static void destruct_MyZDCDigi(void *p) {
      typedef ::MyZDCDigi current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyZDCDigi

//______________________________________________________________________________
void MyZDCInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyZDCInfo.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyZDCInfo::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyZDCInfo::Class(),this);
   }
}

//______________________________________________________________________________
void MyZDCInfo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyZDCInfo.
      TClass *R__cl = ::MyZDCInfo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nHitsPerChannel", (void*)&nHitsPerChannel);
      R__insp.InspectMember("map<int,int>", (void*)&nHitsPerChannel, "nHitsPerChannel.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumEnergyPerChannel", (void*)&sumEnergyPerChannel);
      R__insp.InspectMember("map<int,double>", (void*)&sumEnergyPerChannel, "sumEnergyPerChannel.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyZDCInfo(void *p) {
      return  p ? new(p) ::MyZDCInfo : new ::MyZDCInfo;
   }
   static void *newArray_MyZDCInfo(Long_t nElements, void *p) {
      return p ? new(p) ::MyZDCInfo[nElements] : new ::MyZDCInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyZDCInfo(void *p) {
      delete ((::MyZDCInfo*)p);
   }
   static void deleteArray_MyZDCInfo(void *p) {
      delete [] ((::MyZDCInfo*)p);
   }
   static void destruct_MyZDCInfo(void *p) {
      typedef ::MyZDCInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyZDCInfo

//______________________________________________________________________________
void MyFSCHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyFSCHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyFSCHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyFSCHit::Class(),this);
   }
}

//______________________________________________________________________________
void MyFSCHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyFSCHit.
      TClass *R__cl = ::MyFSCHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "side", &side);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "section", &section);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "channel", &channel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "channelId", &channelId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy", &energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &time);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyFSCHit(void *p) {
      return  p ? new(p) ::MyFSCHit : new ::MyFSCHit;
   }
   static void *newArray_MyFSCHit(Long_t nElements, void *p) {
      return p ? new(p) ::MyFSCHit[nElements] : new ::MyFSCHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyFSCHit(void *p) {
      delete ((::MyFSCHit*)p);
   }
   static void deleteArray_MyFSCHit(void *p) {
      delete [] ((::MyFSCHit*)p);
   }
   static void destruct_MyFSCHit(void *p) {
      typedef ::MyFSCHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyFSCHit

//______________________________________________________________________________
void MyFSCDigi::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyFSCDigi.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyFSCDigi::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyFSCDigi::Class(),this);
   }
}

//______________________________________________________________________________
void MyFSCDigi::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyFSCDigi.
      TClass *R__cl = ::MyFSCDigi::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "side", &side);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "section", &section);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "channel", &channel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "channelId", &channelId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "digiADC", (void*)&digiADC);
      R__insp.InspectMember("vector<int>", (void*)&digiADC, "digiADC.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "digifC", (void*)&digifC);
      R__insp.InspectMember("vector<float>", (void*)&digifC, "digifC.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyFSCDigi(void *p) {
      return  p ? new(p) ::MyFSCDigi : new ::MyFSCDigi;
   }
   static void *newArray_MyFSCDigi(Long_t nElements, void *p) {
      return p ? new(p) ::MyFSCDigi[nElements] : new ::MyFSCDigi[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyFSCDigi(void *p) {
      delete ((::MyFSCDigi*)p);
   }
   static void deleteArray_MyFSCDigi(void *p) {
      delete [] ((::MyFSCDigi*)p);
   }
   static void destruct_MyFSCDigi(void *p) {
      typedef ::MyFSCDigi current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyFSCDigi

//______________________________________________________________________________
void MyFSCInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyFSCInfo.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyFSCInfo::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyFSCInfo::Class(),this);
   }
}

//______________________________________________________________________________
void MyFSCInfo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MyFSCInfo.
      TClass *R__cl = ::MyFSCInfo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nHitsPerChannel", (void*)&nHitsPerChannel);
      R__insp.InspectMember("map<int,int>", (void*)&nHitsPerChannel, "nHitsPerChannel.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumEnergyPerChannel", (void*)&sumEnergyPerChannel);
      R__insp.InspectMember("map<int,double>", (void*)&sumEnergyPerChannel, "sumEnergyPerChannel.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyFSCInfo(void *p) {
      return  p ? new(p) ::MyFSCInfo : new ::MyFSCInfo;
   }
   static void *newArray_MyFSCInfo(Long_t nElements, void *p) {
      return p ? new(p) ::MyFSCInfo[nElements] : new ::MyFSCInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyFSCInfo(void *p) {
      delete ((::MyFSCInfo*)p);
   }
   static void deleteArray_MyFSCInfo(void *p) {
      delete [] ((::MyFSCInfo*)p);
   }
   static void destruct_MyFSCInfo(void *p) {
      typedef ::MyFSCInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyFSCInfo

namespace ROOT {
   void maplEintcOdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEintcOdoublegR_Dictionary();
   static void *new_maplEintcOdoublegR(void *p = 0);
   static void *newArray_maplEintcOdoublegR(Long_t size, void *p);
   static void delete_maplEintcOdoublegR(void *p);
   static void deleteArray_maplEintcOdoublegR(void *p);
   static void destruct_maplEintcOdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<int,double>*)
   {
      map<int,double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<int,double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<int,double>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<int,double>), DefineBehavior(ptr, ptr),
                  0, &maplEintcOdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(map<int,double>) );
      instance.SetNew(&new_maplEintcOdoublegR);
      instance.SetNewArray(&newArray_maplEintcOdoublegR);
      instance.SetDelete(&delete_maplEintcOdoublegR);
      instance.SetDeleteArray(&deleteArray_maplEintcOdoublegR);
      instance.SetDestructor(&destruct_maplEintcOdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<int,double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<int,double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEintcOdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<int,double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEintcOdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,double> : new map<int,double>;
   }
   static void *newArray_maplEintcOdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,double>[nElements] : new map<int,double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEintcOdoublegR(void *p) {
      delete ((map<int,double>*)p);
   }
   static void deleteArray_maplEintcOdoublegR(void *p) {
      delete [] ((map<int,double>*)p);
   }
   static void destruct_maplEintcOdoublegR(void *p) {
      typedef map<int,double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<int,double>

namespace ROOT {
   void maplEintcOintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEintcOintgR_Dictionary();
   static void *new_maplEintcOintgR(void *p = 0);
   static void *newArray_maplEintcOintgR(Long_t size, void *p);
   static void delete_maplEintcOintgR(void *p);
   static void deleteArray_maplEintcOintgR(void *p);
   static void destruct_maplEintcOintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<int,int>*)
   {
      map<int,int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<int,int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<int,int>", -2, "map2.dll", 0,
                  typeid(map<int,int>), DefineBehavior(ptr, ptr),
                  0, &maplEintcOintgR_Dictionary, isa_proxy, 0,
                  sizeof(map<int,int>) );
      instance.SetNew(&new_maplEintcOintgR);
      instance.SetNewArray(&newArray_maplEintcOintgR);
      instance.SetDelete(&delete_maplEintcOintgR);
      instance.SetDeleteArray(&deleteArray_maplEintcOintgR);
      instance.SetDestructor(&destruct_maplEintcOintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<int,int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<int,int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEintcOintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<int,int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEintcOintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,int> : new map<int,int>;
   }
   static void *newArray_maplEintcOintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,int>[nElements] : new map<int,int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEintcOintgR(void *p) {
      delete ((map<int,int>*)p);
   }
   static void deleteArray_maplEintcOintgR(void *p) {
      delete [] ((map<int,int>*)p);
   }
   static void destruct_maplEintcOintgR(void *p) {
      typedef map<int,int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<int,int>

namespace ROOT {
   void maplEstringcOMyBaseJetgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOMyBaseJetgR_Dictionary();
   static void *new_maplEstringcOMyBaseJetgR(void *p = 0);
   static void *newArray_maplEstringcOMyBaseJetgR(Long_t size, void *p);
   static void delete_maplEstringcOMyBaseJetgR(void *p);
   static void deleteArray_maplEstringcOMyBaseJetgR(void *p);
   static void destruct_maplEstringcOMyBaseJetgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,MyBaseJet>*)
   {
      map<string,MyBaseJet> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,MyBaseJet>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,MyBaseJet>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<string,MyBaseJet>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOMyBaseJetgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,MyBaseJet>) );
      instance.SetNew(&new_maplEstringcOMyBaseJetgR);
      instance.SetNewArray(&newArray_maplEstringcOMyBaseJetgR);
      instance.SetDelete(&delete_maplEstringcOMyBaseJetgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOMyBaseJetgR);
      instance.SetDestructor(&destruct_maplEstringcOMyBaseJetgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,MyBaseJet> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,MyBaseJet>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOMyBaseJetgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,MyBaseJet>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOMyBaseJetgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,MyBaseJet> : new map<string,MyBaseJet>;
   }
   static void *newArray_maplEstringcOMyBaseJetgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,MyBaseJet>[nElements] : new map<string,MyBaseJet>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOMyBaseJetgR(void *p) {
      delete ((map<string,MyBaseJet>*)p);
   }
   static void deleteArray_maplEstringcOMyBaseJetgR(void *p) {
      delete [] ((map<string,MyBaseJet>*)p);
   }
   static void destruct_maplEstringcOMyBaseJetgR(void *p) {
      typedef map<string,MyBaseJet> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,MyBaseJet>

namespace ROOT {
   void maplEstringcOboolgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOboolgR_Dictionary();
   static void *new_maplEstringcOboolgR(void *p = 0);
   static void *newArray_maplEstringcOboolgR(Long_t size, void *p);
   static void delete_maplEstringcOboolgR(void *p);
   static void deleteArray_maplEstringcOboolgR(void *p);
   static void destruct_maplEstringcOboolgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,bool>*)
   {
      map<string,bool> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,bool>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,bool>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<string,bool>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOboolgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,bool>) );
      instance.SetNew(&new_maplEstringcOboolgR);
      instance.SetNewArray(&newArray_maplEstringcOboolgR);
      instance.SetDelete(&delete_maplEstringcOboolgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOboolgR);
      instance.SetDestructor(&destruct_maplEstringcOboolgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,bool> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,bool>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOboolgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,bool>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOboolgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,bool> : new map<string,bool>;
   }
   static void *newArray_maplEstringcOboolgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,bool>[nElements] : new map<string,bool>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOboolgR(void *p) {
      delete ((map<string,bool>*)p);
   }
   static void deleteArray_maplEstringcOboolgR(void *p) {
      delete [] ((map<string,bool>*)p);
   }
   static void destruct_maplEstringcOboolgR(void *p) {
      typedef map<string,bool> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,bool>

namespace ROOT {
   void maplEstringcOdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOdoublegR_Dictionary();
   static void *new_maplEstringcOdoublegR(void *p = 0);
   static void *newArray_maplEstringcOdoublegR(Long_t size, void *p);
   static void delete_maplEstringcOdoublegR(void *p);
   static void deleteArray_maplEstringcOdoublegR(void *p);
   static void destruct_maplEstringcOdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,double>*)
   {
      map<string,double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,double>", -2, "map.dll", 0,
                  typeid(map<string,double>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,double>) );
      instance.SetNew(&new_maplEstringcOdoublegR);
      instance.SetNewArray(&newArray_maplEstringcOdoublegR);
      instance.SetDelete(&delete_maplEstringcOdoublegR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOdoublegR);
      instance.SetDestructor(&destruct_maplEstringcOdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,double> : new map<string,double>;
   }
   static void *newArray_maplEstringcOdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,double>[nElements] : new map<string,double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOdoublegR(void *p) {
      delete ((map<string,double>*)p);
   }
   static void deleteArray_maplEstringcOdoublegR(void *p) {
      delete [] ((map<string,double>*)p);
   }
   static void destruct_maplEstringcOdoublegR(void *p) {
      typedef map<string,double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,double>

namespace ROOT {
   void maplEstringcOunsignedsPintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOunsignedsPintgR_Dictionary();
   static void *new_maplEstringcOunsignedsPintgR(void *p = 0);
   static void *newArray_maplEstringcOunsignedsPintgR(Long_t size, void *p);
   static void delete_maplEstringcOunsignedsPintgR(void *p);
   static void deleteArray_maplEstringcOunsignedsPintgR(void *p);
   static void destruct_maplEstringcOunsignedsPintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,unsigned int>*)
   {
      map<string,unsigned int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,unsigned int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,unsigned int>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<string,unsigned int>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOunsignedsPintgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,unsigned int>) );
      instance.SetNew(&new_maplEstringcOunsignedsPintgR);
      instance.SetNewArray(&newArray_maplEstringcOunsignedsPintgR);
      instance.SetDelete(&delete_maplEstringcOunsignedsPintgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOunsignedsPintgR);
      instance.SetDestructor(&destruct_maplEstringcOunsignedsPintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,unsigned int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,unsigned int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOunsignedsPintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,unsigned int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOunsignedsPintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,unsigned int> : new map<string,unsigned int>;
   }
   static void *newArray_maplEstringcOunsignedsPintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,unsigned int>[nElements] : new map<string,unsigned int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOunsignedsPintgR(void *p) {
      delete ((map<string,unsigned int>*)p);
   }
   static void deleteArray_maplEstringcOunsignedsPintgR(void *p) {
      delete [] ((map<string,unsigned int>*)p);
   }
   static void destruct_maplEstringcOunsignedsPintgR(void *p) {
      typedef map<string,unsigned int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,unsigned int>

namespace ROOT {
   void vectorlEMyBaseJetgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyBaseJetgR_Dictionary();
   static void *new_vectorlEMyBaseJetgR(void *p = 0);
   static void *newArray_vectorlEMyBaseJetgR(Long_t size, void *p);
   static void delete_vectorlEMyBaseJetgR(void *p);
   static void deleteArray_vectorlEMyBaseJetgR(void *p);
   static void destruct_vectorlEMyBaseJetgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyBaseJet>*)
   {
      vector<MyBaseJet> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyBaseJet>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyBaseJet>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyBaseJet>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyBaseJetgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyBaseJet>) );
      instance.SetNew(&new_vectorlEMyBaseJetgR);
      instance.SetNewArray(&newArray_vectorlEMyBaseJetgR);
      instance.SetDelete(&delete_vectorlEMyBaseJetgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyBaseJetgR);
      instance.SetDestructor(&destruct_vectorlEMyBaseJetgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyBaseJet> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyBaseJet>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyBaseJetgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyBaseJet>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyBaseJetgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyBaseJet> : new vector<MyBaseJet>;
   }
   static void *newArray_vectorlEMyBaseJetgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyBaseJet>[nElements] : new vector<MyBaseJet>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyBaseJetgR(void *p) {
      delete ((vector<MyBaseJet>*)p);
   }
   static void deleteArray_vectorlEMyBaseJetgR(void *p) {
      delete [] ((vector<MyBaseJet>*)p);
   }
   static void destruct_vectorlEMyBaseJetgR(void *p) {
      typedef vector<MyBaseJet> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyBaseJet>

namespace ROOT {
   void vectorlEMyBeamSpotgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyBeamSpotgR_Dictionary();
   static void *new_vectorlEMyBeamSpotgR(void *p = 0);
   static void *newArray_vectorlEMyBeamSpotgR(Long_t size, void *p);
   static void delete_vectorlEMyBeamSpotgR(void *p);
   static void deleteArray_vectorlEMyBeamSpotgR(void *p);
   static void destruct_vectorlEMyBeamSpotgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyBeamSpot>*)
   {
      vector<MyBeamSpot> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyBeamSpot>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyBeamSpot>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyBeamSpot>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyBeamSpotgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyBeamSpot>) );
      instance.SetNew(&new_vectorlEMyBeamSpotgR);
      instance.SetNewArray(&newArray_vectorlEMyBeamSpotgR);
      instance.SetDelete(&delete_vectorlEMyBeamSpotgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyBeamSpotgR);
      instance.SetDestructor(&destruct_vectorlEMyBeamSpotgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyBeamSpot> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyBeamSpot>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyBeamSpotgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyBeamSpot>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyBeamSpotgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyBeamSpot> : new vector<MyBeamSpot>;
   }
   static void *newArray_vectorlEMyBeamSpotgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyBeamSpot>[nElements] : new vector<MyBeamSpot>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyBeamSpotgR(void *p) {
      delete ((vector<MyBeamSpot>*)p);
   }
   static void deleteArray_vectorlEMyBeamSpotgR(void *p) {
      delete [] ((vector<MyBeamSpot>*)p);
   }
   static void destruct_vectorlEMyBeamSpotgR(void *p) {
      typedef vector<MyBeamSpot> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyBeamSpot>

namespace ROOT {
   void vectorlEMyCaloJetgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyCaloJetgR_Dictionary();
   static void *new_vectorlEMyCaloJetgR(void *p = 0);
   static void *newArray_vectorlEMyCaloJetgR(Long_t size, void *p);
   static void delete_vectorlEMyCaloJetgR(void *p);
   static void deleteArray_vectorlEMyCaloJetgR(void *p);
   static void destruct_vectorlEMyCaloJetgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyCaloJet>*)
   {
      vector<MyCaloJet> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyCaloJet>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyCaloJet>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyCaloJet>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyCaloJetgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyCaloJet>) );
      instance.SetNew(&new_vectorlEMyCaloJetgR);
      instance.SetNewArray(&newArray_vectorlEMyCaloJetgR);
      instance.SetDelete(&delete_vectorlEMyCaloJetgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyCaloJetgR);
      instance.SetDestructor(&destruct_vectorlEMyCaloJetgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyCaloJet> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyCaloJet>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyCaloJetgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyCaloJet>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyCaloJetgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyCaloJet> : new vector<MyCaloJet>;
   }
   static void *newArray_vectorlEMyCaloJetgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyCaloJet>[nElements] : new vector<MyCaloJet>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyCaloJetgR(void *p) {
      delete ((vector<MyCaloJet>*)p);
   }
   static void deleteArray_vectorlEMyCaloJetgR(void *p) {
      delete [] ((vector<MyCaloJet>*)p);
   }
   static void destruct_vectorlEMyCaloJetgR(void *p) {
      typedef vector<MyCaloJet> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyCaloJet>

namespace ROOT {
   void vectorlEMyCaloTowergR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyCaloTowergR_Dictionary();
   static void *new_vectorlEMyCaloTowergR(void *p = 0);
   static void *newArray_vectorlEMyCaloTowergR(Long_t size, void *p);
   static void delete_vectorlEMyCaloTowergR(void *p);
   static void deleteArray_vectorlEMyCaloTowergR(void *p);
   static void destruct_vectorlEMyCaloTowergR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyCaloTower>*)
   {
      vector<MyCaloTower> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyCaloTower>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyCaloTower>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyCaloTower>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyCaloTowergR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyCaloTower>) );
      instance.SetNew(&new_vectorlEMyCaloTowergR);
      instance.SetNewArray(&newArray_vectorlEMyCaloTowergR);
      instance.SetDelete(&delete_vectorlEMyCaloTowergR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyCaloTowergR);
      instance.SetDestructor(&destruct_vectorlEMyCaloTowergR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyCaloTower> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyCaloTower>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyCaloTowergR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyCaloTower>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyCaloTowergR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyCaloTower> : new vector<MyCaloTower>;
   }
   static void *newArray_vectorlEMyCaloTowergR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyCaloTower>[nElements] : new vector<MyCaloTower>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyCaloTowergR(void *p) {
      delete ((vector<MyCaloTower>*)p);
   }
   static void deleteArray_vectorlEMyCaloTowergR(void *p) {
      delete [] ((vector<MyCaloTower>*)p);
   }
   static void destruct_vectorlEMyCaloTowergR(void *p) {
      typedef vector<MyCaloTower> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyCaloTower>

namespace ROOT {
   void vectorlEMyCastorDigigR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyCastorDigigR_Dictionary();
   static void *new_vectorlEMyCastorDigigR(void *p = 0);
   static void *newArray_vectorlEMyCastorDigigR(Long_t size, void *p);
   static void delete_vectorlEMyCastorDigigR(void *p);
   static void deleteArray_vectorlEMyCastorDigigR(void *p);
   static void destruct_vectorlEMyCastorDigigR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyCastorDigi>*)
   {
      vector<MyCastorDigi> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyCastorDigi>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyCastorDigi>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyCastorDigi>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyCastorDigigR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyCastorDigi>) );
      instance.SetNew(&new_vectorlEMyCastorDigigR);
      instance.SetNewArray(&newArray_vectorlEMyCastorDigigR);
      instance.SetDelete(&delete_vectorlEMyCastorDigigR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyCastorDigigR);
      instance.SetDestructor(&destruct_vectorlEMyCastorDigigR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyCastorDigi> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyCastorDigi>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyCastorDigigR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyCastorDigi>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyCastorDigigR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyCastorDigi> : new vector<MyCastorDigi>;
   }
   static void *newArray_vectorlEMyCastorDigigR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyCastorDigi>[nElements] : new vector<MyCastorDigi>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyCastorDigigR(void *p) {
      delete ((vector<MyCastorDigi>*)p);
   }
   static void deleteArray_vectorlEMyCastorDigigR(void *p) {
      delete [] ((vector<MyCastorDigi>*)p);
   }
   static void destruct_vectorlEMyCastorDigigR(void *p) {
      typedef vector<MyCastorDigi> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyCastorDigi>

namespace ROOT {
   void vectorlEMyCastorJetgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyCastorJetgR_Dictionary();
   static void *new_vectorlEMyCastorJetgR(void *p = 0);
   static void *newArray_vectorlEMyCastorJetgR(Long_t size, void *p);
   static void delete_vectorlEMyCastorJetgR(void *p);
   static void deleteArray_vectorlEMyCastorJetgR(void *p);
   static void destruct_vectorlEMyCastorJetgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyCastorJet>*)
   {
      vector<MyCastorJet> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyCastorJet>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyCastorJet>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyCastorJet>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyCastorJetgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyCastorJet>) );
      instance.SetNew(&new_vectorlEMyCastorJetgR);
      instance.SetNewArray(&newArray_vectorlEMyCastorJetgR);
      instance.SetDelete(&delete_vectorlEMyCastorJetgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyCastorJetgR);
      instance.SetDestructor(&destruct_vectorlEMyCastorJetgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyCastorJet> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyCastorJet>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyCastorJetgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyCastorJet>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyCastorJetgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyCastorJet> : new vector<MyCastorJet>;
   }
   static void *newArray_vectorlEMyCastorJetgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyCastorJet>[nElements] : new vector<MyCastorJet>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyCastorJetgR(void *p) {
      delete ((vector<MyCastorJet>*)p);
   }
   static void deleteArray_vectorlEMyCastorJetgR(void *p) {
      delete [] ((vector<MyCastorJet>*)p);
   }
   static void destruct_vectorlEMyCastorJetgR(void *p) {
      typedef vector<MyCastorJet> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyCastorJet>

namespace ROOT {
   void vectorlEMyCastorRecHitgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyCastorRecHitgR_Dictionary();
   static void *new_vectorlEMyCastorRecHitgR(void *p = 0);
   static void *newArray_vectorlEMyCastorRecHitgR(Long_t size, void *p);
   static void delete_vectorlEMyCastorRecHitgR(void *p);
   static void deleteArray_vectorlEMyCastorRecHitgR(void *p);
   static void destruct_vectorlEMyCastorRecHitgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyCastorRecHit>*)
   {
      vector<MyCastorRecHit> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyCastorRecHit>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyCastorRecHit>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyCastorRecHit>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyCastorRecHitgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyCastorRecHit>) );
      instance.SetNew(&new_vectorlEMyCastorRecHitgR);
      instance.SetNewArray(&newArray_vectorlEMyCastorRecHitgR);
      instance.SetDelete(&delete_vectorlEMyCastorRecHitgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyCastorRecHitgR);
      instance.SetDestructor(&destruct_vectorlEMyCastorRecHitgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyCastorRecHit> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyCastorRecHit>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyCastorRecHitgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyCastorRecHit>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyCastorRecHitgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyCastorRecHit> : new vector<MyCastorRecHit>;
   }
   static void *newArray_vectorlEMyCastorRecHitgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyCastorRecHit>[nElements] : new vector<MyCastorRecHit>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyCastorRecHitgR(void *p) {
      delete ((vector<MyCastorRecHit>*)p);
   }
   static void deleteArray_vectorlEMyCastorRecHitgR(void *p) {
      delete [] ((vector<MyCastorRecHit>*)p);
   }
   static void destruct_vectorlEMyCastorRecHitgR(void *p) {
      typedef vector<MyCastorRecHit> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyCastorRecHit>

namespace ROOT {
   void vectorlEMyDiJetgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyDiJetgR_Dictionary();
   static void *new_vectorlEMyDiJetgR(void *p = 0);
   static void *newArray_vectorlEMyDiJetgR(Long_t size, void *p);
   static void delete_vectorlEMyDiJetgR(void *p);
   static void deleteArray_vectorlEMyDiJetgR(void *p);
   static void destruct_vectorlEMyDiJetgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyDiJet>*)
   {
      vector<MyDiJet> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyDiJet>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyDiJet>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyDiJet>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyDiJetgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyDiJet>) );
      instance.SetNew(&new_vectorlEMyDiJetgR);
      instance.SetNewArray(&newArray_vectorlEMyDiJetgR);
      instance.SetDelete(&delete_vectorlEMyDiJetgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyDiJetgR);
      instance.SetDestructor(&destruct_vectorlEMyDiJetgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyDiJet> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyDiJet>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyDiJetgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyDiJet>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyDiJetgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyDiJet> : new vector<MyDiJet>;
   }
   static void *newArray_vectorlEMyDiJetgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyDiJet>[nElements] : new vector<MyDiJet>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyDiJetgR(void *p) {
      delete ((vector<MyDiJet>*)p);
   }
   static void deleteArray_vectorlEMyDiJetgR(void *p) {
      delete [] ((vector<MyDiJet>*)p);
   }
   static void destruct_vectorlEMyDiJetgR(void *p) {
      typedef vector<MyDiJet> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyDiJet>

namespace ROOT {
   void vectorlEMyElectrongR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyElectrongR_Dictionary();
   static void *new_vectorlEMyElectrongR(void *p = 0);
   static void *newArray_vectorlEMyElectrongR(Long_t size, void *p);
   static void delete_vectorlEMyElectrongR(void *p);
   static void deleteArray_vectorlEMyElectrongR(void *p);
   static void destruct_vectorlEMyElectrongR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyElectron>*)
   {
      vector<MyElectron> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyElectron>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyElectron>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyElectron>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyElectrongR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyElectron>) );
      instance.SetNew(&new_vectorlEMyElectrongR);
      instance.SetNewArray(&newArray_vectorlEMyElectrongR);
      instance.SetDelete(&delete_vectorlEMyElectrongR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyElectrongR);
      instance.SetDestructor(&destruct_vectorlEMyElectrongR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyElectron> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyElectron>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyElectrongR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyElectron>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyElectrongR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyElectron> : new vector<MyElectron>;
   }
   static void *newArray_vectorlEMyElectrongR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyElectron>[nElements] : new vector<MyElectron>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyElectrongR(void *p) {
      delete ((vector<MyElectron>*)p);
   }
   static void deleteArray_vectorlEMyElectrongR(void *p) {
      delete [] ((vector<MyElectron>*)p);
   }
   static void destruct_vectorlEMyElectrongR(void *p) {
      typedef vector<MyElectron> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyElectron>

namespace ROOT {
   void vectorlEMyEvtIdgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyEvtIdgR_Dictionary();
   static void *new_vectorlEMyEvtIdgR(void *p = 0);
   static void *newArray_vectorlEMyEvtIdgR(Long_t size, void *p);
   static void delete_vectorlEMyEvtIdgR(void *p);
   static void deleteArray_vectorlEMyEvtIdgR(void *p);
   static void destruct_vectorlEMyEvtIdgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyEvtId>*)
   {
      vector<MyEvtId> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyEvtId>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyEvtId>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyEvtId>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyEvtIdgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyEvtId>) );
      instance.SetNew(&new_vectorlEMyEvtIdgR);
      instance.SetNewArray(&newArray_vectorlEMyEvtIdgR);
      instance.SetDelete(&delete_vectorlEMyEvtIdgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyEvtIdgR);
      instance.SetDestructor(&destruct_vectorlEMyEvtIdgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyEvtId> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyEvtId>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyEvtIdgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyEvtId>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyEvtIdgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyEvtId> : new vector<MyEvtId>;
   }
   static void *newArray_vectorlEMyEvtIdgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyEvtId>[nElements] : new vector<MyEvtId>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyEvtIdgR(void *p) {
      delete ((vector<MyEvtId>*)p);
   }
   static void deleteArray_vectorlEMyEvtIdgR(void *p) {
      delete [] ((vector<MyEvtId>*)p);
   }
   static void destruct_vectorlEMyEvtIdgR(void *p) {
      typedef vector<MyEvtId> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyEvtId>

namespace ROOT {
   void vectorlEMyFSCDigigR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyFSCDigigR_Dictionary();
   static void *new_vectorlEMyFSCDigigR(void *p = 0);
   static void *newArray_vectorlEMyFSCDigigR(Long_t size, void *p);
   static void delete_vectorlEMyFSCDigigR(void *p);
   static void deleteArray_vectorlEMyFSCDigigR(void *p);
   static void destruct_vectorlEMyFSCDigigR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyFSCDigi>*)
   {
      vector<MyFSCDigi> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyFSCDigi>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyFSCDigi>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyFSCDigi>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyFSCDigigR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyFSCDigi>) );
      instance.SetNew(&new_vectorlEMyFSCDigigR);
      instance.SetNewArray(&newArray_vectorlEMyFSCDigigR);
      instance.SetDelete(&delete_vectorlEMyFSCDigigR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyFSCDigigR);
      instance.SetDestructor(&destruct_vectorlEMyFSCDigigR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyFSCDigi> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyFSCDigi>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyFSCDigigR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyFSCDigi>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyFSCDigigR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyFSCDigi> : new vector<MyFSCDigi>;
   }
   static void *newArray_vectorlEMyFSCDigigR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyFSCDigi>[nElements] : new vector<MyFSCDigi>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyFSCDigigR(void *p) {
      delete ((vector<MyFSCDigi>*)p);
   }
   static void deleteArray_vectorlEMyFSCDigigR(void *p) {
      delete [] ((vector<MyFSCDigi>*)p);
   }
   static void destruct_vectorlEMyFSCDigigR(void *p) {
      typedef vector<MyFSCDigi> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyFSCDigi>

namespace ROOT {
   void vectorlEMyFSCHitgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyFSCHitgR_Dictionary();
   static void *new_vectorlEMyFSCHitgR(void *p = 0);
   static void *newArray_vectorlEMyFSCHitgR(Long_t size, void *p);
   static void delete_vectorlEMyFSCHitgR(void *p);
   static void deleteArray_vectorlEMyFSCHitgR(void *p);
   static void destruct_vectorlEMyFSCHitgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyFSCHit>*)
   {
      vector<MyFSCHit> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyFSCHit>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyFSCHit>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyFSCHit>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyFSCHitgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyFSCHit>) );
      instance.SetNew(&new_vectorlEMyFSCHitgR);
      instance.SetNewArray(&newArray_vectorlEMyFSCHitgR);
      instance.SetDelete(&delete_vectorlEMyFSCHitgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyFSCHitgR);
      instance.SetDestructor(&destruct_vectorlEMyFSCHitgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyFSCHit> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyFSCHit>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyFSCHitgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyFSCHit>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyFSCHitgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyFSCHit> : new vector<MyFSCHit>;
   }
   static void *newArray_vectorlEMyFSCHitgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyFSCHit>[nElements] : new vector<MyFSCHit>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyFSCHitgR(void *p) {
      delete ((vector<MyFSCHit>*)p);
   }
   static void deleteArray_vectorlEMyFSCHitgR(void *p) {
      delete [] ((vector<MyFSCHit>*)p);
   }
   static void destruct_vectorlEMyFSCHitgR(void *p) {
      typedef vector<MyFSCHit> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyFSCHit>

namespace ROOT {
   void vectorlEMyFSCInfogR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyFSCInfogR_Dictionary();
   static void *new_vectorlEMyFSCInfogR(void *p = 0);
   static void *newArray_vectorlEMyFSCInfogR(Long_t size, void *p);
   static void delete_vectorlEMyFSCInfogR(void *p);
   static void deleteArray_vectorlEMyFSCInfogR(void *p);
   static void destruct_vectorlEMyFSCInfogR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyFSCInfo>*)
   {
      vector<MyFSCInfo> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyFSCInfo>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyFSCInfo>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyFSCInfo>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyFSCInfogR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyFSCInfo>) );
      instance.SetNew(&new_vectorlEMyFSCInfogR);
      instance.SetNewArray(&newArray_vectorlEMyFSCInfogR);
      instance.SetDelete(&delete_vectorlEMyFSCInfogR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyFSCInfogR);
      instance.SetDestructor(&destruct_vectorlEMyFSCInfogR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyFSCInfo> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyFSCInfo>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyFSCInfogR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyFSCInfo>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyFSCInfogR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyFSCInfo> : new vector<MyFSCInfo>;
   }
   static void *newArray_vectorlEMyFSCInfogR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyFSCInfo>[nElements] : new vector<MyFSCInfo>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyFSCInfogR(void *p) {
      delete ((vector<MyFSCInfo>*)p);
   }
   static void deleteArray_vectorlEMyFSCInfogR(void *p) {
      delete [] ((vector<MyFSCInfo>*)p);
   }
   static void destruct_vectorlEMyFSCInfogR(void *p) {
      typedef vector<MyFSCInfo> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyFSCInfo>

namespace ROOT {
   void vectorlEMyFwdGapgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyFwdGapgR_Dictionary();
   static void *new_vectorlEMyFwdGapgR(void *p = 0);
   static void *newArray_vectorlEMyFwdGapgR(Long_t size, void *p);
   static void delete_vectorlEMyFwdGapgR(void *p);
   static void deleteArray_vectorlEMyFwdGapgR(void *p);
   static void destruct_vectorlEMyFwdGapgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyFwdGap>*)
   {
      vector<MyFwdGap> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyFwdGap>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyFwdGap>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyFwdGap>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyFwdGapgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyFwdGap>) );
      instance.SetNew(&new_vectorlEMyFwdGapgR);
      instance.SetNewArray(&newArray_vectorlEMyFwdGapgR);
      instance.SetDelete(&delete_vectorlEMyFwdGapgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyFwdGapgR);
      instance.SetDestructor(&destruct_vectorlEMyFwdGapgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyFwdGap> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyFwdGap>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyFwdGapgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyFwdGap>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyFwdGapgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyFwdGap> : new vector<MyFwdGap>;
   }
   static void *newArray_vectorlEMyFwdGapgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyFwdGap>[nElements] : new vector<MyFwdGap>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyFwdGapgR(void *p) {
      delete ((vector<MyFwdGap>*)p);
   }
   static void deleteArray_vectorlEMyFwdGapgR(void *p) {
      delete [] ((vector<MyFwdGap>*)p);
   }
   static void destruct_vectorlEMyFwdGapgR(void *p) {
      typedef vector<MyFwdGap> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyFwdGap>

namespace ROOT {
   void vectorlEMyGenJetgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyGenJetgR_Dictionary();
   static void *new_vectorlEMyGenJetgR(void *p = 0);
   static void *newArray_vectorlEMyGenJetgR(Long_t size, void *p);
   static void delete_vectorlEMyGenJetgR(void *p);
   static void deleteArray_vectorlEMyGenJetgR(void *p);
   static void destruct_vectorlEMyGenJetgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyGenJet>*)
   {
      vector<MyGenJet> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyGenJet>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyGenJet>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyGenJet>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyGenJetgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyGenJet>) );
      instance.SetNew(&new_vectorlEMyGenJetgR);
      instance.SetNewArray(&newArray_vectorlEMyGenJetgR);
      instance.SetDelete(&delete_vectorlEMyGenJetgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyGenJetgR);
      instance.SetDestructor(&destruct_vectorlEMyGenJetgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyGenJet> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyGenJet>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyGenJetgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyGenJet>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyGenJetgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyGenJet> : new vector<MyGenJet>;
   }
   static void *newArray_vectorlEMyGenJetgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyGenJet>[nElements] : new vector<MyGenJet>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyGenJetgR(void *p) {
      delete ((vector<MyGenJet>*)p);
   }
   static void deleteArray_vectorlEMyGenJetgR(void *p) {
      delete [] ((vector<MyGenJet>*)p);
   }
   static void destruct_vectorlEMyGenJetgR(void *p) {
      typedef vector<MyGenJet> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyGenJet>

namespace ROOT {
   void vectorlEMyGenKingR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyGenKingR_Dictionary();
   static void *new_vectorlEMyGenKingR(void *p = 0);
   static void *newArray_vectorlEMyGenKingR(Long_t size, void *p);
   static void delete_vectorlEMyGenKingR(void *p);
   static void deleteArray_vectorlEMyGenKingR(void *p);
   static void destruct_vectorlEMyGenKingR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyGenKin>*)
   {
      vector<MyGenKin> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyGenKin>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyGenKin>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyGenKin>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyGenKingR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyGenKin>) );
      instance.SetNew(&new_vectorlEMyGenKingR);
      instance.SetNewArray(&newArray_vectorlEMyGenKingR);
      instance.SetDelete(&delete_vectorlEMyGenKingR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyGenKingR);
      instance.SetDestructor(&destruct_vectorlEMyGenKingR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyGenKin> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyGenKin>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyGenKingR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyGenKin>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyGenKingR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyGenKin> : new vector<MyGenKin>;
   }
   static void *newArray_vectorlEMyGenKingR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyGenKin>[nElements] : new vector<MyGenKin>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyGenKingR(void *p) {
      delete ((vector<MyGenKin>*)p);
   }
   static void deleteArray_vectorlEMyGenKingR(void *p) {
      delete [] ((vector<MyGenKin>*)p);
   }
   static void destruct_vectorlEMyGenKingR(void *p) {
      typedef vector<MyGenKin> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyGenKin>

namespace ROOT {
   void vectorlEMyGenMetgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyGenMetgR_Dictionary();
   static void *new_vectorlEMyGenMetgR(void *p = 0);
   static void *newArray_vectorlEMyGenMetgR(Long_t size, void *p);
   static void delete_vectorlEMyGenMetgR(void *p);
   static void deleteArray_vectorlEMyGenMetgR(void *p);
   static void destruct_vectorlEMyGenMetgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyGenMet>*)
   {
      vector<MyGenMet> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyGenMet>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyGenMet>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyGenMet>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyGenMetgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyGenMet>) );
      instance.SetNew(&new_vectorlEMyGenMetgR);
      instance.SetNewArray(&newArray_vectorlEMyGenMetgR);
      instance.SetDelete(&delete_vectorlEMyGenMetgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyGenMetgR);
      instance.SetDestructor(&destruct_vectorlEMyGenMetgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyGenMet> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyGenMet>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyGenMetgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyGenMet>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyGenMetgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyGenMet> : new vector<MyGenMet>;
   }
   static void *newArray_vectorlEMyGenMetgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyGenMet>[nElements] : new vector<MyGenMet>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyGenMetgR(void *p) {
      delete ((vector<MyGenMet>*)p);
   }
   static void deleteArray_vectorlEMyGenMetgR(void *p) {
      delete [] ((vector<MyGenMet>*)p);
   }
   static void destruct_vectorlEMyGenMetgR(void *p) {
      typedef vector<MyGenMet> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyGenMet>

namespace ROOT {
   void vectorlEMyGenPartgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyGenPartgR_Dictionary();
   static void *new_vectorlEMyGenPartgR(void *p = 0);
   static void *newArray_vectorlEMyGenPartgR(Long_t size, void *p);
   static void delete_vectorlEMyGenPartgR(void *p);
   static void deleteArray_vectorlEMyGenPartgR(void *p);
   static void destruct_vectorlEMyGenPartgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyGenPart>*)
   {
      vector<MyGenPart> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyGenPart>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyGenPart>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyGenPart>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyGenPartgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyGenPart>) );
      instance.SetNew(&new_vectorlEMyGenPartgR);
      instance.SetNewArray(&newArray_vectorlEMyGenPartgR);
      instance.SetDelete(&delete_vectorlEMyGenPartgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyGenPartgR);
      instance.SetDestructor(&destruct_vectorlEMyGenPartgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyGenPart> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyGenPart>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyGenPartgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyGenPart>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyGenPartgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyGenPart> : new vector<MyGenPart>;
   }
   static void *newArray_vectorlEMyGenPartgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyGenPart>[nElements] : new vector<MyGenPart>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyGenPartgR(void *p) {
      delete ((vector<MyGenPart>*)p);
   }
   static void deleteArray_vectorlEMyGenPartgR(void *p) {
      delete [] ((vector<MyGenPart>*)p);
   }
   static void destruct_vectorlEMyGenPartgR(void *p) {
      typedef vector<MyGenPart> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyGenPart>

namespace ROOT {
   void vectorlEMyHLTriggR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyHLTriggR_Dictionary();
   static void *new_vectorlEMyHLTriggR(void *p = 0);
   static void *newArray_vectorlEMyHLTriggR(Long_t size, void *p);
   static void delete_vectorlEMyHLTriggR(void *p);
   static void deleteArray_vectorlEMyHLTriggR(void *p);
   static void destruct_vectorlEMyHLTriggR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyHLTrig>*)
   {
      vector<MyHLTrig> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyHLTrig>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyHLTrig>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyHLTrig>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyHLTriggR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyHLTrig>) );
      instance.SetNew(&new_vectorlEMyHLTriggR);
      instance.SetNewArray(&newArray_vectorlEMyHLTriggR);
      instance.SetDelete(&delete_vectorlEMyHLTriggR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyHLTriggR);
      instance.SetDestructor(&destruct_vectorlEMyHLTriggR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyHLTrig> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyHLTrig>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyHLTriggR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyHLTrig>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyHLTriggR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyHLTrig> : new vector<MyHLTrig>;
   }
   static void *newArray_vectorlEMyHLTriggR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyHLTrig>[nElements] : new vector<MyHLTrig>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyHLTriggR(void *p) {
      delete ((vector<MyHLTrig>*)p);
   }
   static void deleteArray_vectorlEMyHLTriggR(void *p) {
      delete [] ((vector<MyHLTrig>*)p);
   }
   static void destruct_vectorlEMyHLTriggR(void *p) {
      typedef vector<MyHLTrig> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyHLTrig>

namespace ROOT {
   void vectorlEMyJetgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyJetgR_Dictionary();
   static void *new_vectorlEMyJetgR(void *p = 0);
   static void *newArray_vectorlEMyJetgR(Long_t size, void *p);
   static void delete_vectorlEMyJetgR(void *p);
   static void deleteArray_vectorlEMyJetgR(void *p);
   static void destruct_vectorlEMyJetgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyJet>*)
   {
      vector<MyJet> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyJet>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyJet>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyJet>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyJetgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyJet>) );
      instance.SetNew(&new_vectorlEMyJetgR);
      instance.SetNewArray(&newArray_vectorlEMyJetgR);
      instance.SetDelete(&delete_vectorlEMyJetgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyJetgR);
      instance.SetDestructor(&destruct_vectorlEMyJetgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyJet> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyJet>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyJetgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyJet>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyJetgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyJet> : new vector<MyJet>;
   }
   static void *newArray_vectorlEMyJetgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyJet>[nElements] : new vector<MyJet>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyJetgR(void *p) {
      delete ((vector<MyJet>*)p);
   }
   static void deleteArray_vectorlEMyJetgR(void *p) {
      delete [] ((vector<MyJet>*)p);
   }
   static void destruct_vectorlEMyJetgR(void *p) {
      typedef vector<MyJet> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyJet>

namespace ROOT {
   void vectorlEMyL1TriggR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyL1TriggR_Dictionary();
   static void *new_vectorlEMyL1TriggR(void *p = 0);
   static void *newArray_vectorlEMyL1TriggR(Long_t size, void *p);
   static void delete_vectorlEMyL1TriggR(void *p);
   static void deleteArray_vectorlEMyL1TriggR(void *p);
   static void destruct_vectorlEMyL1TriggR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyL1Trig>*)
   {
      vector<MyL1Trig> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyL1Trig>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyL1Trig>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyL1Trig>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyL1TriggR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyL1Trig>) );
      instance.SetNew(&new_vectorlEMyL1TriggR);
      instance.SetNewArray(&newArray_vectorlEMyL1TriggR);
      instance.SetDelete(&delete_vectorlEMyL1TriggR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyL1TriggR);
      instance.SetDestructor(&destruct_vectorlEMyL1TriggR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyL1Trig> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyL1Trig>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyL1TriggR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyL1Trig>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyL1TriggR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyL1Trig> : new vector<MyL1Trig>;
   }
   static void *newArray_vectorlEMyL1TriggR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyL1Trig>[nElements] : new vector<MyL1Trig>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyL1TriggR(void *p) {
      delete ((vector<MyL1Trig>*)p);
   }
   static void deleteArray_vectorlEMyL1TriggR(void *p) {
      delete [] ((vector<MyL1Trig>*)p);
   }
   static void destruct_vectorlEMyL1TriggR(void *p) {
      typedef vector<MyL1Trig> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyL1Trig>

namespace ROOT {
   void vectorlEMyL1TrigOldgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyL1TrigOldgR_Dictionary();
   static void *new_vectorlEMyL1TrigOldgR(void *p = 0);
   static void *newArray_vectorlEMyL1TrigOldgR(Long_t size, void *p);
   static void delete_vectorlEMyL1TrigOldgR(void *p);
   static void deleteArray_vectorlEMyL1TrigOldgR(void *p);
   static void destruct_vectorlEMyL1TrigOldgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyL1TrigOld>*)
   {
      vector<MyL1TrigOld> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyL1TrigOld>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyL1TrigOld>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyL1TrigOld>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyL1TrigOldgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyL1TrigOld>) );
      instance.SetNew(&new_vectorlEMyL1TrigOldgR);
      instance.SetNewArray(&newArray_vectorlEMyL1TrigOldgR);
      instance.SetDelete(&delete_vectorlEMyL1TrigOldgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyL1TrigOldgR);
      instance.SetDestructor(&destruct_vectorlEMyL1TrigOldgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyL1TrigOld> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyL1TrigOld>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyL1TrigOldgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyL1TrigOld>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyL1TrigOldgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyL1TrigOld> : new vector<MyL1TrigOld>;
   }
   static void *newArray_vectorlEMyL1TrigOldgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyL1TrigOld>[nElements] : new vector<MyL1TrigOld>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyL1TrigOldgR(void *p) {
      delete ((vector<MyL1TrigOld>*)p);
   }
   static void deleteArray_vectorlEMyL1TrigOldgR(void *p) {
      delete [] ((vector<MyL1TrigOld>*)p);
   }
   static void destruct_vectorlEMyL1TrigOldgR(void *p) {
      typedef vector<MyL1TrigOld> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyL1TrigOld>

namespace ROOT {
   void vectorlEMyMITEvtSelgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyMITEvtSelgR_Dictionary();
   static void *new_vectorlEMyMITEvtSelgR(void *p = 0);
   static void *newArray_vectorlEMyMITEvtSelgR(Long_t size, void *p);
   static void delete_vectorlEMyMITEvtSelgR(void *p);
   static void deleteArray_vectorlEMyMITEvtSelgR(void *p);
   static void destruct_vectorlEMyMITEvtSelgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyMITEvtSel>*)
   {
      vector<MyMITEvtSel> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyMITEvtSel>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyMITEvtSel>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyMITEvtSel>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyMITEvtSelgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyMITEvtSel>) );
      instance.SetNew(&new_vectorlEMyMITEvtSelgR);
      instance.SetNewArray(&newArray_vectorlEMyMITEvtSelgR);
      instance.SetDelete(&delete_vectorlEMyMITEvtSelgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyMITEvtSelgR);
      instance.SetDestructor(&destruct_vectorlEMyMITEvtSelgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyMITEvtSel> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyMITEvtSel>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyMITEvtSelgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyMITEvtSel>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyMITEvtSelgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyMITEvtSel> : new vector<MyMITEvtSel>;
   }
   static void *newArray_vectorlEMyMITEvtSelgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyMITEvtSel>[nElements] : new vector<MyMITEvtSel>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyMITEvtSelgR(void *p) {
      delete ((vector<MyMITEvtSel>*)p);
   }
   static void deleteArray_vectorlEMyMITEvtSelgR(void *p) {
      delete [] ((vector<MyMITEvtSel>*)p);
   }
   static void destruct_vectorlEMyMITEvtSelgR(void *p) {
      typedef vector<MyMITEvtSel> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyMITEvtSel>

namespace ROOT {
   void vectorlEMyMetgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyMetgR_Dictionary();
   static void *new_vectorlEMyMetgR(void *p = 0);
   static void *newArray_vectorlEMyMetgR(Long_t size, void *p);
   static void delete_vectorlEMyMetgR(void *p);
   static void deleteArray_vectorlEMyMetgR(void *p);
   static void destruct_vectorlEMyMetgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyMet>*)
   {
      vector<MyMet> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyMet>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyMet>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyMet>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyMetgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyMet>) );
      instance.SetNew(&new_vectorlEMyMetgR);
      instance.SetNewArray(&newArray_vectorlEMyMetgR);
      instance.SetDelete(&delete_vectorlEMyMetgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyMetgR);
      instance.SetDestructor(&destruct_vectorlEMyMetgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyMet> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyMet>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyMetgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyMet>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyMetgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyMet> : new vector<MyMet>;
   }
   static void *newArray_vectorlEMyMetgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyMet>[nElements] : new vector<MyMet>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyMetgR(void *p) {
      delete ((vector<MyMet>*)p);
   }
   static void deleteArray_vectorlEMyMetgR(void *p) {
      delete [] ((vector<MyMet>*)p);
   }
   static void destruct_vectorlEMyMetgR(void *p) {
      typedef vector<MyMet> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyMet>

namespace ROOT {
   void vectorlEMyMuongR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyMuongR_Dictionary();
   static void *new_vectorlEMyMuongR(void *p = 0);
   static void *newArray_vectorlEMyMuongR(Long_t size, void *p);
   static void delete_vectorlEMyMuongR(void *p);
   static void deleteArray_vectorlEMyMuongR(void *p);
   static void destruct_vectorlEMyMuongR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyMuon>*)
   {
      vector<MyMuon> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyMuon>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyMuon>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyMuon>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyMuongR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyMuon>) );
      instance.SetNew(&new_vectorlEMyMuongR);
      instance.SetNewArray(&newArray_vectorlEMyMuongR);
      instance.SetDelete(&delete_vectorlEMyMuongR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyMuongR);
      instance.SetDestructor(&destruct_vectorlEMyMuongR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyMuon> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyMuon>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyMuongR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyMuon>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyMuongR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyMuon> : new vector<MyMuon>;
   }
   static void *newArray_vectorlEMyMuongR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyMuon>[nElements] : new vector<MyMuon>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyMuongR(void *p) {
      delete ((vector<MyMuon>*)p);
   }
   static void deleteArray_vectorlEMyMuongR(void *p) {
      delete [] ((vector<MyMuon>*)p);
   }
   static void destruct_vectorlEMyMuongR(void *p) {
      typedef vector<MyMuon> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyMuon>

namespace ROOT {
   void vectorlEMyPFCandgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyPFCandgR_Dictionary();
   static void *new_vectorlEMyPFCandgR(void *p = 0);
   static void *newArray_vectorlEMyPFCandgR(Long_t size, void *p);
   static void delete_vectorlEMyPFCandgR(void *p);
   static void deleteArray_vectorlEMyPFCandgR(void *p);
   static void destruct_vectorlEMyPFCandgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyPFCand>*)
   {
      vector<MyPFCand> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyPFCand>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyPFCand>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyPFCand>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyPFCandgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyPFCand>) );
      instance.SetNew(&new_vectorlEMyPFCandgR);
      instance.SetNewArray(&newArray_vectorlEMyPFCandgR);
      instance.SetDelete(&delete_vectorlEMyPFCandgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyPFCandgR);
      instance.SetDestructor(&destruct_vectorlEMyPFCandgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyPFCand> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyPFCand>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyPFCandgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyPFCand>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyPFCandgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyPFCand> : new vector<MyPFCand>;
   }
   static void *newArray_vectorlEMyPFCandgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyPFCand>[nElements] : new vector<MyPFCand>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyPFCandgR(void *p) {
      delete ((vector<MyPFCand>*)p);
   }
   static void deleteArray_vectorlEMyPFCandgR(void *p) {
      delete [] ((vector<MyPFCand>*)p);
   }
   static void destruct_vectorlEMyPFCandgR(void *p) {
      typedef vector<MyPFCand> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyPFCand>

namespace ROOT {
   void vectorlEMyPFJetgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyPFJetgR_Dictionary();
   static void *new_vectorlEMyPFJetgR(void *p = 0);
   static void *newArray_vectorlEMyPFJetgR(Long_t size, void *p);
   static void delete_vectorlEMyPFJetgR(void *p);
   static void deleteArray_vectorlEMyPFJetgR(void *p);
   static void destruct_vectorlEMyPFJetgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyPFJet>*)
   {
      vector<MyPFJet> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyPFJet>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyPFJet>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyPFJet>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyPFJetgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyPFJet>) );
      instance.SetNew(&new_vectorlEMyPFJetgR);
      instance.SetNewArray(&newArray_vectorlEMyPFJetgR);
      instance.SetDelete(&delete_vectorlEMyPFJetgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyPFJetgR);
      instance.SetDestructor(&destruct_vectorlEMyPFJetgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyPFJet> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyPFJet>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyPFJetgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyPFJet>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyPFJetgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyPFJet> : new vector<MyPFJet>;
   }
   static void *newArray_vectorlEMyPFJetgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyPFJet>[nElements] : new vector<MyPFJet>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyPFJetgR(void *p) {
      delete ((vector<MyPFJet>*)p);
   }
   static void deleteArray_vectorlEMyPFJetgR(void *p) {
      delete [] ((vector<MyPFJet>*)p);
   }
   static void destruct_vectorlEMyPFJetgR(void *p) {
      typedef vector<MyPFJet> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyPFJet>

namespace ROOT {
   void vectorlEMyPUSumInfogR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyPUSumInfogR_Dictionary();
   static void *new_vectorlEMyPUSumInfogR(void *p = 0);
   static void *newArray_vectorlEMyPUSumInfogR(Long_t size, void *p);
   static void delete_vectorlEMyPUSumInfogR(void *p);
   static void deleteArray_vectorlEMyPUSumInfogR(void *p);
   static void destruct_vectorlEMyPUSumInfogR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyPUSumInfo>*)
   {
      vector<MyPUSumInfo> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyPUSumInfo>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyPUSumInfo>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyPUSumInfo>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyPUSumInfogR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyPUSumInfo>) );
      instance.SetNew(&new_vectorlEMyPUSumInfogR);
      instance.SetNewArray(&newArray_vectorlEMyPUSumInfogR);
      instance.SetDelete(&delete_vectorlEMyPUSumInfogR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyPUSumInfogR);
      instance.SetDestructor(&destruct_vectorlEMyPUSumInfogR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyPUSumInfo> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyPUSumInfo>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyPUSumInfogR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyPUSumInfo>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyPUSumInfogR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyPUSumInfo> : new vector<MyPUSumInfo>;
   }
   static void *newArray_vectorlEMyPUSumInfogR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyPUSumInfo>[nElements] : new vector<MyPUSumInfo>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyPUSumInfogR(void *p) {
      delete ((vector<MyPUSumInfo>*)p);
   }
   static void deleteArray_vectorlEMyPUSumInfogR(void *p) {
      delete [] ((vector<MyPUSumInfo>*)p);
   }
   static void destruct_vectorlEMyPUSumInfogR(void *p) {
      typedef vector<MyPUSumInfo> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyPUSumInfo>

namespace ROOT {
   void vectorlEMyPartgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyPartgR_Dictionary();
   static void *new_vectorlEMyPartgR(void *p = 0);
   static void *newArray_vectorlEMyPartgR(Long_t size, void *p);
   static void delete_vectorlEMyPartgR(void *p);
   static void deleteArray_vectorlEMyPartgR(void *p);
   static void destruct_vectorlEMyPartgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyPart>*)
   {
      vector<MyPart> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyPart>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyPart>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyPart>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyPartgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyPart>) );
      instance.SetNew(&new_vectorlEMyPartgR);
      instance.SetNewArray(&newArray_vectorlEMyPartgR);
      instance.SetDelete(&delete_vectorlEMyPartgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyPartgR);
      instance.SetDestructor(&destruct_vectorlEMyPartgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyPart> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyPart>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyPartgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyPart>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyPartgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyPart> : new vector<MyPart>;
   }
   static void *newArray_vectorlEMyPartgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyPart>[nElements] : new vector<MyPart>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyPartgR(void *p) {
      delete ((vector<MyPart>*)p);
   }
   static void deleteArray_vectorlEMyPartgR(void *p) {
      delete [] ((vector<MyPart>*)p);
   }
   static void destruct_vectorlEMyPartgR(void *p) {
      typedef vector<MyPart> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyPart>

namespace ROOT {
   void vectorlEMySimVertexgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMySimVertexgR_Dictionary();
   static void *new_vectorlEMySimVertexgR(void *p = 0);
   static void *newArray_vectorlEMySimVertexgR(Long_t size, void *p);
   static void delete_vectorlEMySimVertexgR(void *p);
   static void deleteArray_vectorlEMySimVertexgR(void *p);
   static void destruct_vectorlEMySimVertexgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MySimVertex>*)
   {
      vector<MySimVertex> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MySimVertex>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MySimVertex>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MySimVertex>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMySimVertexgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MySimVertex>) );
      instance.SetNew(&new_vectorlEMySimVertexgR);
      instance.SetNewArray(&newArray_vectorlEMySimVertexgR);
      instance.SetDelete(&delete_vectorlEMySimVertexgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMySimVertexgR);
      instance.SetDestructor(&destruct_vectorlEMySimVertexgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MySimVertex> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MySimVertex>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMySimVertexgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MySimVertex>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMySimVertexgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MySimVertex> : new vector<MySimVertex>;
   }
   static void *newArray_vectorlEMySimVertexgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MySimVertex>[nElements] : new vector<MySimVertex>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMySimVertexgR(void *p) {
      delete ((vector<MySimVertex>*)p);
   }
   static void deleteArray_vectorlEMySimVertexgR(void *p) {
      delete [] ((vector<MySimVertex>*)p);
   }
   static void destruct_vectorlEMySimVertexgR(void *p) {
      typedef vector<MySimVertex> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MySimVertex>

namespace ROOT {
   void vectorlEMyTrackJetgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyTrackJetgR_Dictionary();
   static void *new_vectorlEMyTrackJetgR(void *p = 0);
   static void *newArray_vectorlEMyTrackJetgR(Long_t size, void *p);
   static void delete_vectorlEMyTrackJetgR(void *p);
   static void deleteArray_vectorlEMyTrackJetgR(void *p);
   static void destruct_vectorlEMyTrackJetgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyTrackJet>*)
   {
      vector<MyTrackJet> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyTrackJet>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyTrackJet>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyTrackJet>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyTrackJetgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyTrackJet>) );
      instance.SetNew(&new_vectorlEMyTrackJetgR);
      instance.SetNewArray(&newArray_vectorlEMyTrackJetgR);
      instance.SetDelete(&delete_vectorlEMyTrackJetgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyTrackJetgR);
      instance.SetDestructor(&destruct_vectorlEMyTrackJetgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyTrackJet> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyTrackJet>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyTrackJetgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyTrackJet>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyTrackJetgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyTrackJet> : new vector<MyTrackJet>;
   }
   static void *newArray_vectorlEMyTrackJetgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyTrackJet>[nElements] : new vector<MyTrackJet>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyTrackJetgR(void *p) {
      delete ((vector<MyTrackJet>*)p);
   }
   static void deleteArray_vectorlEMyTrackJetgR(void *p) {
      delete [] ((vector<MyTrackJet>*)p);
   }
   static void destruct_vectorlEMyTrackJetgR(void *p) {
      typedef vector<MyTrackJet> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyTrackJet>

namespace ROOT {
   void vectorlEMyTracksgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyTracksgR_Dictionary();
   static void *new_vectorlEMyTracksgR(void *p = 0);
   static void *newArray_vectorlEMyTracksgR(Long_t size, void *p);
   static void delete_vectorlEMyTracksgR(void *p);
   static void deleteArray_vectorlEMyTracksgR(void *p);
   static void destruct_vectorlEMyTracksgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyTracks>*)
   {
      vector<MyTracks> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyTracks>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyTracks>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyTracks>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyTracksgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyTracks>) );
      instance.SetNew(&new_vectorlEMyTracksgR);
      instance.SetNewArray(&newArray_vectorlEMyTracksgR);
      instance.SetDelete(&delete_vectorlEMyTracksgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyTracksgR);
      instance.SetDestructor(&destruct_vectorlEMyTracksgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyTracks> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyTracks>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyTracksgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyTracks>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyTracksgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyTracks> : new vector<MyTracks>;
   }
   static void *newArray_vectorlEMyTracksgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyTracks>[nElements] : new vector<MyTracks>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyTracksgR(void *p) {
      delete ((vector<MyTracks>*)p);
   }
   static void deleteArray_vectorlEMyTracksgR(void *p) {
      delete [] ((vector<MyTracks>*)p);
   }
   static void destruct_vectorlEMyTracksgR(void *p) {
      typedef vector<MyTracks> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyTracks>

namespace ROOT {
   void vectorlEMyVertexgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyVertexgR_Dictionary();
   static void *new_vectorlEMyVertexgR(void *p = 0);
   static void *newArray_vectorlEMyVertexgR(Long_t size, void *p);
   static void delete_vectorlEMyVertexgR(void *p);
   static void deleteArray_vectorlEMyVertexgR(void *p);
   static void destruct_vectorlEMyVertexgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyVertex>*)
   {
      vector<MyVertex> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyVertex>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyVertex>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyVertex>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyVertexgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyVertex>) );
      instance.SetNew(&new_vectorlEMyVertexgR);
      instance.SetNewArray(&newArray_vectorlEMyVertexgR);
      instance.SetDelete(&delete_vectorlEMyVertexgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyVertexgR);
      instance.SetDestructor(&destruct_vectorlEMyVertexgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyVertex> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyVertex>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyVertexgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyVertex>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyVertexgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyVertex> : new vector<MyVertex>;
   }
   static void *newArray_vectorlEMyVertexgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyVertex>[nElements] : new vector<MyVertex>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyVertexgR(void *p) {
      delete ((vector<MyVertex>*)p);
   }
   static void deleteArray_vectorlEMyVertexgR(void *p) {
      delete [] ((vector<MyVertex>*)p);
   }
   static void destruct_vectorlEMyVertexgR(void *p) {
      typedef vector<MyVertex> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyVertex>

namespace ROOT {
   void vectorlEMyZDCDigigR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyZDCDigigR_Dictionary();
   static void *new_vectorlEMyZDCDigigR(void *p = 0);
   static void *newArray_vectorlEMyZDCDigigR(Long_t size, void *p);
   static void delete_vectorlEMyZDCDigigR(void *p);
   static void deleteArray_vectorlEMyZDCDigigR(void *p);
   static void destruct_vectorlEMyZDCDigigR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyZDCDigi>*)
   {
      vector<MyZDCDigi> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyZDCDigi>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyZDCDigi>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyZDCDigi>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyZDCDigigR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyZDCDigi>) );
      instance.SetNew(&new_vectorlEMyZDCDigigR);
      instance.SetNewArray(&newArray_vectorlEMyZDCDigigR);
      instance.SetDelete(&delete_vectorlEMyZDCDigigR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyZDCDigigR);
      instance.SetDestructor(&destruct_vectorlEMyZDCDigigR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyZDCDigi> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyZDCDigi>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyZDCDigigR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyZDCDigi>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyZDCDigigR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyZDCDigi> : new vector<MyZDCDigi>;
   }
   static void *newArray_vectorlEMyZDCDigigR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyZDCDigi>[nElements] : new vector<MyZDCDigi>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyZDCDigigR(void *p) {
      delete ((vector<MyZDCDigi>*)p);
   }
   static void deleteArray_vectorlEMyZDCDigigR(void *p) {
      delete [] ((vector<MyZDCDigi>*)p);
   }
   static void destruct_vectorlEMyZDCDigigR(void *p) {
      typedef vector<MyZDCDigi> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyZDCDigi>

namespace ROOT {
   void vectorlEMyZDCHitgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyZDCHitgR_Dictionary();
   static void *new_vectorlEMyZDCHitgR(void *p = 0);
   static void *newArray_vectorlEMyZDCHitgR(Long_t size, void *p);
   static void delete_vectorlEMyZDCHitgR(void *p);
   static void deleteArray_vectorlEMyZDCHitgR(void *p);
   static void destruct_vectorlEMyZDCHitgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyZDCHit>*)
   {
      vector<MyZDCHit> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyZDCHit>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyZDCHit>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyZDCHit>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyZDCHitgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyZDCHit>) );
      instance.SetNew(&new_vectorlEMyZDCHitgR);
      instance.SetNewArray(&newArray_vectorlEMyZDCHitgR);
      instance.SetDelete(&delete_vectorlEMyZDCHitgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyZDCHitgR);
      instance.SetDestructor(&destruct_vectorlEMyZDCHitgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyZDCHit> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyZDCHit>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyZDCHitgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyZDCHit>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyZDCHitgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyZDCHit> : new vector<MyZDCHit>;
   }
   static void *newArray_vectorlEMyZDCHitgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyZDCHit>[nElements] : new vector<MyZDCHit>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyZDCHitgR(void *p) {
      delete ((vector<MyZDCHit>*)p);
   }
   static void deleteArray_vectorlEMyZDCHitgR(void *p) {
      delete [] ((vector<MyZDCHit>*)p);
   }
   static void destruct_vectorlEMyZDCHitgR(void *p) {
      typedef vector<MyZDCHit> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyZDCHit>

namespace ROOT {
   void vectorlEMyZDCInfogR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMyZDCInfogR_Dictionary();
   static void *new_vectorlEMyZDCInfogR(void *p = 0);
   static void *newArray_vectorlEMyZDCInfogR(Long_t size, void *p);
   static void delete_vectorlEMyZDCInfogR(void *p);
   static void deleteArray_vectorlEMyZDCInfogR(void *p);
   static void destruct_vectorlEMyZDCInfogR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyZDCInfo>*)
   {
      vector<MyZDCInfo> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyZDCInfo>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyZDCInfo>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyZDCInfo>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyZDCInfogR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyZDCInfo>) );
      instance.SetNew(&new_vectorlEMyZDCInfogR);
      instance.SetNewArray(&newArray_vectorlEMyZDCInfogR);
      instance.SetDelete(&delete_vectorlEMyZDCInfogR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyZDCInfogR);
      instance.SetDestructor(&destruct_vectorlEMyZDCInfogR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyZDCInfo> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyZDCInfo>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyZDCInfogR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyZDCInfo>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyZDCInfogR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyZDCInfo> : new vector<MyZDCInfo>;
   }
   static void *newArray_vectorlEMyZDCInfogR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyZDCInfo>[nElements] : new vector<MyZDCInfo>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyZDCInfogR(void *p) {
      delete ((vector<MyZDCInfo>*)p);
   }
   static void deleteArray_vectorlEMyZDCInfogR(void *p) {
      delete [] ((vector<MyZDCInfo>*)p);
   }
   static void destruct_vectorlEMyZDCInfogR(void *p) {
      typedef vector<MyZDCInfo> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyZDCInfo>

namespace ROOT {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<double>

namespace ROOT {
   void vectorlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEfloatgR_Dictionary();
   static void *new_vectorlEfloatgR(void *p = 0);
   static void *newArray_vectorlEfloatgR(Long_t size, void *p);
   static void delete_vectorlEfloatgR(void *p);
   static void deleteArray_vectorlEfloatgR(void *p);
   static void destruct_vectorlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<float>*)
   {
      vector<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<float>", -2, "vector.dll", 0,
                  typeid(vector<float>), DefineBehavior(ptr, ptr),
                  0, &vectorlEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<float>) );
      instance.SetNew(&new_vectorlEfloatgR);
      instance.SetNewArray(&newArray_vectorlEfloatgR);
      instance.SetDelete(&delete_vectorlEfloatgR);
      instance.SetDeleteArray(&deleteArray_vectorlEfloatgR);
      instance.SetDestructor(&destruct_vectorlEfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float> : new vector<float>;
   }
   static void *newArray_vectorlEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float>[nElements] : new vector<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEfloatgR(void *p) {
      delete ((vector<float>*)p);
   }
   static void deleteArray_vectorlEfloatgR(void *p) {
      delete [] ((vector<float>*)p);
   }
   static void destruct_vectorlEfloatgR(void *p) {
      typedef vector<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<float>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

/********************************************************
* eventdict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableeventdict();

extern "C" void G__set_cpp_environmenteventdict() {
  G__cpp_reset_tagtableeventdict();
}
#include <new>
extern "C" int G__cpp_dllreveventdict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MyBeamSpot */
static int G__eventdict_168_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyBeamSpot* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyBeamSpot[n];
     } else {
       p = new((void*) gvp) MyBeamSpot[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyBeamSpot;
     } else {
       p = new((void*) gvp) MyBeamSpot;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_168_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyBeamSpot*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_168_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyBeamSpot*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_168_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyBeamSpot::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_168_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyBeamSpot::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_168_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyBeamSpot::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_168_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyBeamSpot::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_168_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyBeamSpot*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_168_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyBeamSpot::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_168_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyBeamSpot::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_168_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyBeamSpot::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_168_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyBeamSpot::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_168_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyBeamSpot* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyBeamSpot(*(MyBeamSpot*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyBeamSpot G__TMyBeamSpot;
static int G__eventdict_168_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyBeamSpot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyBeamSpot*) (soff+(sizeof(MyBeamSpot)*i)))->~G__TMyBeamSpot();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyBeamSpot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyBeamSpot*) (soff))->~G__TMyBeamSpot();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_168_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyBeamSpot* dest = (MyBeamSpot*) G__getstructoffset();
   *dest = *(MyBeamSpot*) libp->para[0].ref;
   const MyBeamSpot& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyCastorDigi */
static int G__eventdict_169_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCastorDigi* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCastorDigi[n];
     } else {
       p = new((void*) gvp) MyCastorDigi[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCastorDigi;
     } else {
       p = new((void*) gvp) MyCastorDigi;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_169_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCastorDigi*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_169_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCastorDigi*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_169_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyCastorDigi::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_169_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCastorDigi::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_169_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyCastorDigi::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_169_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyCastorDigi::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_169_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCastorDigi*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_169_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCastorDigi::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_169_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCastorDigi::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_169_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCastorDigi::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_169_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCastorDigi::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_169_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyCastorDigi* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyCastorDigi(*(MyCastorDigi*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyCastorDigi G__TMyCastorDigi;
static int G__eventdict_169_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyCastorDigi*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyCastorDigi*) (soff+(sizeof(MyCastorDigi)*i)))->~G__TMyCastorDigi();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyCastorDigi*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyCastorDigi*) (soff))->~G__TMyCastorDigi();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_169_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCastorDigi* dest = (MyCastorDigi*) G__getstructoffset();
   *dest = *(MyCastorDigi*) libp->para[0].ref;
   const MyCastorDigi& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyCastorJet */
static int G__eventdict_170_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCastorJet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCastorJet[n];
     } else {
       p = new((void*) gvp) MyCastorJet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCastorJet;
     } else {
       p = new((void*) gvp) MyCastorJet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyCastorJet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_170_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCastorJet*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_170_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCastorJet*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_170_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyCastorJet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_170_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCastorJet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_170_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyCastorJet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_170_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyCastorJet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_170_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCastorJet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_170_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCastorJet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_170_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCastorJet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_170_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCastorJet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_170_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCastorJet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_170_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyCastorJet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyCastorJet(*(MyCastorJet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyCastorJet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyCastorJet G__TMyCastorJet;
static int G__eventdict_170_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyCastorJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyCastorJet*) (soff+(sizeof(MyCastorJet)*i)))->~G__TMyCastorJet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyCastorJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyCastorJet*) (soff))->~G__TMyCastorJet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_170_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCastorJet* dest = (MyCastorJet*) G__getstructoffset();
   *dest = *(MyCastorJet*) libp->para[0].ref;
   const MyCastorJet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyCastorRecHit */
static int G__eventdict_171_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCastorRecHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCastorRecHit[n];
     } else {
       p = new((void*) gvp) MyCastorRecHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCastorRecHit;
     } else {
       p = new((void*) gvp) MyCastorRecHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_171_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCastorRecHit*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_171_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCastorRecHit*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_171_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyCastorRecHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_171_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCastorRecHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_171_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyCastorRecHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_171_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyCastorRecHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_171_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCastorRecHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_171_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCastorRecHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_171_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCastorRecHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_171_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCastorRecHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_171_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCastorRecHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_171_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyCastorRecHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyCastorRecHit(*(MyCastorRecHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyCastorRecHit G__TMyCastorRecHit;
static int G__eventdict_171_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyCastorRecHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyCastorRecHit*) (soff+(sizeof(MyCastorRecHit)*i)))->~G__TMyCastorRecHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyCastorRecHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyCastorRecHit*) (soff))->~G__TMyCastorRecHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_171_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCastorRecHit* dest = (MyCastorRecHit*) G__getstructoffset();
   *dest = *(MyCastorRecHit*) libp->para[0].ref;
   const MyCastorRecHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyDiJet */
static int G__eventdict_172_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyDiJet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyDiJet[n];
     } else {
       p = new((void*) gvp) MyDiJet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyDiJet;
     } else {
       p = new((void*) gvp) MyDiJet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyDiJet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_172_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyDiJet*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_172_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyDiJet*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_172_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyDiJet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_172_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyDiJet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_172_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyDiJet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_172_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyDiJet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_172_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyDiJet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_172_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyDiJet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_172_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyDiJet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_172_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyDiJet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_172_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyDiJet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_172_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyDiJet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyDiJet(*(MyDiJet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyDiJet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyDiJet G__TMyDiJet;
static int G__eventdict_172_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyDiJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyDiJet*) (soff+(sizeof(MyDiJet)*i)))->~G__TMyDiJet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyDiJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyDiJet*) (soff))->~G__TMyDiJet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_172_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyDiJet* dest = (MyDiJet*) G__getstructoffset();
   *dest = *(MyDiJet*) libp->para[0].ref;
   const MyDiJet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyEvtId */
static int G__eventdict_173_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyEvtId* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyEvtId[n];
     } else {
       p = new((void*) gvp) MyEvtId[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyEvtId;
     } else {
       p = new((void*) gvp) MyEvtId;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyEvtId));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_173_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyEvtId*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_173_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyEvtId*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_173_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyEvtId::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_173_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyEvtId::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_173_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyEvtId::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_173_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyEvtId::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_173_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyEvtId*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_173_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyEvtId::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_173_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyEvtId::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_173_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyEvtId::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_173_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyEvtId::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_173_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyEvtId* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyEvtId(*(MyEvtId*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyEvtId));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyEvtId G__TMyEvtId;
static int G__eventdict_173_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyEvtId*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyEvtId*) (soff+(sizeof(MyEvtId)*i)))->~G__TMyEvtId();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyEvtId*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyEvtId*) (soff))->~G__TMyEvtId();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_173_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyEvtId* dest = (MyEvtId*) G__getstructoffset();
   *dest = *(MyEvtId*) libp->para[0].ref;
   const MyEvtId& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyFwdGap */
static int G__eventdict_174_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyFwdGap* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyFwdGap[n];
     } else {
       p = new((void*) gvp) MyFwdGap[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyFwdGap;
     } else {
       p = new((void*) gvp) MyFwdGap;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyFwdGap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_174_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyFwdGap*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_174_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyFwdGap*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_174_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyFwdGap::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_174_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyFwdGap::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_174_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyFwdGap::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_174_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyFwdGap::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_174_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyFwdGap*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_174_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyFwdGap::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_174_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyFwdGap::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_174_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyFwdGap::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_174_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyFwdGap::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_174_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyFwdGap* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyFwdGap(*(MyFwdGap*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyFwdGap));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyFwdGap G__TMyFwdGap;
static int G__eventdict_174_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyFwdGap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyFwdGap*) (soff+(sizeof(MyFwdGap)*i)))->~G__TMyFwdGap();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyFwdGap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyFwdGap*) (soff))->~G__TMyFwdGap();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_174_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyFwdGap* dest = (MyFwdGap*) G__getstructoffset();
   *dest = *(MyFwdGap*) libp->para[0].ref;
   const MyFwdGap& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyPart */
static int G__eventdict_232_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyPart* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyPart[n];
     } else {
       p = new((void*) gvp) MyPart[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyPart;
     } else {
       p = new((void*) gvp) MyPart;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyPart));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyPart*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyPart*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((MyPart*) G__getstructoffset())->vmpi();
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyPart*) G__getstructoffset())->operator<(*(MyPart*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyPart::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyPart::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyPart::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyPart::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyPart*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyPart::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyPart::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyPart::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_232_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyPart::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_232_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyPart* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyPart(*(MyPart*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyPart));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyPart G__TMyPart;
static int G__eventdict_232_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyPart*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyPart*) (soff+(sizeof(MyPart)*i)))->~G__TMyPart();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyPart*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyPart*) (soff))->~G__TMyPart();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_232_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyPart* dest = (MyPart*) G__getstructoffset();
   *dest = *(MyPart*) libp->para[0].ref;
   const MyPart& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyMet */
static int G__eventdict_233_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyMet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyMet[n];
     } else {
       p = new((void*) gvp) MyMet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyMet;
     } else {
       p = new((void*) gvp) MyMet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyMet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_233_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyMet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_233_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyMet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_233_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyMet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_233_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyMet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_233_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyMet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_233_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyMet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_233_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyMet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_233_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyMet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_233_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyMet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_233_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyMet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyMet(*(MyMet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyMet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyMet G__TMyMet;
static int G__eventdict_233_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyMet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyMet*) (soff+(sizeof(MyMet)*i)))->~G__TMyMet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyMet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyMet*) (soff))->~G__TMyMet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_233_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyMet* dest = (MyMet*) G__getstructoffset();
   *dest = *(MyMet*) libp->para[0].ref;
   const MyMet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyGenMet */
static int G__eventdict_234_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyGenMet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyGenMet[n];
     } else {
       p = new((void*) gvp) MyGenMet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyGenMet;
     } else {
       p = new((void*) gvp) MyGenMet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyGenMet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_234_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyGenMet*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_234_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyGenMet*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_234_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyGenMet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_234_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenMet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_234_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyGenMet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_234_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyGenMet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_234_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyGenMet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_234_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenMet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_234_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyGenMet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_234_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenMet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_234_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyGenMet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_234_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyGenMet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyGenMet(*(MyGenMet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyGenMet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyGenMet G__TMyGenMet;
static int G__eventdict_234_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyGenMet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyGenMet*) (soff+(sizeof(MyGenMet)*i)))->~G__TMyGenMet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyGenMet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyGenMet*) (soff))->~G__TMyGenMet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_234_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyGenMet* dest = (MyGenMet*) G__getstructoffset();
   *dest = *(MyGenMet*) libp->para[0].ref;
   const MyGenMet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyGenKin */
static int G__eventdict_235_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyGenKin* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyGenKin[n];
     } else {
       p = new((void*) gvp) MyGenKin[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyGenKin;
     } else {
       p = new((void*) gvp) MyGenKin;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyGenKin));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyGenKin*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyGenKin*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyGenKin::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenKin::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyGenKin::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyGenKin::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyGenKin*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenKin::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyGenKin::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenKin::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyGenKin::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_235_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyGenKin* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyGenKin(*(MyGenKin*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyGenKin));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyGenKin G__TMyGenKin;
static int G__eventdict_235_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyGenKin*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyGenKin*) (soff+(sizeof(MyGenKin)*i)))->~G__TMyGenKin();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyGenKin*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyGenKin*) (soff))->~G__TMyGenKin();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_235_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyGenKin* dest = (MyGenKin*) G__getstructoffset();
   *dest = *(MyGenKin*) libp->para[0].ref;
   const MyGenKin& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyGenPart */
static int G__eventdict_236_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyGenPart* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyGenPart[n];
     } else {
       p = new((void*) gvp) MyGenPart[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyGenPart;
     } else {
       p = new((void*) gvp) MyGenPart;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyGenPart));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyGenPart::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenPart::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyGenPart::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyGenPart::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyGenPart*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenPart::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyGenPart::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenPart::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_236_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyGenPart::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_236_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyGenPart* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyGenPart(*(MyGenPart*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyGenPart));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyGenPart G__TMyGenPart;
static int G__eventdict_236_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyGenPart*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyGenPart*) (soff+(sizeof(MyGenPart)*i)))->~G__TMyGenPart();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyGenPart*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyGenPart*) (soff))->~G__TMyGenPart();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_236_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyGenPart* dest = (MyGenPart*) G__getstructoffset();
   *dest = *(MyGenPart*) libp->para[0].ref;
   const MyGenPart& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyGenJet */
static int G__eventdict_237_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyGenJet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyGenJet[n];
     } else {
       p = new((void*) gvp) MyGenJet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyGenJet;
     } else {
       p = new((void*) gvp) MyGenJet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyGenJet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_237_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyGenJet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_237_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenJet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_237_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyGenJet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_237_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyGenJet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_237_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyGenJet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_237_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenJet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_237_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyGenJet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_237_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenJet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_237_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyGenJet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_237_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyGenJet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyGenJet(*(MyGenJet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyGenJet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyGenJet G__TMyGenJet;
static int G__eventdict_237_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyGenJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyGenJet*) (soff+(sizeof(MyGenJet)*i)))->~G__TMyGenJet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyGenJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyGenJet*) (soff))->~G__TMyGenJet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_237_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyGenJet* dest = (MyGenJet*) G__getstructoffset();
   *dest = *(MyGenJet*) libp->para[0].ref;
   const MyGenJet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyGenPart,allocator<MyGenPart> > */
static int G__eventdict_239_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyGenPart,allocator<MyGenPart> >::reference obj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->at((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenPart,allocator<MyGenPart> >::const_reference obj = ((const vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->at((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenPart,allocator<MyGenPart> >::iterator* pobj;
         vector<MyGenPart,allocator<MyGenPart> >::iterator xobj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->begin();
         pobj = new vector<MyGenPart,allocator<MyGenPart> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenPart,allocator<MyGenPart> >::iterator* pobj;
         vector<MyGenPart,allocator<MyGenPart> >::iterator xobj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->end();
         pobj = new vector<MyGenPart,allocator<MyGenPart> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator* pobj;
         vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator xobj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator* pobj;
         vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator xobj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->rend();
         pobj = new vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->resize((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->resize((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]), *((MyGenPart*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyGenPart,allocator<MyGenPart> >::reference obj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->operator[]((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenPart,allocator<MyGenPart> >::const_reference obj = ((const vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->operator[]((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenPart,allocator<MyGenPart> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenPart,allocator<MyGenPart> >[n];
     } else {
       p = new((void*) gvp) vector<MyGenPart,allocator<MyGenPart> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenPart,allocator<MyGenPart> >;
     } else {
       p = new((void*) gvp) vector<MyGenPart,allocator<MyGenPart> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenPart,allocator<MyGenPart> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenPart,allocator<MyGenPart> >((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]), *(MyGenPart*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyGenPart,allocator<MyGenPart> >((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]), *(MyGenPart*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenPart,allocator<MyGenPart> >((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyGenPart,allocator<MyGenPart> >((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenPart,allocator<MyGenPart> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyGenPart,allocator<MyGenPart> >(*(vector<MyGenPart,allocator<MyGenPart> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyGenPart,allocator<MyGenPart> >(*(vector<MyGenPart,allocator<MyGenPart> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenPart,allocator<MyGenPart> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyGenPart,allocator<MyGenPart> >(*((vector<MyGenPart,allocator<MyGenPart> >::const_iterator*) G__int(libp->para[0])), *((vector<MyGenPart,allocator<MyGenPart> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyGenPart,allocator<MyGenPart> >(*((vector<MyGenPart,allocator<MyGenPart> >::const_iterator*) G__int(libp->para[0])), *((vector<MyGenPart,allocator<MyGenPart> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyGenPart,allocator<MyGenPart> >& obj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->operator=(*(vector<MyGenPart,allocator<MyGenPart> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->reserve((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyGenPart& obj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyGenPart& obj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->push_back(*(MyGenPart*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->swap(*(vector<MyGenPart,allocator<MyGenPart> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenPart,allocator<MyGenPart> >::iterator* pobj;
         vector<MyGenPart,allocator<MyGenPart> >::iterator xobj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->insert(*((vector<MyGenPart,allocator<MyGenPart> >::iterator*) G__int(libp->para[0])), *(MyGenPart*) libp->para[1].ref);
         pobj = new vector<MyGenPart,allocator<MyGenPart> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->insert(*((vector<MyGenPart,allocator<MyGenPart> >::iterator*) G__int(libp->para[0])), *((vector<MyGenPart,allocator<MyGenPart> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyGenPart,allocator<MyGenPart> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->insert(*((vector<MyGenPart,allocator<MyGenPart> >::iterator*) G__int(libp->para[0])), (vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[1])
, *(MyGenPart*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->erase(*((vector<MyGenPart,allocator<MyGenPart> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->erase(*((vector<MyGenPart,allocator<MyGenPart> >::iterator*) G__int(libp->para[0])), *((vector<MyGenPart,allocator<MyGenPart> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_239_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyGenPart,allocator<MyGenPart> > G__TvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR;
static int G__eventdict_239_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyGenPart,allocator<MyGenPart> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyGenPart,allocator<MyGenPart> >*) (soff+(sizeof(vector<MyGenPart,allocator<MyGenPart> >)*i)))->~G__TvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyGenPart,allocator<MyGenPart> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyGenPart,allocator<MyGenPart> >*) (soff))->~G__TvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyPUSumInfo */
static int G__eventdict_242_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyPUSumInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyPUSumInfo[n];
     } else {
       p = new((void*) gvp) MyPUSumInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyPUSumInfo;
     } else {
       p = new((void*) gvp) MyPUSumInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyPUSumInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_242_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyPUSumInfo*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_242_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyPUSumInfo*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_242_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyPUSumInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_242_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyPUSumInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_242_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyPUSumInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_242_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyPUSumInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_242_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyPUSumInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_242_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyPUSumInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_242_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyPUSumInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_242_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyPUSumInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_242_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyPUSumInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_242_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyPUSumInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyPUSumInfo(*(MyPUSumInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyPUSumInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyPUSumInfo G__TMyPUSumInfo;
static int G__eventdict_242_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyPUSumInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyPUSumInfo*) (soff+(sizeof(MyPUSumInfo)*i)))->~G__TMyPUSumInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyPUSumInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyPUSumInfo*) (soff))->~G__TMyPUSumInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_242_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyPUSumInfo* dest = (MyPUSumInfo*) G__getstructoffset();
   *dest = *(MyPUSumInfo*) libp->para[0].ref;
   const MyPUSumInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyHLTrig */
static int G__eventdict_482_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyHLTrig* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyHLTrig[n];
     } else {
       p = new((void*) gvp) MyHLTrig[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyHLTrig;
     } else {
       p = new((void*) gvp) MyHLTrig;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyHLTrig));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyHLTrig*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyHLTrig*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyHLTrig::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyHLTrig::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyHLTrig::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyHLTrig::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyHLTrig*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyHLTrig::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyHLTrig::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyHLTrig::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_482_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyHLTrig::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_482_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyHLTrig* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyHLTrig(*(MyHLTrig*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyHLTrig));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyHLTrig G__TMyHLTrig;
static int G__eventdict_482_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyHLTrig*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyHLTrig*) (soff+(sizeof(MyHLTrig)*i)))->~G__TMyHLTrig();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyHLTrig*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyHLTrig*) (soff))->~G__TMyHLTrig();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_482_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyHLTrig* dest = (MyHLTrig*) G__getstructoffset();
   *dest = *(MyHLTrig*) libp->para[0].ref;
   const MyHLTrig& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<string,bool> */
static int G__eventdict_486_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<string,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<string,bool>[n];
     } else {
       p = new((void*) gvp) pair<string,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<string,bool>;
     } else {
       p = new((void*) gvp) pair<string,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_pairlEstringcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_486_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<string,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<string,bool>(*(string*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<string,bool>(*(string*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_pairlEstringcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_486_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<string,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<string,bool>(*(pair<string,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_pairlEstringcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<string,bool> G__TpairlEstringcOboolgR;
static int G__eventdict_486_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<string,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<string,bool>*) (soff+(sizeof(pair<string,bool>)*i)))->~G__TpairlEstringcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<string,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<string,bool>*) (soff))->~G__TpairlEstringcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyL1Trig */
static int G__eventdict_490_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyL1Trig* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyL1Trig[n];
     } else {
       p = new((void*) gvp) MyL1Trig[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyL1Trig;
     } else {
       p = new((void*) gvp) MyL1Trig;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyL1Trig));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyL1Trig*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyL1Trig*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyL1Trig*) G__getstructoffset())->SetPhys(
*((string*) G__int(libp->para[0])), (unsigned int) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (bool) G__int(libp->para[3])
, (bool) G__int(libp->para[4]), (unsigned int) G__int(libp->para[5])
, *((string*) G__int(libp->para[6])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((MyL1Trig*) G__getstructoffset())->GetPhysName((unsigned int) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyL1Trig*) G__getstructoffset())->GetPhysMask((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyL1Trig*) G__getstructoffset())->GetPhysDecisionBefore((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyL1Trig*) G__getstructoffset())->GetPhysDecisionAfter((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((MyL1Trig*) G__getstructoffset())->GetPhysPrescale((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((MyL1Trig*) G__getstructoffset())->GetPhysAlias((unsigned int) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((MyL1Trig*) G__getstructoffset())->GetPhysBit(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyL1Trig*) G__getstructoffset())->GetPhysMaskByName(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyL1Trig*) G__getstructoffset())->GetPhysDecisionBeforeByName(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyL1Trig*) G__getstructoffset())->GetPhysDecisionAfterByName(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((MyL1Trig*) G__getstructoffset())->GetPhysPrescaleByName(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((MyL1Trig*) G__getstructoffset())->GetPhysAliasByName(*(string*) libp->para[0].ref);
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyL1Trig*) G__getstructoffset())->SetTech(
*((string*) G__int(libp->para[0])), (unsigned int) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (bool) G__int(libp->para[3])
, (bool) G__int(libp->para[4]), (unsigned int) G__int(libp->para[5])
, *((string*) G__int(libp->para[6])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((MyL1Trig*) G__getstructoffset())->GetTechName((unsigned int) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyL1Trig*) G__getstructoffset())->GetTechMask((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyL1Trig*) G__getstructoffset())->GetTechDecisionBefore((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyL1Trig*) G__getstructoffset())->GetTechDecisionAfter((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((MyL1Trig*) G__getstructoffset())->GetTechPrescale((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((MyL1Trig*) G__getstructoffset())->GetTechAlias((unsigned int) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((MyL1Trig*) G__getstructoffset())->GetTechBit(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyL1Trig*) G__getstructoffset())->GetTechMaskByName(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyL1Trig*) G__getstructoffset())->GetTechDecisionBeforeByName(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MyL1Trig*) G__getstructoffset())->GetTechDecisionAfterByName(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((MyL1Trig*) G__getstructoffset())->GetTechPrescaleByName(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((MyL1Trig*) G__getstructoffset())->GetTechAliasByName(*(string*) libp->para[0].ref);
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyL1Trig::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyL1Trig::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyL1Trig::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyL1Trig::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyL1Trig*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyL1Trig::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyL1Trig::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyL1Trig::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_490_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyL1Trig::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_490_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyL1Trig* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyL1Trig(*(MyL1Trig*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyL1Trig));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyL1Trig G__TMyL1Trig;
static int G__eventdict_490_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyL1Trig*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyL1Trig*) (soff+(sizeof(MyL1Trig)*i)))->~G__TMyL1Trig();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyL1Trig*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyL1Trig*) (soff))->~G__TMyL1Trig();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_490_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyL1Trig* dest = (MyL1Trig*) G__getstructoffset();
   *dest = *(MyL1Trig*) libp->para[0].ref;
   const MyL1Trig& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyL1TrigOld */
static int G__eventdict_498_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyL1TrigOld* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyL1TrigOld[n];
     } else {
       p = new((void*) gvp) MyL1TrigOld[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyL1TrigOld;
     } else {
       p = new((void*) gvp) MyL1TrigOld;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyL1TrigOld));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyL1TrigOld*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyL1TrigOld*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyL1TrigOld::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyL1TrigOld::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyL1TrigOld::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyL1TrigOld::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyL1TrigOld*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyL1TrigOld::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyL1TrigOld::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyL1TrigOld::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_498_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyL1TrigOld::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_498_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyL1TrigOld* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyL1TrigOld(*(MyL1TrigOld*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyL1TrigOld));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyL1TrigOld G__TMyL1TrigOld;
static int G__eventdict_498_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyL1TrigOld*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyL1TrigOld*) (soff+(sizeof(MyL1TrigOld)*i)))->~G__TMyL1TrigOld();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyL1TrigOld*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyL1TrigOld*) (soff))->~G__TMyL1TrigOld();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_498_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyL1TrigOld* dest = (MyL1TrigOld*) G__getstructoffset();
   *dest = *(MyL1TrigOld*) libp->para[0].ref;
   const MyL1TrigOld& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyMITEvtSel */
static int G__eventdict_499_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyMITEvtSel* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyMITEvtSel[n];
     } else {
       p = new((void*) gvp) MyMITEvtSel[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyMITEvtSel;
     } else {
       p = new((void*) gvp) MyMITEvtSel;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyMITEvtSel));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_499_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyMITEvtSel*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_499_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyMITEvtSel*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_499_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyMITEvtSel::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_499_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyMITEvtSel::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_499_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyMITEvtSel::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_499_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyMITEvtSel::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_499_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyMITEvtSel*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_499_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyMITEvtSel::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_499_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyMITEvtSel::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_499_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyMITEvtSel::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_499_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyMITEvtSel::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_499_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyMITEvtSel* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyMITEvtSel(*(MyMITEvtSel*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyMITEvtSel));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyMITEvtSel G__TMyMITEvtSel;
static int G__eventdict_499_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyMITEvtSel*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyMITEvtSel*) (soff+(sizeof(MyMITEvtSel)*i)))->~G__TMyMITEvtSel();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyMITEvtSel*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyMITEvtSel*) (soff))->~G__TMyMITEvtSel();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_499_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyMITEvtSel* dest = (MyMITEvtSel*) G__getstructoffset();
   *dest = *(MyMITEvtSel*) libp->para[0].ref;
   const MyMITEvtSel& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MySimVertex */
static int G__eventdict_500_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MySimVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MySimVertex[n];
     } else {
       p = new((void*) gvp) MySimVertex[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MySimVertex;
     } else {
       p = new((void*) gvp) MySimVertex;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MySimVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_500_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MySimVertex*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_500_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MySimVertex*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_500_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MySimVertex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_500_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MySimVertex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_500_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MySimVertex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_500_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MySimVertex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_500_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MySimVertex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_500_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MySimVertex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_500_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MySimVertex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_500_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MySimVertex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_500_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MySimVertex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_500_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MySimVertex* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MySimVertex(*(MySimVertex*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MySimVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MySimVertex G__TMySimVertex;
static int G__eventdict_500_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MySimVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MySimVertex*) (soff+(sizeof(MySimVertex)*i)))->~G__TMySimVertex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MySimVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MySimVertex*) (soff))->~G__TMySimVertex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_500_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MySimVertex* dest = (MySimVertex*) G__getstructoffset();
   *dest = *(MySimVertex*) libp->para[0].ref;
   const MySimVertex& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyVertex */
static int G__eventdict_501_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyVertex[n];
     } else {
       p = new((void*) gvp) MyVertex[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyVertex;
     } else {
       p = new((void*) gvp) MyVertex;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_501_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyVertex*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_501_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyVertex*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_501_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MyVertex*) G__getstructoffset())->chi2n());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_501_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyVertex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_501_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyVertex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_501_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyVertex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_501_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyVertex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_501_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyVertex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_501_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyVertex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_501_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyVertex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_501_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyVertex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_501_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyVertex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_501_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyVertex* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyVertex(*(MyVertex*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyVertex G__TMyVertex;
static int G__eventdict_501_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyVertex*) (soff+(sizeof(MyVertex)*i)))->~G__TMyVertex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyVertex*) (soff))->~G__TMyVertex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_501_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyVertex* dest = (MyVertex*) G__getstructoffset();
   *dest = *(MyVertex*) libp->para[0].ref;
   const MyVertex& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyTracks */
static int G__eventdict_502_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyTracks* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyTracks[n];
     } else {
       p = new((void*) gvp) MyTracks[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyTracks;
     } else {
       p = new((void*) gvp) MyTracks;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyTracks));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyTracks*) G__getstructoffset())->nValidTrackerHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MyTracks*) G__getstructoffset())->nValidMuonHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyTracks::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyTracks::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyTracks::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyTracks::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyTracks*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyTracks::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyTracks::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyTracks::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_502_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyTracks::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_502_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyTracks* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyTracks(*(MyTracks*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyTracks));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyTracks G__TMyTracks;
static int G__eventdict_502_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyTracks*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyTracks*) (soff+(sizeof(MyTracks)*i)))->~G__TMyTracks();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyTracks*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyTracks*) (soff))->~G__TMyTracks();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_502_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyTracks* dest = (MyTracks*) G__getstructoffset();
   *dest = *(MyTracks*) libp->para[0].ref;
   const MyTracks& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyElectron */
static int G__eventdict_503_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyElectron* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyElectron[n];
     } else {
       p = new((void*) gvp) MyElectron[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyElectron;
     } else {
       p = new((void*) gvp) MyElectron;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyElectron));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_503_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyElectron::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_503_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyElectron::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_503_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyElectron::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_503_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyElectron::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_503_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyElectron*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_503_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyElectron::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_503_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyElectron::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_503_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyElectron::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_503_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyElectron::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_503_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyElectron* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyElectron(*(MyElectron*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyElectron));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyElectron G__TMyElectron;
static int G__eventdict_503_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyElectron*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyElectron*) (soff+(sizeof(MyElectron)*i)))->~G__TMyElectron();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyElectron*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyElectron*) (soff))->~G__TMyElectron();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_503_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyElectron* dest = (MyElectron*) G__getstructoffset();
   *dest = *(MyElectron*) libp->para[0].ref;
   const MyElectron& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyMuon */
static int G__eventdict_504_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyMuon* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyMuon[n];
     } else {
       p = new((void*) gvp) MyMuon[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyMuon;
     } else {
       p = new((void*) gvp) MyMuon;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyMuon));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_504_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyMuon::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_504_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyMuon::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_504_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyMuon::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_504_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyMuon::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_504_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyMuon*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_504_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyMuon::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_504_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyMuon::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_504_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyMuon::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_504_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyMuon::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_504_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyMuon* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyMuon(*(MyMuon*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyMuon));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyMuon G__TMyMuon;
static int G__eventdict_504_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyMuon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyMuon*) (soff+(sizeof(MyMuon)*i)))->~G__TMyMuon();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyMuon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyMuon*) (soff))->~G__TMyMuon();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_504_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyMuon* dest = (MyMuon*) G__getstructoffset();
   *dest = *(MyMuon*) libp->para[0].ref;
   const MyMuon& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyBaseJet */
static int G__eventdict_505_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyBaseJet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyBaseJet[n];
     } else {
       p = new((void*) gvp) MyBaseJet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyBaseJet;
     } else {
       p = new((void*) gvp) MyBaseJet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyBaseJet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_505_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyBaseJet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_505_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyBaseJet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_505_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyBaseJet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_505_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyBaseJet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_505_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyBaseJet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_505_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyBaseJet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_505_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyBaseJet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_505_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyBaseJet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_505_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyBaseJet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_505_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyBaseJet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyBaseJet(*(MyBaseJet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyBaseJet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyBaseJet G__TMyBaseJet;
static int G__eventdict_505_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyBaseJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyBaseJet*) (soff+(sizeof(MyBaseJet)*i)))->~G__TMyBaseJet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyBaseJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyBaseJet*) (soff))->~G__TMyBaseJet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_505_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyBaseJet* dest = (MyBaseJet*) G__getstructoffset();
   *dest = *(MyBaseJet*) libp->para[0].ref;
   const MyBaseJet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyJet */
static int G__eventdict_513_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyJet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyJet[n];
     } else {
       p = new((void*) gvp) MyJet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyJet;
     } else {
       p = new((void*) gvp) MyJet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyJet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_513_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyJet*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_513_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyJet*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_513_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyJet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_513_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyJet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_513_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyJet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_513_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyJet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_513_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyJet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_513_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyJet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_513_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyJet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_513_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyJet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_513_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyJet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_513_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyJet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyJet(*(MyJet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyJet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyJet G__TMyJet;
static int G__eventdict_513_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyJet*) (soff+(sizeof(MyJet)*i)))->~G__TMyJet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyJet*) (soff))->~G__TMyJet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_513_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyJet* dest = (MyJet*) G__getstructoffset();
   *dest = *(MyJet*) libp->para[0].ref;
   const MyJet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyCaloJet */
static int G__eventdict_514_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCaloJet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCaloJet[n];
     } else {
       p = new((void*) gvp) MyCaloJet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCaloJet;
     } else {
       p = new((void*) gvp) MyCaloJet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyCaloJet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyCaloJet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCaloJet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyCaloJet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyCaloJet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCaloJet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCaloJet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCaloJet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCaloJet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_514_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCaloJet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_514_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyCaloJet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyCaloJet(*(MyCaloJet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyCaloJet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyCaloJet G__TMyCaloJet;
static int G__eventdict_514_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyCaloJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyCaloJet*) (soff+(sizeof(MyCaloJet)*i)))->~G__TMyCaloJet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyCaloJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyCaloJet*) (soff))->~G__TMyCaloJet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_514_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCaloJet* dest = (MyCaloJet*) G__getstructoffset();
   *dest = *(MyCaloJet*) libp->para[0].ref;
   const MyCaloJet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyTrackJet */
static int G__eventdict_515_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyTrackJet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyTrackJet[n];
     } else {
       p = new((void*) gvp) MyTrackJet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyTrackJet;
     } else {
       p = new((void*) gvp) MyTrackJet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyTrackJet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_515_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyTrackJet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_515_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyTrackJet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_515_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyTrackJet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_515_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyTrackJet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_515_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyTrackJet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_515_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyTrackJet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_515_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyTrackJet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_515_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyTrackJet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_515_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyTrackJet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_515_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyTrackJet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyTrackJet(*(MyTrackJet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyTrackJet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyTrackJet G__TMyTrackJet;
static int G__eventdict_515_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyTrackJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyTrackJet*) (soff+(sizeof(MyTrackJet)*i)))->~G__TMyTrackJet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyTrackJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyTrackJet*) (soff))->~G__TMyTrackJet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_515_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyTrackJet* dest = (MyTrackJet*) G__getstructoffset();
   *dest = *(MyTrackJet*) libp->para[0].ref;
   const MyTrackJet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyTracks,allocator<MyTracks> > */
static int G__eventdict_517_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyTracks,allocator<MyTracks> >::reference obj = ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->at((vector<MyTracks,allocator<MyTracks> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTracks,allocator<MyTracks> >::const_reference obj = ((const vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->at((vector<MyTracks,allocator<MyTracks> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTracks,allocator<MyTracks> >::iterator* pobj;
         vector<MyTracks,allocator<MyTracks> >::iterator xobj = ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->begin();
         pobj = new vector<MyTracks,allocator<MyTracks> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTracks,allocator<MyTracks> >::iterator* pobj;
         vector<MyTracks,allocator<MyTracks> >::iterator xobj = ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->end();
         pobj = new vector<MyTracks,allocator<MyTracks> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTracks,allocator<MyTracks> >::reverse_iterator* pobj;
         vector<MyTracks,allocator<MyTracks> >::reverse_iterator xobj = ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyTracks,allocator<MyTracks> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTracks,allocator<MyTracks> >::reverse_iterator* pobj;
         vector<MyTracks,allocator<MyTracks> >::reverse_iterator xobj = ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->rend();
         pobj = new vector<MyTracks,allocator<MyTracks> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->resize((vector<MyTracks,allocator<MyTracks> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->resize((vector<MyTracks,allocator<MyTracks> >::size_type) G__int(libp->para[0]), *((MyTracks*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyTracks,allocator<MyTracks> >::reference obj = ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->operator[]((vector<MyTracks,allocator<MyTracks> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTracks,allocator<MyTracks> >::const_reference obj = ((const vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->operator[]((vector<MyTracks,allocator<MyTracks> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyTracks,allocator<MyTracks> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyTracks,allocator<MyTracks> >[n];
     } else {
       p = new((void*) gvp) vector<MyTracks,allocator<MyTracks> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyTracks,allocator<MyTracks> >;
     } else {
       p = new((void*) gvp) vector<MyTracks,allocator<MyTracks> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyTracks,allocator<MyTracks> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyTracks,allocator<MyTracks> >((vector<MyTracks,allocator<MyTracks> >::size_type) G__int(libp->para[0]), *(MyTracks*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyTracks,allocator<MyTracks> >((vector<MyTracks,allocator<MyTracks> >::size_type) G__int(libp->para[0]), *(MyTracks*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyTracks,allocator<MyTracks> >((vector<MyTracks,allocator<MyTracks> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyTracks,allocator<MyTracks> >((vector<MyTracks,allocator<MyTracks> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyTracks,allocator<MyTracks> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyTracks,allocator<MyTracks> >(*(vector<MyTracks,allocator<MyTracks> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyTracks,allocator<MyTracks> >(*(vector<MyTracks,allocator<MyTracks> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyTracks,allocator<MyTracks> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyTracks,allocator<MyTracks> >(*((vector<MyTracks,allocator<MyTracks> >::const_iterator*) G__int(libp->para[0])), *((vector<MyTracks,allocator<MyTracks> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyTracks,allocator<MyTracks> >(*((vector<MyTracks,allocator<MyTracks> >::const_iterator*) G__int(libp->para[0])), *((vector<MyTracks,allocator<MyTracks> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyTracks,allocator<MyTracks> >& obj = ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->operator=(*(vector<MyTracks,allocator<MyTracks> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->reserve((vector<MyTracks,allocator<MyTracks> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyTracks& obj = ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyTracks& obj = ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->push_back(*(MyTracks*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->swap(*(vector<MyTracks,allocator<MyTracks> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTracks,allocator<MyTracks> >::iterator* pobj;
         vector<MyTracks,allocator<MyTracks> >::iterator xobj = ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->insert(*((vector<MyTracks,allocator<MyTracks> >::iterator*) G__int(libp->para[0])), *(MyTracks*) libp->para[1].ref);
         pobj = new vector<MyTracks,allocator<MyTracks> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->insert(*((vector<MyTracks,allocator<MyTracks> >::iterator*) G__int(libp->para[0])), *((vector<MyTracks,allocator<MyTracks> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyTracks,allocator<MyTracks> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->insert(*((vector<MyTracks,allocator<MyTracks> >::iterator*) G__int(libp->para[0])), (vector<MyTracks,allocator<MyTracks> >::size_type) G__int(libp->para[1])
, *(MyTracks*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->erase(*((vector<MyTracks,allocator<MyTracks> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->erase(*((vector<MyTracks,allocator<MyTracks> >::iterator*) G__int(libp->para[0])), *((vector<MyTracks,allocator<MyTracks> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_517_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyTracks,allocator<MyTracks> > G__TvectorlEMyTrackscOallocatorlEMyTracksgRsPgR;
static int G__eventdict_517_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyTracks,allocator<MyTracks> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyTracks,allocator<MyTracks> >*) (soff+(sizeof(vector<MyTracks,allocator<MyTracks> >)*i)))->~G__TvectorlEMyTrackscOallocatorlEMyTracksgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyTracks,allocator<MyTracks> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyTracks,allocator<MyTracks> >*) (soff))->~G__TvectorlEMyTrackscOallocatorlEMyTracksgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyPFJet */
static int G__eventdict_520_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyPFJet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyPFJet[n];
     } else {
       p = new((void*) gvp) MyPFJet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyPFJet;
     } else {
       p = new((void*) gvp) MyPFJet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyPFJet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_520_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyPFJet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_520_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyPFJet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_520_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyPFJet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_520_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyPFJet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_520_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyPFJet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_520_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyPFJet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_520_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyPFJet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_520_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyPFJet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_520_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyPFJet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_520_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyPFJet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyPFJet(*(MyPFJet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyPFJet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyPFJet G__TMyPFJet;
static int G__eventdict_520_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyPFJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyPFJet*) (soff+(sizeof(MyPFJet)*i)))->~G__TMyPFJet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyPFJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyPFJet*) (soff))->~G__TMyPFJet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_520_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyPFJet* dest = (MyPFJet*) G__getstructoffset();
   *dest = *(MyPFJet*) libp->para[0].ref;
   const MyPFJet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyPFCand */
static int G__eventdict_521_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyPFCand* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyPFCand[n];
     } else {
       p = new((void*) gvp) MyPFCand[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyPFCand;
     } else {
       p = new((void*) gvp) MyPFCand;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyPFCand));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_521_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyPFCand::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_521_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyPFCand::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_521_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyPFCand::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_521_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyPFCand::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_521_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyPFCand*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_521_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyPFCand::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_521_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyPFCand::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_521_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyPFCand::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_521_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyPFCand::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_521_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyPFCand* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyPFCand(*(MyPFCand*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyPFCand));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyPFCand G__TMyPFCand;
static int G__eventdict_521_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyPFCand*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyPFCand*) (soff+(sizeof(MyPFCand)*i)))->~G__TMyPFCand();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyPFCand*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyPFCand*) (soff))->~G__TMyPFCand();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_521_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyPFCand* dest = (MyPFCand*) G__getstructoffset();
   *dest = *(MyPFCand*) libp->para[0].ref;
   const MyPFCand& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyCaloTower */
static int G__eventdict_523_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCaloTower* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCaloTower[n];
     } else {
       p = new((void*) gvp) MyCaloTower[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyCaloTower;
     } else {
       p = new((void*) gvp) MyCaloTower;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyCaloTower));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyCaloTower::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCaloTower::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyCaloTower::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyCaloTower::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyCaloTower*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCaloTower::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCaloTower::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyCaloTower::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_523_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyCaloTower::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_523_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyCaloTower* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyCaloTower(*(MyCaloTower*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyCaloTower));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyCaloTower G__TMyCaloTower;
static int G__eventdict_523_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyCaloTower*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyCaloTower*) (soff+(sizeof(MyCaloTower)*i)))->~G__TMyCaloTower();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyCaloTower*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyCaloTower*) (soff))->~G__TMyCaloTower();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_523_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyCaloTower* dest = (MyCaloTower*) G__getstructoffset();
   *dest = *(MyCaloTower*) libp->para[0].ref;
   const MyCaloTower& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyZDCHit */
static int G__eventdict_524_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyZDCHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyZDCHit[n];
     } else {
       p = new((void*) gvp) MyZDCHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyZDCHit;
     } else {
       p = new((void*) gvp) MyZDCHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyZDCHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_524_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyZDCHit*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_524_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyZDCHit*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_524_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyZDCHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_524_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyZDCHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_524_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyZDCHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_524_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyZDCHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_524_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyZDCHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_524_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyZDCHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_524_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyZDCHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_524_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyZDCHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_524_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyZDCHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_524_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyZDCHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyZDCHit(*(MyZDCHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyZDCHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyZDCHit G__TMyZDCHit;
static int G__eventdict_524_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyZDCHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyZDCHit*) (soff+(sizeof(MyZDCHit)*i)))->~G__TMyZDCHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyZDCHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyZDCHit*) (soff))->~G__TMyZDCHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_524_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyZDCHit* dest = (MyZDCHit*) G__getstructoffset();
   *dest = *(MyZDCHit*) libp->para[0].ref;
   const MyZDCHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyZDCDigi */
static int G__eventdict_525_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyZDCDigi* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyZDCDigi[n];
     } else {
       p = new((void*) gvp) MyZDCDigi[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyZDCDigi;
     } else {
       p = new((void*) gvp) MyZDCDigi;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyZDCDigi));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_525_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyZDCDigi*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_525_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyZDCDigi*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_525_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyZDCDigi::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_525_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyZDCDigi::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_525_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyZDCDigi::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_525_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyZDCDigi::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_525_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyZDCDigi*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_525_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyZDCDigi::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_525_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyZDCDigi::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_525_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyZDCDigi::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_525_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyZDCDigi::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_525_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyZDCDigi* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyZDCDigi(*(MyZDCDigi*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyZDCDigi));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyZDCDigi G__TMyZDCDigi;
static int G__eventdict_525_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyZDCDigi*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyZDCDigi*) (soff+(sizeof(MyZDCDigi)*i)))->~G__TMyZDCDigi();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyZDCDigi*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyZDCDigi*) (soff))->~G__TMyZDCDigi();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_525_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyZDCDigi* dest = (MyZDCDigi*) G__getstructoffset();
   *dest = *(MyZDCDigi*) libp->para[0].ref;
   const MyZDCDigi& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyZDCInfo */
static int G__eventdict_526_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyZDCInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyZDCInfo[n];
     } else {
       p = new((void*) gvp) MyZDCInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyZDCInfo;
     } else {
       p = new((void*) gvp) MyZDCInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyZDCInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_526_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyZDCInfo*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_526_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyZDCInfo*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_526_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyZDCInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_526_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyZDCInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_526_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyZDCInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_526_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyZDCInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_526_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyZDCInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_526_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyZDCInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_526_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyZDCInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_526_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyZDCInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_526_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyZDCInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_526_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyZDCInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyZDCInfo(*(MyZDCInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyZDCInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyZDCInfo G__TMyZDCInfo;
static int G__eventdict_526_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyZDCInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyZDCInfo*) (soff+(sizeof(MyZDCInfo)*i)))->~G__TMyZDCInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyZDCInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyZDCInfo*) (soff))->~G__TMyZDCInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_526_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyZDCInfo* dest = (MyZDCInfo*) G__getstructoffset();
   *dest = *(MyZDCInfo*) libp->para[0].ref;
   const MyZDCInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyFSCHit */
static int G__eventdict_534_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyFSCHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyFSCHit[n];
     } else {
       p = new((void*) gvp) MyFSCHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyFSCHit;
     } else {
       p = new((void*) gvp) MyFSCHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyFSCHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_534_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyFSCHit*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_534_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyFSCHit*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_534_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyFSCHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_534_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyFSCHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_534_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyFSCHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_534_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyFSCHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_534_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyFSCHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_534_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyFSCHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_534_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyFSCHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_534_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyFSCHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_534_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyFSCHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_534_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyFSCHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyFSCHit(*(MyFSCHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyFSCHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyFSCHit G__TMyFSCHit;
static int G__eventdict_534_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyFSCHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyFSCHit*) (soff+(sizeof(MyFSCHit)*i)))->~G__TMyFSCHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyFSCHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyFSCHit*) (soff))->~G__TMyFSCHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_534_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyFSCHit* dest = (MyFSCHit*) G__getstructoffset();
   *dest = *(MyFSCHit*) libp->para[0].ref;
   const MyFSCHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyFSCDigi */
static int G__eventdict_535_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyFSCDigi* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyFSCDigi[n];
     } else {
       p = new((void*) gvp) MyFSCDigi[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyFSCDigi;
     } else {
       p = new((void*) gvp) MyFSCDigi;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyFSCDigi));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyFSCDigi*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyFSCDigi*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyFSCDigi::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyFSCDigi::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyFSCDigi::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyFSCDigi::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyFSCDigi*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyFSCDigi::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyFSCDigi::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyFSCDigi::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_535_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyFSCDigi::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_535_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyFSCDigi* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyFSCDigi(*(MyFSCDigi*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyFSCDigi));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyFSCDigi G__TMyFSCDigi;
static int G__eventdict_535_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyFSCDigi*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyFSCDigi*) (soff+(sizeof(MyFSCDigi)*i)))->~G__TMyFSCDigi();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyFSCDigi*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyFSCDigi*) (soff))->~G__TMyFSCDigi();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_535_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyFSCDigi* dest = (MyFSCDigi*) G__getstructoffset();
   *dest = *(MyFSCDigi*) libp->para[0].ref;
   const MyFSCDigi& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyFSCInfo */
static int G__eventdict_536_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyFSCInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyFSCInfo[n];
     } else {
       p = new((void*) gvp) MyFSCInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyFSCInfo;
     } else {
       p = new((void*) gvp) MyFSCInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyFSCInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_536_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyFSCInfo*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_536_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyFSCInfo*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_536_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyFSCInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_536_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyFSCInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_536_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyFSCInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_536_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyFSCInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_536_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyFSCInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_536_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyFSCInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_536_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyFSCInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_536_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyFSCInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_536_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyFSCInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_536_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyFSCInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyFSCInfo(*(MyFSCInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyFSCInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyFSCInfo G__TMyFSCInfo;
static int G__eventdict_536_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyFSCInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyFSCInfo*) (soff+(sizeof(MyFSCInfo)*i)))->~G__TMyFSCInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyFSCInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyFSCInfo*) (soff))->~G__TMyFSCInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_536_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyFSCInfo* dest = (MyFSCInfo*) G__getstructoffset();
   *dest = *(MyFSCInfo*) libp->para[0].ref;
   const MyFSCInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyBeamSpot,allocator<MyBeamSpot> > */
static int G__eventdict_538_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyBeamSpot,allocator<MyBeamSpot> >::reference obj = ((vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->at((vector<MyBeamSpot,allocator<MyBeamSpot> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyBeamSpot,allocator<MyBeamSpot> >::const_reference obj = ((const vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->at((vector<MyBeamSpot,allocator<MyBeamSpot> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator* pobj;
         vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator xobj = ((vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->begin();
         pobj = new vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator* pobj;
         vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator xobj = ((vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->end();
         pobj = new vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyBeamSpot,allocator<MyBeamSpot> >::reverse_iterator* pobj;
         vector<MyBeamSpot,allocator<MyBeamSpot> >::reverse_iterator xobj = ((vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyBeamSpot,allocator<MyBeamSpot> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyBeamSpot,allocator<MyBeamSpot> >::reverse_iterator* pobj;
         vector<MyBeamSpot,allocator<MyBeamSpot> >::reverse_iterator xobj = ((vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->rend();
         pobj = new vector<MyBeamSpot,allocator<MyBeamSpot> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->resize((vector<MyBeamSpot,allocator<MyBeamSpot> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->resize((vector<MyBeamSpot,allocator<MyBeamSpot> >::size_type) G__int(libp->para[0]), *((MyBeamSpot*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyBeamSpot,allocator<MyBeamSpot> >::reference obj = ((vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->operator[]((vector<MyBeamSpot,allocator<MyBeamSpot> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyBeamSpot,allocator<MyBeamSpot> >::const_reference obj = ((const vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->operator[]((vector<MyBeamSpot,allocator<MyBeamSpot> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyBeamSpot,allocator<MyBeamSpot> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyBeamSpot,allocator<MyBeamSpot> >[n];
     } else {
       p = new((void*) gvp) vector<MyBeamSpot,allocator<MyBeamSpot> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyBeamSpot,allocator<MyBeamSpot> >;
     } else {
       p = new((void*) gvp) vector<MyBeamSpot,allocator<MyBeamSpot> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyBeamSpot,allocator<MyBeamSpot> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyBeamSpot,allocator<MyBeamSpot> >((vector<MyBeamSpot,allocator<MyBeamSpot> >::size_type) G__int(libp->para[0]), *(MyBeamSpot*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyBeamSpot,allocator<MyBeamSpot> >((vector<MyBeamSpot,allocator<MyBeamSpot> >::size_type) G__int(libp->para[0]), *(MyBeamSpot*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyBeamSpot,allocator<MyBeamSpot> >((vector<MyBeamSpot,allocator<MyBeamSpot> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyBeamSpot,allocator<MyBeamSpot> >((vector<MyBeamSpot,allocator<MyBeamSpot> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyBeamSpot,allocator<MyBeamSpot> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyBeamSpot,allocator<MyBeamSpot> >(*(vector<MyBeamSpot,allocator<MyBeamSpot> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyBeamSpot,allocator<MyBeamSpot> >(*(vector<MyBeamSpot,allocator<MyBeamSpot> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyBeamSpot,allocator<MyBeamSpot> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyBeamSpot,allocator<MyBeamSpot> >(*((vector<MyBeamSpot,allocator<MyBeamSpot> >::const_iterator*) G__int(libp->para[0])), *((vector<MyBeamSpot,allocator<MyBeamSpot> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyBeamSpot,allocator<MyBeamSpot> >(*((vector<MyBeamSpot,allocator<MyBeamSpot> >::const_iterator*) G__int(libp->para[0])), *((vector<MyBeamSpot,allocator<MyBeamSpot> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyBeamSpot,allocator<MyBeamSpot> >& obj = ((vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->operator=(*(vector<MyBeamSpot,allocator<MyBeamSpot> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->reserve((vector<MyBeamSpot,allocator<MyBeamSpot> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyBeamSpot& obj = ((vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyBeamSpot& obj = ((vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->push_back(*(MyBeamSpot*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->swap(*(vector<MyBeamSpot,allocator<MyBeamSpot> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator* pobj;
         vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator xobj = ((vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->insert(*((vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator*) G__int(libp->para[0])), *(MyBeamSpot*) libp->para[1].ref);
         pobj = new vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->insert(*((vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator*) G__int(libp->para[0])), *((vector<MyBeamSpot,allocator<MyBeamSpot> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyBeamSpot,allocator<MyBeamSpot> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->insert(*((vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator*) G__int(libp->para[0])), (vector<MyBeamSpot,allocator<MyBeamSpot> >::size_type) G__int(libp->para[1])
, *(MyBeamSpot*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->erase(*((vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->erase(*((vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator*) G__int(libp->para[0])), *((vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_538_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyBeamSpot,allocator<MyBeamSpot> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyBeamSpot,allocator<MyBeamSpot> > G__TvectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR;
static int G__eventdict_538_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyBeamSpot,allocator<MyBeamSpot> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyBeamSpot,allocator<MyBeamSpot> >*) (soff+(sizeof(vector<MyBeamSpot,allocator<MyBeamSpot> >)*i)))->~G__TvectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyBeamSpot,allocator<MyBeamSpot> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyBeamSpot,allocator<MyBeamSpot> >*) (soff))->~G__TvectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyCastorDigi,allocator<MyCastorDigi> > */
static int G__eventdict_542_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyCastorDigi,allocator<MyCastorDigi> >::reference obj = ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->at((vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorDigi,allocator<MyCastorDigi> >::const_reference obj = ((const vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->at((vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator* pobj;
         vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator xobj = ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->begin();
         pobj = new vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator* pobj;
         vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator xobj = ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->end();
         pobj = new vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorDigi,allocator<MyCastorDigi> >::reverse_iterator* pobj;
         vector<MyCastorDigi,allocator<MyCastorDigi> >::reverse_iterator xobj = ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyCastorDigi,allocator<MyCastorDigi> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorDigi,allocator<MyCastorDigi> >::reverse_iterator* pobj;
         vector<MyCastorDigi,allocator<MyCastorDigi> >::reverse_iterator xobj = ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->rend();
         pobj = new vector<MyCastorDigi,allocator<MyCastorDigi> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->resize((vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->resize((vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type) G__int(libp->para[0]), *((MyCastorDigi*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyCastorDigi,allocator<MyCastorDigi> >::reference obj = ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->operator[]((vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorDigi,allocator<MyCastorDigi> >::const_reference obj = ((const vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->operator[]((vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorDigi,allocator<MyCastorDigi> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorDigi,allocator<MyCastorDigi> >[n];
     } else {
       p = new((void*) gvp) vector<MyCastorDigi,allocator<MyCastorDigi> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorDigi,allocator<MyCastorDigi> >;
     } else {
       p = new((void*) gvp) vector<MyCastorDigi,allocator<MyCastorDigi> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorDigi,allocator<MyCastorDigi> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorDigi,allocator<MyCastorDigi> >((vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type) G__int(libp->para[0]), *(MyCastorDigi*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyCastorDigi,allocator<MyCastorDigi> >((vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type) G__int(libp->para[0]), *(MyCastorDigi*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorDigi,allocator<MyCastorDigi> >((vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyCastorDigi,allocator<MyCastorDigi> >((vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorDigi,allocator<MyCastorDigi> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyCastorDigi,allocator<MyCastorDigi> >(*(vector<MyCastorDigi,allocator<MyCastorDigi> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyCastorDigi,allocator<MyCastorDigi> >(*(vector<MyCastorDigi,allocator<MyCastorDigi> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorDigi,allocator<MyCastorDigi> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyCastorDigi,allocator<MyCastorDigi> >(*((vector<MyCastorDigi,allocator<MyCastorDigi> >::const_iterator*) G__int(libp->para[0])), *((vector<MyCastorDigi,allocator<MyCastorDigi> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyCastorDigi,allocator<MyCastorDigi> >(*((vector<MyCastorDigi,allocator<MyCastorDigi> >::const_iterator*) G__int(libp->para[0])), *((vector<MyCastorDigi,allocator<MyCastorDigi> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyCastorDigi,allocator<MyCastorDigi> >& obj = ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->operator=(*(vector<MyCastorDigi,allocator<MyCastorDigi> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->reserve((vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCastorDigi& obj = ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCastorDigi& obj = ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->push_back(*(MyCastorDigi*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->swap(*(vector<MyCastorDigi,allocator<MyCastorDigi> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator* pobj;
         vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator xobj = ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->insert(*((vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator*) G__int(libp->para[0])), *(MyCastorDigi*) libp->para[1].ref);
         pobj = new vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->insert(*((vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator*) G__int(libp->para[0])), *((vector<MyCastorDigi,allocator<MyCastorDigi> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyCastorDigi,allocator<MyCastorDigi> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->insert(*((vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator*) G__int(libp->para[0])), (vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type) G__int(libp->para[1])
, *(MyCastorDigi*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->erase(*((vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->erase(*((vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator*) G__int(libp->para[0])), *((vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_542_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyCastorDigi,allocator<MyCastorDigi> > G__TvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR;
static int G__eventdict_542_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyCastorDigi,allocator<MyCastorDigi> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) (soff+(sizeof(vector<MyCastorDigi,allocator<MyCastorDigi> >)*i)))->~G__TvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyCastorDigi,allocator<MyCastorDigi> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyCastorDigi,allocator<MyCastorDigi> >*) (soff))->~G__TvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyCastorJet,allocator<MyCastorJet> > */
static int G__eventdict_546_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyCastorJet,allocator<MyCastorJet> >::reference obj = ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->at((vector<MyCastorJet,allocator<MyCastorJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorJet,allocator<MyCastorJet> >::const_reference obj = ((const vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->at((vector<MyCastorJet,allocator<MyCastorJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorJet,allocator<MyCastorJet> >::iterator* pobj;
         vector<MyCastorJet,allocator<MyCastorJet> >::iterator xobj = ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->begin();
         pobj = new vector<MyCastorJet,allocator<MyCastorJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorJet,allocator<MyCastorJet> >::iterator* pobj;
         vector<MyCastorJet,allocator<MyCastorJet> >::iterator xobj = ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->end();
         pobj = new vector<MyCastorJet,allocator<MyCastorJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorJet,allocator<MyCastorJet> >::reverse_iterator* pobj;
         vector<MyCastorJet,allocator<MyCastorJet> >::reverse_iterator xobj = ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyCastorJet,allocator<MyCastorJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorJet,allocator<MyCastorJet> >::reverse_iterator* pobj;
         vector<MyCastorJet,allocator<MyCastorJet> >::reverse_iterator xobj = ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->rend();
         pobj = new vector<MyCastorJet,allocator<MyCastorJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->resize((vector<MyCastorJet,allocator<MyCastorJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->resize((vector<MyCastorJet,allocator<MyCastorJet> >::size_type) G__int(libp->para[0]), *((MyCastorJet*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyCastorJet,allocator<MyCastorJet> >::reference obj = ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->operator[]((vector<MyCastorJet,allocator<MyCastorJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorJet,allocator<MyCastorJet> >::const_reference obj = ((const vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->operator[]((vector<MyCastorJet,allocator<MyCastorJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorJet,allocator<MyCastorJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorJet,allocator<MyCastorJet> >[n];
     } else {
       p = new((void*) gvp) vector<MyCastorJet,allocator<MyCastorJet> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorJet,allocator<MyCastorJet> >;
     } else {
       p = new((void*) gvp) vector<MyCastorJet,allocator<MyCastorJet> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorJet,allocator<MyCastorJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorJet,allocator<MyCastorJet> >((vector<MyCastorJet,allocator<MyCastorJet> >::size_type) G__int(libp->para[0]), *(MyCastorJet*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyCastorJet,allocator<MyCastorJet> >((vector<MyCastorJet,allocator<MyCastorJet> >::size_type) G__int(libp->para[0]), *(MyCastorJet*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorJet,allocator<MyCastorJet> >((vector<MyCastorJet,allocator<MyCastorJet> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyCastorJet,allocator<MyCastorJet> >((vector<MyCastorJet,allocator<MyCastorJet> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorJet,allocator<MyCastorJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyCastorJet,allocator<MyCastorJet> >(*(vector<MyCastorJet,allocator<MyCastorJet> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyCastorJet,allocator<MyCastorJet> >(*(vector<MyCastorJet,allocator<MyCastorJet> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorJet,allocator<MyCastorJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyCastorJet,allocator<MyCastorJet> >(*((vector<MyCastorJet,allocator<MyCastorJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyCastorJet,allocator<MyCastorJet> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyCastorJet,allocator<MyCastorJet> >(*((vector<MyCastorJet,allocator<MyCastorJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyCastorJet,allocator<MyCastorJet> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyCastorJet,allocator<MyCastorJet> >& obj = ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->operator=(*(vector<MyCastorJet,allocator<MyCastorJet> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->reserve((vector<MyCastorJet,allocator<MyCastorJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCastorJet& obj = ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCastorJet& obj = ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->push_back(*(MyCastorJet*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->swap(*(vector<MyCastorJet,allocator<MyCastorJet> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorJet,allocator<MyCastorJet> >::iterator* pobj;
         vector<MyCastorJet,allocator<MyCastorJet> >::iterator xobj = ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->insert(*((vector<MyCastorJet,allocator<MyCastorJet> >::iterator*) G__int(libp->para[0])), *(MyCastorJet*) libp->para[1].ref);
         pobj = new vector<MyCastorJet,allocator<MyCastorJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->insert(*((vector<MyCastorJet,allocator<MyCastorJet> >::iterator*) G__int(libp->para[0])), *((vector<MyCastorJet,allocator<MyCastorJet> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyCastorJet,allocator<MyCastorJet> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->insert(*((vector<MyCastorJet,allocator<MyCastorJet> >::iterator*) G__int(libp->para[0])), (vector<MyCastorJet,allocator<MyCastorJet> >::size_type) G__int(libp->para[1])
, *(MyCastorJet*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->erase(*((vector<MyCastorJet,allocator<MyCastorJet> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->erase(*((vector<MyCastorJet,allocator<MyCastorJet> >::iterator*) G__int(libp->para[0])), *((vector<MyCastorJet,allocator<MyCastorJet> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_546_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorJet,allocator<MyCastorJet> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyCastorJet,allocator<MyCastorJet> > G__TvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR;
static int G__eventdict_546_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyCastorJet,allocator<MyCastorJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyCastorJet,allocator<MyCastorJet> >*) (soff+(sizeof(vector<MyCastorJet,allocator<MyCastorJet> >)*i)))->~G__TvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyCastorJet,allocator<MyCastorJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyCastorJet,allocator<MyCastorJet> >*) (soff))->~G__TvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyCastorRecHit,allocator<MyCastorRecHit> > */
static int G__eventdict_550_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyCastorRecHit,allocator<MyCastorRecHit> >::reference obj = ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->at((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorRecHit,allocator<MyCastorRecHit> >::const_reference obj = ((const vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->at((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator* pobj;
         vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator xobj = ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->begin();
         pobj = new vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator* pobj;
         vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator xobj = ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->end();
         pobj = new vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorRecHit,allocator<MyCastorRecHit> >::reverse_iterator* pobj;
         vector<MyCastorRecHit,allocator<MyCastorRecHit> >::reverse_iterator xobj = ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyCastorRecHit,allocator<MyCastorRecHit> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorRecHit,allocator<MyCastorRecHit> >::reverse_iterator* pobj;
         vector<MyCastorRecHit,allocator<MyCastorRecHit> >::reverse_iterator xobj = ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->rend();
         pobj = new vector<MyCastorRecHit,allocator<MyCastorRecHit> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->resize((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->resize((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type) G__int(libp->para[0]), *((MyCastorRecHit*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyCastorRecHit,allocator<MyCastorRecHit> >::reference obj = ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->operator[]((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorRecHit,allocator<MyCastorRecHit> >::const_reference obj = ((const vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->operator[]((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorRecHit,allocator<MyCastorRecHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorRecHit,allocator<MyCastorRecHit> >[n];
     } else {
       p = new((void*) gvp) vector<MyCastorRecHit,allocator<MyCastorRecHit> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorRecHit,allocator<MyCastorRecHit> >;
     } else {
       p = new((void*) gvp) vector<MyCastorRecHit,allocator<MyCastorRecHit> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorRecHit,allocator<MyCastorRecHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorRecHit,allocator<MyCastorRecHit> >((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type) G__int(libp->para[0]), *(MyCastorRecHit*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyCastorRecHit,allocator<MyCastorRecHit> >((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type) G__int(libp->para[0]), *(MyCastorRecHit*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCastorRecHit,allocator<MyCastorRecHit> >((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyCastorRecHit,allocator<MyCastorRecHit> >((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorRecHit,allocator<MyCastorRecHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyCastorRecHit,allocator<MyCastorRecHit> >(*(vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyCastorRecHit,allocator<MyCastorRecHit> >(*(vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCastorRecHit,allocator<MyCastorRecHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyCastorRecHit,allocator<MyCastorRecHit> >(*((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::const_iterator*) G__int(libp->para[0])), *((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyCastorRecHit,allocator<MyCastorRecHit> >(*((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::const_iterator*) G__int(libp->para[0])), *((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyCastorRecHit,allocator<MyCastorRecHit> >& obj = ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->operator=(*(vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->reserve((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCastorRecHit& obj = ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCastorRecHit& obj = ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->push_back(*(MyCastorRecHit*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->swap(*(vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator* pobj;
         vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator xobj = ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->insert(*((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator*) G__int(libp->para[0])), *(MyCastorRecHit*) libp->para[1].ref);
         pobj = new vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->insert(*((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator*) G__int(libp->para[0])), *((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->insert(*((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator*) G__int(libp->para[0])), (vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type) G__int(libp->para[1])
, *(MyCastorRecHit*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->erase(*((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->erase(*((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator*) G__int(libp->para[0])), *((vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_550_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyCastorRecHit,allocator<MyCastorRecHit> > G__TvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR;
static int G__eventdict_550_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) (soff+(sizeof(vector<MyCastorRecHit,allocator<MyCastorRecHit> >)*i)))->~G__TvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyCastorRecHit,allocator<MyCastorRecHit> >*) (soff))->~G__TvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyDiJet,allocator<MyDiJet> > */
static int G__eventdict_554_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyDiJet,allocator<MyDiJet> >::reference obj = ((vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->at((vector<MyDiJet,allocator<MyDiJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyDiJet,allocator<MyDiJet> >::const_reference obj = ((const vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->at((vector<MyDiJet,allocator<MyDiJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyDiJet,allocator<MyDiJet> >::iterator* pobj;
         vector<MyDiJet,allocator<MyDiJet> >::iterator xobj = ((vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->begin();
         pobj = new vector<MyDiJet,allocator<MyDiJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyDiJet,allocator<MyDiJet> >::iterator* pobj;
         vector<MyDiJet,allocator<MyDiJet> >::iterator xobj = ((vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->end();
         pobj = new vector<MyDiJet,allocator<MyDiJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyDiJet,allocator<MyDiJet> >::reverse_iterator* pobj;
         vector<MyDiJet,allocator<MyDiJet> >::reverse_iterator xobj = ((vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyDiJet,allocator<MyDiJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyDiJet,allocator<MyDiJet> >::reverse_iterator* pobj;
         vector<MyDiJet,allocator<MyDiJet> >::reverse_iterator xobj = ((vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->rend();
         pobj = new vector<MyDiJet,allocator<MyDiJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->resize((vector<MyDiJet,allocator<MyDiJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->resize((vector<MyDiJet,allocator<MyDiJet> >::size_type) G__int(libp->para[0]), *((MyDiJet*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyDiJet,allocator<MyDiJet> >::reference obj = ((vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->operator[]((vector<MyDiJet,allocator<MyDiJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyDiJet,allocator<MyDiJet> >::const_reference obj = ((const vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->operator[]((vector<MyDiJet,allocator<MyDiJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyDiJet,allocator<MyDiJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyDiJet,allocator<MyDiJet> >[n];
     } else {
       p = new((void*) gvp) vector<MyDiJet,allocator<MyDiJet> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyDiJet,allocator<MyDiJet> >;
     } else {
       p = new((void*) gvp) vector<MyDiJet,allocator<MyDiJet> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyDiJet,allocator<MyDiJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyDiJet,allocator<MyDiJet> >((vector<MyDiJet,allocator<MyDiJet> >::size_type) G__int(libp->para[0]), *(MyDiJet*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyDiJet,allocator<MyDiJet> >((vector<MyDiJet,allocator<MyDiJet> >::size_type) G__int(libp->para[0]), *(MyDiJet*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyDiJet,allocator<MyDiJet> >((vector<MyDiJet,allocator<MyDiJet> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyDiJet,allocator<MyDiJet> >((vector<MyDiJet,allocator<MyDiJet> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyDiJet,allocator<MyDiJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyDiJet,allocator<MyDiJet> >(*(vector<MyDiJet,allocator<MyDiJet> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyDiJet,allocator<MyDiJet> >(*(vector<MyDiJet,allocator<MyDiJet> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyDiJet,allocator<MyDiJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyDiJet,allocator<MyDiJet> >(*((vector<MyDiJet,allocator<MyDiJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyDiJet,allocator<MyDiJet> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyDiJet,allocator<MyDiJet> >(*((vector<MyDiJet,allocator<MyDiJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyDiJet,allocator<MyDiJet> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyDiJet,allocator<MyDiJet> >& obj = ((vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->operator=(*(vector<MyDiJet,allocator<MyDiJet> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->reserve((vector<MyDiJet,allocator<MyDiJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyDiJet& obj = ((vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyDiJet& obj = ((vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->push_back(*(MyDiJet*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->swap(*(vector<MyDiJet,allocator<MyDiJet> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyDiJet,allocator<MyDiJet> >::iterator* pobj;
         vector<MyDiJet,allocator<MyDiJet> >::iterator xobj = ((vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->insert(*((vector<MyDiJet,allocator<MyDiJet> >::iterator*) G__int(libp->para[0])), *(MyDiJet*) libp->para[1].ref);
         pobj = new vector<MyDiJet,allocator<MyDiJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->insert(*((vector<MyDiJet,allocator<MyDiJet> >::iterator*) G__int(libp->para[0])), *((vector<MyDiJet,allocator<MyDiJet> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyDiJet,allocator<MyDiJet> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->insert(*((vector<MyDiJet,allocator<MyDiJet> >::iterator*) G__int(libp->para[0])), (vector<MyDiJet,allocator<MyDiJet> >::size_type) G__int(libp->para[1])
, *(MyDiJet*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->erase(*((vector<MyDiJet,allocator<MyDiJet> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->erase(*((vector<MyDiJet,allocator<MyDiJet> >::iterator*) G__int(libp->para[0])), *((vector<MyDiJet,allocator<MyDiJet> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_554_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyDiJet,allocator<MyDiJet> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyDiJet,allocator<MyDiJet> > G__TvectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR;
static int G__eventdict_554_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyDiJet,allocator<MyDiJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyDiJet,allocator<MyDiJet> >*) (soff+(sizeof(vector<MyDiJet,allocator<MyDiJet> >)*i)))->~G__TvectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyDiJet,allocator<MyDiJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyDiJet,allocator<MyDiJet> >*) (soff))->~G__TvectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyEvtId,allocator<MyEvtId> > */
static int G__eventdict_558_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyEvtId,allocator<MyEvtId> >::reference obj = ((vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->at((vector<MyEvtId,allocator<MyEvtId> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyEvtId,allocator<MyEvtId> >::const_reference obj = ((const vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->at((vector<MyEvtId,allocator<MyEvtId> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyEvtId,allocator<MyEvtId> >::iterator* pobj;
         vector<MyEvtId,allocator<MyEvtId> >::iterator xobj = ((vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->begin();
         pobj = new vector<MyEvtId,allocator<MyEvtId> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyEvtId,allocator<MyEvtId> >::iterator* pobj;
         vector<MyEvtId,allocator<MyEvtId> >::iterator xobj = ((vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->end();
         pobj = new vector<MyEvtId,allocator<MyEvtId> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyEvtId,allocator<MyEvtId> >::reverse_iterator* pobj;
         vector<MyEvtId,allocator<MyEvtId> >::reverse_iterator xobj = ((vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyEvtId,allocator<MyEvtId> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyEvtId,allocator<MyEvtId> >::reverse_iterator* pobj;
         vector<MyEvtId,allocator<MyEvtId> >::reverse_iterator xobj = ((vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->rend();
         pobj = new vector<MyEvtId,allocator<MyEvtId> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->resize((vector<MyEvtId,allocator<MyEvtId> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->resize((vector<MyEvtId,allocator<MyEvtId> >::size_type) G__int(libp->para[0]), *((MyEvtId*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyEvtId,allocator<MyEvtId> >::reference obj = ((vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->operator[]((vector<MyEvtId,allocator<MyEvtId> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyEvtId,allocator<MyEvtId> >::const_reference obj = ((const vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->operator[]((vector<MyEvtId,allocator<MyEvtId> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyEvtId,allocator<MyEvtId> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyEvtId,allocator<MyEvtId> >[n];
     } else {
       p = new((void*) gvp) vector<MyEvtId,allocator<MyEvtId> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyEvtId,allocator<MyEvtId> >;
     } else {
       p = new((void*) gvp) vector<MyEvtId,allocator<MyEvtId> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyEvtId,allocator<MyEvtId> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyEvtId,allocator<MyEvtId> >((vector<MyEvtId,allocator<MyEvtId> >::size_type) G__int(libp->para[0]), *(MyEvtId*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyEvtId,allocator<MyEvtId> >((vector<MyEvtId,allocator<MyEvtId> >::size_type) G__int(libp->para[0]), *(MyEvtId*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyEvtId,allocator<MyEvtId> >((vector<MyEvtId,allocator<MyEvtId> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyEvtId,allocator<MyEvtId> >((vector<MyEvtId,allocator<MyEvtId> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyEvtId,allocator<MyEvtId> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyEvtId,allocator<MyEvtId> >(*(vector<MyEvtId,allocator<MyEvtId> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyEvtId,allocator<MyEvtId> >(*(vector<MyEvtId,allocator<MyEvtId> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyEvtId,allocator<MyEvtId> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyEvtId,allocator<MyEvtId> >(*((vector<MyEvtId,allocator<MyEvtId> >::const_iterator*) G__int(libp->para[0])), *((vector<MyEvtId,allocator<MyEvtId> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyEvtId,allocator<MyEvtId> >(*((vector<MyEvtId,allocator<MyEvtId> >::const_iterator*) G__int(libp->para[0])), *((vector<MyEvtId,allocator<MyEvtId> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyEvtId,allocator<MyEvtId> >& obj = ((vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->operator=(*(vector<MyEvtId,allocator<MyEvtId> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->reserve((vector<MyEvtId,allocator<MyEvtId> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyEvtId& obj = ((vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyEvtId& obj = ((vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->push_back(*(MyEvtId*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->swap(*(vector<MyEvtId,allocator<MyEvtId> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyEvtId,allocator<MyEvtId> >::iterator* pobj;
         vector<MyEvtId,allocator<MyEvtId> >::iterator xobj = ((vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->insert(*((vector<MyEvtId,allocator<MyEvtId> >::iterator*) G__int(libp->para[0])), *(MyEvtId*) libp->para[1].ref);
         pobj = new vector<MyEvtId,allocator<MyEvtId> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->insert(*((vector<MyEvtId,allocator<MyEvtId> >::iterator*) G__int(libp->para[0])), *((vector<MyEvtId,allocator<MyEvtId> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyEvtId,allocator<MyEvtId> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->insert(*((vector<MyEvtId,allocator<MyEvtId> >::iterator*) G__int(libp->para[0])), (vector<MyEvtId,allocator<MyEvtId> >::size_type) G__int(libp->para[1])
, *(MyEvtId*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->erase(*((vector<MyEvtId,allocator<MyEvtId> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->erase(*((vector<MyEvtId,allocator<MyEvtId> >::iterator*) G__int(libp->para[0])), *((vector<MyEvtId,allocator<MyEvtId> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_558_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyEvtId,allocator<MyEvtId> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyEvtId,allocator<MyEvtId> > G__TvectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR;
static int G__eventdict_558_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyEvtId,allocator<MyEvtId> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyEvtId,allocator<MyEvtId> >*) (soff+(sizeof(vector<MyEvtId,allocator<MyEvtId> >)*i)))->~G__TvectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyEvtId,allocator<MyEvtId> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyEvtId,allocator<MyEvtId> >*) (soff))->~G__TvectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyFwdGap,allocator<MyFwdGap> > */
static int G__eventdict_562_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyFwdGap,allocator<MyFwdGap> >::reference obj = ((vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->at((vector<MyFwdGap,allocator<MyFwdGap> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFwdGap,allocator<MyFwdGap> >::const_reference obj = ((const vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->at((vector<MyFwdGap,allocator<MyFwdGap> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFwdGap,allocator<MyFwdGap> >::iterator* pobj;
         vector<MyFwdGap,allocator<MyFwdGap> >::iterator xobj = ((vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->begin();
         pobj = new vector<MyFwdGap,allocator<MyFwdGap> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFwdGap,allocator<MyFwdGap> >::iterator* pobj;
         vector<MyFwdGap,allocator<MyFwdGap> >::iterator xobj = ((vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->end();
         pobj = new vector<MyFwdGap,allocator<MyFwdGap> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFwdGap,allocator<MyFwdGap> >::reverse_iterator* pobj;
         vector<MyFwdGap,allocator<MyFwdGap> >::reverse_iterator xobj = ((vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyFwdGap,allocator<MyFwdGap> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFwdGap,allocator<MyFwdGap> >::reverse_iterator* pobj;
         vector<MyFwdGap,allocator<MyFwdGap> >::reverse_iterator xobj = ((vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->rend();
         pobj = new vector<MyFwdGap,allocator<MyFwdGap> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->resize((vector<MyFwdGap,allocator<MyFwdGap> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->resize((vector<MyFwdGap,allocator<MyFwdGap> >::size_type) G__int(libp->para[0]), *((MyFwdGap*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyFwdGap,allocator<MyFwdGap> >::reference obj = ((vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->operator[]((vector<MyFwdGap,allocator<MyFwdGap> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFwdGap,allocator<MyFwdGap> >::const_reference obj = ((const vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->operator[]((vector<MyFwdGap,allocator<MyFwdGap> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyFwdGap,allocator<MyFwdGap> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyFwdGap,allocator<MyFwdGap> >[n];
     } else {
       p = new((void*) gvp) vector<MyFwdGap,allocator<MyFwdGap> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyFwdGap,allocator<MyFwdGap> >;
     } else {
       p = new((void*) gvp) vector<MyFwdGap,allocator<MyFwdGap> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyFwdGap,allocator<MyFwdGap> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyFwdGap,allocator<MyFwdGap> >((vector<MyFwdGap,allocator<MyFwdGap> >::size_type) G__int(libp->para[0]), *(MyFwdGap*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyFwdGap,allocator<MyFwdGap> >((vector<MyFwdGap,allocator<MyFwdGap> >::size_type) G__int(libp->para[0]), *(MyFwdGap*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyFwdGap,allocator<MyFwdGap> >((vector<MyFwdGap,allocator<MyFwdGap> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyFwdGap,allocator<MyFwdGap> >((vector<MyFwdGap,allocator<MyFwdGap> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyFwdGap,allocator<MyFwdGap> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyFwdGap,allocator<MyFwdGap> >(*(vector<MyFwdGap,allocator<MyFwdGap> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyFwdGap,allocator<MyFwdGap> >(*(vector<MyFwdGap,allocator<MyFwdGap> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyFwdGap,allocator<MyFwdGap> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyFwdGap,allocator<MyFwdGap> >(*((vector<MyFwdGap,allocator<MyFwdGap> >::const_iterator*) G__int(libp->para[0])), *((vector<MyFwdGap,allocator<MyFwdGap> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyFwdGap,allocator<MyFwdGap> >(*((vector<MyFwdGap,allocator<MyFwdGap> >::const_iterator*) G__int(libp->para[0])), *((vector<MyFwdGap,allocator<MyFwdGap> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyFwdGap,allocator<MyFwdGap> >& obj = ((vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->operator=(*(vector<MyFwdGap,allocator<MyFwdGap> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->reserve((vector<MyFwdGap,allocator<MyFwdGap> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyFwdGap& obj = ((vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyFwdGap& obj = ((vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->push_back(*(MyFwdGap*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->swap(*(vector<MyFwdGap,allocator<MyFwdGap> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFwdGap,allocator<MyFwdGap> >::iterator* pobj;
         vector<MyFwdGap,allocator<MyFwdGap> >::iterator xobj = ((vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->insert(*((vector<MyFwdGap,allocator<MyFwdGap> >::iterator*) G__int(libp->para[0])), *(MyFwdGap*) libp->para[1].ref);
         pobj = new vector<MyFwdGap,allocator<MyFwdGap> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->insert(*((vector<MyFwdGap,allocator<MyFwdGap> >::iterator*) G__int(libp->para[0])), *((vector<MyFwdGap,allocator<MyFwdGap> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyFwdGap,allocator<MyFwdGap> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->insert(*((vector<MyFwdGap,allocator<MyFwdGap> >::iterator*) G__int(libp->para[0])), (vector<MyFwdGap,allocator<MyFwdGap> >::size_type) G__int(libp->para[1])
, *(MyFwdGap*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->erase(*((vector<MyFwdGap,allocator<MyFwdGap> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->erase(*((vector<MyFwdGap,allocator<MyFwdGap> >::iterator*) G__int(libp->para[0])), *((vector<MyFwdGap,allocator<MyFwdGap> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_562_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFwdGap,allocator<MyFwdGap> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyFwdGap,allocator<MyFwdGap> > G__TvectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR;
static int G__eventdict_562_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyFwdGap,allocator<MyFwdGap> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyFwdGap,allocator<MyFwdGap> >*) (soff+(sizeof(vector<MyFwdGap,allocator<MyFwdGap> >)*i)))->~G__TvectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyFwdGap,allocator<MyFwdGap> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyFwdGap,allocator<MyFwdGap> >*) (soff))->~G__TvectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyGenKin,allocator<MyGenKin> > */
static int G__eventdict_566_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyGenKin,allocator<MyGenKin> >::reference obj = ((vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->at((vector<MyGenKin,allocator<MyGenKin> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenKin,allocator<MyGenKin> >::const_reference obj = ((const vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->at((vector<MyGenKin,allocator<MyGenKin> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenKin,allocator<MyGenKin> >::iterator* pobj;
         vector<MyGenKin,allocator<MyGenKin> >::iterator xobj = ((vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->begin();
         pobj = new vector<MyGenKin,allocator<MyGenKin> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenKin,allocator<MyGenKin> >::iterator* pobj;
         vector<MyGenKin,allocator<MyGenKin> >::iterator xobj = ((vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->end();
         pobj = new vector<MyGenKin,allocator<MyGenKin> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenKin,allocator<MyGenKin> >::reverse_iterator* pobj;
         vector<MyGenKin,allocator<MyGenKin> >::reverse_iterator xobj = ((vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyGenKin,allocator<MyGenKin> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenKin,allocator<MyGenKin> >::reverse_iterator* pobj;
         vector<MyGenKin,allocator<MyGenKin> >::reverse_iterator xobj = ((vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->rend();
         pobj = new vector<MyGenKin,allocator<MyGenKin> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->resize((vector<MyGenKin,allocator<MyGenKin> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->resize((vector<MyGenKin,allocator<MyGenKin> >::size_type) G__int(libp->para[0]), *((MyGenKin*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyGenKin,allocator<MyGenKin> >::reference obj = ((vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->operator[]((vector<MyGenKin,allocator<MyGenKin> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenKin,allocator<MyGenKin> >::const_reference obj = ((const vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->operator[]((vector<MyGenKin,allocator<MyGenKin> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenKin,allocator<MyGenKin> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenKin,allocator<MyGenKin> >[n];
     } else {
       p = new((void*) gvp) vector<MyGenKin,allocator<MyGenKin> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenKin,allocator<MyGenKin> >;
     } else {
       p = new((void*) gvp) vector<MyGenKin,allocator<MyGenKin> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenKin,allocator<MyGenKin> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenKin,allocator<MyGenKin> >((vector<MyGenKin,allocator<MyGenKin> >::size_type) G__int(libp->para[0]), *(MyGenKin*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyGenKin,allocator<MyGenKin> >((vector<MyGenKin,allocator<MyGenKin> >::size_type) G__int(libp->para[0]), *(MyGenKin*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenKin,allocator<MyGenKin> >((vector<MyGenKin,allocator<MyGenKin> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyGenKin,allocator<MyGenKin> >((vector<MyGenKin,allocator<MyGenKin> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenKin,allocator<MyGenKin> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyGenKin,allocator<MyGenKin> >(*(vector<MyGenKin,allocator<MyGenKin> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyGenKin,allocator<MyGenKin> >(*(vector<MyGenKin,allocator<MyGenKin> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenKin,allocator<MyGenKin> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyGenKin,allocator<MyGenKin> >(*((vector<MyGenKin,allocator<MyGenKin> >::const_iterator*) G__int(libp->para[0])), *((vector<MyGenKin,allocator<MyGenKin> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyGenKin,allocator<MyGenKin> >(*((vector<MyGenKin,allocator<MyGenKin> >::const_iterator*) G__int(libp->para[0])), *((vector<MyGenKin,allocator<MyGenKin> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyGenKin,allocator<MyGenKin> >& obj = ((vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->operator=(*(vector<MyGenKin,allocator<MyGenKin> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->reserve((vector<MyGenKin,allocator<MyGenKin> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyGenKin& obj = ((vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyGenKin& obj = ((vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->push_back(*(MyGenKin*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->swap(*(vector<MyGenKin,allocator<MyGenKin> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenKin,allocator<MyGenKin> >::iterator* pobj;
         vector<MyGenKin,allocator<MyGenKin> >::iterator xobj = ((vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->insert(*((vector<MyGenKin,allocator<MyGenKin> >::iterator*) G__int(libp->para[0])), *(MyGenKin*) libp->para[1].ref);
         pobj = new vector<MyGenKin,allocator<MyGenKin> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->insert(*((vector<MyGenKin,allocator<MyGenKin> >::iterator*) G__int(libp->para[0])), *((vector<MyGenKin,allocator<MyGenKin> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyGenKin,allocator<MyGenKin> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->insert(*((vector<MyGenKin,allocator<MyGenKin> >::iterator*) G__int(libp->para[0])), (vector<MyGenKin,allocator<MyGenKin> >::size_type) G__int(libp->para[1])
, *(MyGenKin*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->erase(*((vector<MyGenKin,allocator<MyGenKin> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->erase(*((vector<MyGenKin,allocator<MyGenKin> >::iterator*) G__int(libp->para[0])), *((vector<MyGenKin,allocator<MyGenKin> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_566_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenKin,allocator<MyGenKin> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyGenKin,allocator<MyGenKin> > G__TvectorlEMyGenKincOallocatorlEMyGenKingRsPgR;
static int G__eventdict_566_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyGenKin,allocator<MyGenKin> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyGenKin,allocator<MyGenKin> >*) (soff+(sizeof(vector<MyGenKin,allocator<MyGenKin> >)*i)))->~G__TvectorlEMyGenKincOallocatorlEMyGenKingRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyGenKin,allocator<MyGenKin> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyGenKin,allocator<MyGenKin> >*) (soff))->~G__TvectorlEMyGenKincOallocatorlEMyGenKingRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyPUSumInfo,allocator<MyPUSumInfo> > */
static int G__eventdict_570_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyPUSumInfo,allocator<MyPUSumInfo> >::reference obj = ((vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->at((vector<MyPUSumInfo,allocator<MyPUSumInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPUSumInfo,allocator<MyPUSumInfo> >::const_reference obj = ((const vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->at((vector<MyPUSumInfo,allocator<MyPUSumInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator* pobj;
         vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator xobj = ((vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->begin();
         pobj = new vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator* pobj;
         vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator xobj = ((vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->end();
         pobj = new vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPUSumInfo,allocator<MyPUSumInfo> >::reverse_iterator* pobj;
         vector<MyPUSumInfo,allocator<MyPUSumInfo> >::reverse_iterator xobj = ((vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyPUSumInfo,allocator<MyPUSumInfo> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPUSumInfo,allocator<MyPUSumInfo> >::reverse_iterator* pobj;
         vector<MyPUSumInfo,allocator<MyPUSumInfo> >::reverse_iterator xobj = ((vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->rend();
         pobj = new vector<MyPUSumInfo,allocator<MyPUSumInfo> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->resize((vector<MyPUSumInfo,allocator<MyPUSumInfo> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->resize((vector<MyPUSumInfo,allocator<MyPUSumInfo> >::size_type) G__int(libp->para[0]), *((MyPUSumInfo*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyPUSumInfo,allocator<MyPUSumInfo> >::reference obj = ((vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->operator[]((vector<MyPUSumInfo,allocator<MyPUSumInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPUSumInfo,allocator<MyPUSumInfo> >::const_reference obj = ((const vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->operator[]((vector<MyPUSumInfo,allocator<MyPUSumInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyPUSumInfo,allocator<MyPUSumInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyPUSumInfo,allocator<MyPUSumInfo> >[n];
     } else {
       p = new((void*) gvp) vector<MyPUSumInfo,allocator<MyPUSumInfo> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyPUSumInfo,allocator<MyPUSumInfo> >;
     } else {
       p = new((void*) gvp) vector<MyPUSumInfo,allocator<MyPUSumInfo> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyPUSumInfo,allocator<MyPUSumInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyPUSumInfo,allocator<MyPUSumInfo> >((vector<MyPUSumInfo,allocator<MyPUSumInfo> >::size_type) G__int(libp->para[0]), *(MyPUSumInfo*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyPUSumInfo,allocator<MyPUSumInfo> >((vector<MyPUSumInfo,allocator<MyPUSumInfo> >::size_type) G__int(libp->para[0]), *(MyPUSumInfo*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyPUSumInfo,allocator<MyPUSumInfo> >((vector<MyPUSumInfo,allocator<MyPUSumInfo> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyPUSumInfo,allocator<MyPUSumInfo> >((vector<MyPUSumInfo,allocator<MyPUSumInfo> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyPUSumInfo,allocator<MyPUSumInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyPUSumInfo,allocator<MyPUSumInfo> >(*(vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyPUSumInfo,allocator<MyPUSumInfo> >(*(vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyPUSumInfo,allocator<MyPUSumInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyPUSumInfo,allocator<MyPUSumInfo> >(*((vector<MyPUSumInfo,allocator<MyPUSumInfo> >::const_iterator*) G__int(libp->para[0])), *((vector<MyPUSumInfo,allocator<MyPUSumInfo> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyPUSumInfo,allocator<MyPUSumInfo> >(*((vector<MyPUSumInfo,allocator<MyPUSumInfo> >::const_iterator*) G__int(libp->para[0])), *((vector<MyPUSumInfo,allocator<MyPUSumInfo> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyPUSumInfo,allocator<MyPUSumInfo> >& obj = ((vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->operator=(*(vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->reserve((vector<MyPUSumInfo,allocator<MyPUSumInfo> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyPUSumInfo& obj = ((vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyPUSumInfo& obj = ((vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->push_back(*(MyPUSumInfo*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->swap(*(vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator* pobj;
         vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator xobj = ((vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->insert(*((vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator*) G__int(libp->para[0])), *(MyPUSumInfo*) libp->para[1].ref);
         pobj = new vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->insert(*((vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator*) G__int(libp->para[0])), *((vector<MyPUSumInfo,allocator<MyPUSumInfo> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyPUSumInfo,allocator<MyPUSumInfo> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->insert(*((vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator*) G__int(libp->para[0])), (vector<MyPUSumInfo,allocator<MyPUSumInfo> >::size_type) G__int(libp->para[1])
, *(MyPUSumInfo*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->erase(*((vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->erase(*((vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator*) G__int(libp->para[0])), *((vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_570_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyPUSumInfo,allocator<MyPUSumInfo> > G__TvectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR;
static int G__eventdict_570_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) (soff+(sizeof(vector<MyPUSumInfo,allocator<MyPUSumInfo> >)*i)))->~G__TvectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyPUSumInfo,allocator<MyPUSumInfo> >*) (soff))->~G__TvectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyMet,allocator<MyMet> > */
static int G__eventdict_574_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyMet,allocator<MyMet> >::reference obj = ((vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->at((vector<MyMet,allocator<MyMet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMet,allocator<MyMet> >::const_reference obj = ((const vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->at((vector<MyMet,allocator<MyMet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMet,allocator<MyMet> >::iterator* pobj;
         vector<MyMet,allocator<MyMet> >::iterator xobj = ((vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->begin();
         pobj = new vector<MyMet,allocator<MyMet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMet,allocator<MyMet> >::iterator* pobj;
         vector<MyMet,allocator<MyMet> >::iterator xobj = ((vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->end();
         pobj = new vector<MyMet,allocator<MyMet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMet,allocator<MyMet> >::reverse_iterator* pobj;
         vector<MyMet,allocator<MyMet> >::reverse_iterator xobj = ((vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyMet,allocator<MyMet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMet,allocator<MyMet> >::reverse_iterator* pobj;
         vector<MyMet,allocator<MyMet> >::reverse_iterator xobj = ((vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->rend();
         pobj = new vector<MyMet,allocator<MyMet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->resize((vector<MyMet,allocator<MyMet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->resize((vector<MyMet,allocator<MyMet> >::size_type) G__int(libp->para[0]), *((MyMet*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyMet,allocator<MyMet> >::reference obj = ((vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->operator[]((vector<MyMet,allocator<MyMet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMet,allocator<MyMet> >::const_reference obj = ((const vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->operator[]((vector<MyMet,allocator<MyMet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMet,allocator<MyMet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMet,allocator<MyMet> >[n];
     } else {
       p = new((void*) gvp) vector<MyMet,allocator<MyMet> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMet,allocator<MyMet> >;
     } else {
       p = new((void*) gvp) vector<MyMet,allocator<MyMet> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMet,allocator<MyMet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMet,allocator<MyMet> >((vector<MyMet,allocator<MyMet> >::size_type) G__int(libp->para[0]), *(MyMet*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyMet,allocator<MyMet> >((vector<MyMet,allocator<MyMet> >::size_type) G__int(libp->para[0]), *(MyMet*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMet,allocator<MyMet> >((vector<MyMet,allocator<MyMet> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyMet,allocator<MyMet> >((vector<MyMet,allocator<MyMet> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMet,allocator<MyMet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyMet,allocator<MyMet> >(*(vector<MyMet,allocator<MyMet> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyMet,allocator<MyMet> >(*(vector<MyMet,allocator<MyMet> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMet,allocator<MyMet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyMet,allocator<MyMet> >(*((vector<MyMet,allocator<MyMet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyMet,allocator<MyMet> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyMet,allocator<MyMet> >(*((vector<MyMet,allocator<MyMet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyMet,allocator<MyMet> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyMet,allocator<MyMet> >& obj = ((vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->operator=(*(vector<MyMet,allocator<MyMet> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->reserve((vector<MyMet,allocator<MyMet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyMet& obj = ((vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyMet& obj = ((vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->push_back(*(MyMet*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->swap(*(vector<MyMet,allocator<MyMet> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMet,allocator<MyMet> >::iterator* pobj;
         vector<MyMet,allocator<MyMet> >::iterator xobj = ((vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->insert(*((vector<MyMet,allocator<MyMet> >::iterator*) G__int(libp->para[0])), *(MyMet*) libp->para[1].ref);
         pobj = new vector<MyMet,allocator<MyMet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->insert(*((vector<MyMet,allocator<MyMet> >::iterator*) G__int(libp->para[0])), *((vector<MyMet,allocator<MyMet> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyMet,allocator<MyMet> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->insert(*((vector<MyMet,allocator<MyMet> >::iterator*) G__int(libp->para[0])), (vector<MyMet,allocator<MyMet> >::size_type) G__int(libp->para[1])
, *(MyMet*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->erase(*((vector<MyMet,allocator<MyMet> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->erase(*((vector<MyMet,allocator<MyMet> >::iterator*) G__int(libp->para[0])), *((vector<MyMet,allocator<MyMet> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_574_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMet,allocator<MyMet> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyMet,allocator<MyMet> > G__TvectorlEMyMetcOallocatorlEMyMetgRsPgR;
static int G__eventdict_574_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyMet,allocator<MyMet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyMet,allocator<MyMet> >*) (soff+(sizeof(vector<MyMet,allocator<MyMet> >)*i)))->~G__TvectorlEMyMetcOallocatorlEMyMetgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyMet,allocator<MyMet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyMet,allocator<MyMet> >*) (soff))->~G__TvectorlEMyMetcOallocatorlEMyMetgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyGenMet,allocator<MyGenMet> > */
static int G__eventdict_578_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyGenMet,allocator<MyGenMet> >::reference obj = ((vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->at((vector<MyGenMet,allocator<MyGenMet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenMet,allocator<MyGenMet> >::const_reference obj = ((const vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->at((vector<MyGenMet,allocator<MyGenMet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenMet,allocator<MyGenMet> >::iterator* pobj;
         vector<MyGenMet,allocator<MyGenMet> >::iterator xobj = ((vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->begin();
         pobj = new vector<MyGenMet,allocator<MyGenMet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenMet,allocator<MyGenMet> >::iterator* pobj;
         vector<MyGenMet,allocator<MyGenMet> >::iterator xobj = ((vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->end();
         pobj = new vector<MyGenMet,allocator<MyGenMet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenMet,allocator<MyGenMet> >::reverse_iterator* pobj;
         vector<MyGenMet,allocator<MyGenMet> >::reverse_iterator xobj = ((vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyGenMet,allocator<MyGenMet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenMet,allocator<MyGenMet> >::reverse_iterator* pobj;
         vector<MyGenMet,allocator<MyGenMet> >::reverse_iterator xobj = ((vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->rend();
         pobj = new vector<MyGenMet,allocator<MyGenMet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->resize((vector<MyGenMet,allocator<MyGenMet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->resize((vector<MyGenMet,allocator<MyGenMet> >::size_type) G__int(libp->para[0]), *((MyGenMet*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyGenMet,allocator<MyGenMet> >::reference obj = ((vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->operator[]((vector<MyGenMet,allocator<MyGenMet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenMet,allocator<MyGenMet> >::const_reference obj = ((const vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->operator[]((vector<MyGenMet,allocator<MyGenMet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenMet,allocator<MyGenMet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenMet,allocator<MyGenMet> >[n];
     } else {
       p = new((void*) gvp) vector<MyGenMet,allocator<MyGenMet> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenMet,allocator<MyGenMet> >;
     } else {
       p = new((void*) gvp) vector<MyGenMet,allocator<MyGenMet> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenMet,allocator<MyGenMet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenMet,allocator<MyGenMet> >((vector<MyGenMet,allocator<MyGenMet> >::size_type) G__int(libp->para[0]), *(MyGenMet*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyGenMet,allocator<MyGenMet> >((vector<MyGenMet,allocator<MyGenMet> >::size_type) G__int(libp->para[0]), *(MyGenMet*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenMet,allocator<MyGenMet> >((vector<MyGenMet,allocator<MyGenMet> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyGenMet,allocator<MyGenMet> >((vector<MyGenMet,allocator<MyGenMet> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenMet,allocator<MyGenMet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyGenMet,allocator<MyGenMet> >(*(vector<MyGenMet,allocator<MyGenMet> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyGenMet,allocator<MyGenMet> >(*(vector<MyGenMet,allocator<MyGenMet> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenMet,allocator<MyGenMet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyGenMet,allocator<MyGenMet> >(*((vector<MyGenMet,allocator<MyGenMet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyGenMet,allocator<MyGenMet> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyGenMet,allocator<MyGenMet> >(*((vector<MyGenMet,allocator<MyGenMet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyGenMet,allocator<MyGenMet> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyGenMet,allocator<MyGenMet> >& obj = ((vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->operator=(*(vector<MyGenMet,allocator<MyGenMet> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->reserve((vector<MyGenMet,allocator<MyGenMet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyGenMet& obj = ((vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyGenMet& obj = ((vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->push_back(*(MyGenMet*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->swap(*(vector<MyGenMet,allocator<MyGenMet> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenMet,allocator<MyGenMet> >::iterator* pobj;
         vector<MyGenMet,allocator<MyGenMet> >::iterator xobj = ((vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->insert(*((vector<MyGenMet,allocator<MyGenMet> >::iterator*) G__int(libp->para[0])), *(MyGenMet*) libp->para[1].ref);
         pobj = new vector<MyGenMet,allocator<MyGenMet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->insert(*((vector<MyGenMet,allocator<MyGenMet> >::iterator*) G__int(libp->para[0])), *((vector<MyGenMet,allocator<MyGenMet> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyGenMet,allocator<MyGenMet> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->insert(*((vector<MyGenMet,allocator<MyGenMet> >::iterator*) G__int(libp->para[0])), (vector<MyGenMet,allocator<MyGenMet> >::size_type) G__int(libp->para[1])
, *(MyGenMet*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->erase(*((vector<MyGenMet,allocator<MyGenMet> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->erase(*((vector<MyGenMet,allocator<MyGenMet> >::iterator*) G__int(libp->para[0])), *((vector<MyGenMet,allocator<MyGenMet> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_578_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenMet,allocator<MyGenMet> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyGenMet,allocator<MyGenMet> > G__TvectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR;
static int G__eventdict_578_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyGenMet,allocator<MyGenMet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyGenMet,allocator<MyGenMet> >*) (soff+(sizeof(vector<MyGenMet,allocator<MyGenMet> >)*i)))->~G__TvectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyGenMet,allocator<MyGenMet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyGenMet,allocator<MyGenMet> >*) (soff))->~G__TvectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyGenJet,allocator<MyGenJet> > */
static int G__eventdict_582_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyGenJet,allocator<MyGenJet> >::reference obj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->at((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenJet,allocator<MyGenJet> >::const_reference obj = ((const vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->at((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenJet,allocator<MyGenJet> >::iterator* pobj;
         vector<MyGenJet,allocator<MyGenJet> >::iterator xobj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->begin();
         pobj = new vector<MyGenJet,allocator<MyGenJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenJet,allocator<MyGenJet> >::iterator* pobj;
         vector<MyGenJet,allocator<MyGenJet> >::iterator xobj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->end();
         pobj = new vector<MyGenJet,allocator<MyGenJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenJet,allocator<MyGenJet> >::reverse_iterator* pobj;
         vector<MyGenJet,allocator<MyGenJet> >::reverse_iterator xobj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyGenJet,allocator<MyGenJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenJet,allocator<MyGenJet> >::reverse_iterator* pobj;
         vector<MyGenJet,allocator<MyGenJet> >::reverse_iterator xobj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->rend();
         pobj = new vector<MyGenJet,allocator<MyGenJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->resize((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->resize((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]), *((MyGenJet*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyGenJet,allocator<MyGenJet> >::reference obj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->operator[]((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenJet,allocator<MyGenJet> >::const_reference obj = ((const vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->operator[]((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenJet,allocator<MyGenJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenJet,allocator<MyGenJet> >[n];
     } else {
       p = new((void*) gvp) vector<MyGenJet,allocator<MyGenJet> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenJet,allocator<MyGenJet> >;
     } else {
       p = new((void*) gvp) vector<MyGenJet,allocator<MyGenJet> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenJet,allocator<MyGenJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenJet,allocator<MyGenJet> >((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]), *(MyGenJet*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyGenJet,allocator<MyGenJet> >((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]), *(MyGenJet*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenJet,allocator<MyGenJet> >((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyGenJet,allocator<MyGenJet> >((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenJet,allocator<MyGenJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyGenJet,allocator<MyGenJet> >(*(vector<MyGenJet,allocator<MyGenJet> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyGenJet,allocator<MyGenJet> >(*(vector<MyGenJet,allocator<MyGenJet> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenJet,allocator<MyGenJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyGenJet,allocator<MyGenJet> >(*((vector<MyGenJet,allocator<MyGenJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyGenJet,allocator<MyGenJet> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyGenJet,allocator<MyGenJet> >(*((vector<MyGenJet,allocator<MyGenJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyGenJet,allocator<MyGenJet> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyGenJet,allocator<MyGenJet> >& obj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->operator=(*(vector<MyGenJet,allocator<MyGenJet> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->reserve((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyGenJet& obj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyGenJet& obj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->push_back(*(MyGenJet*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->swap(*(vector<MyGenJet,allocator<MyGenJet> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenJet,allocator<MyGenJet> >::iterator* pobj;
         vector<MyGenJet,allocator<MyGenJet> >::iterator xobj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->insert(*((vector<MyGenJet,allocator<MyGenJet> >::iterator*) G__int(libp->para[0])), *(MyGenJet*) libp->para[1].ref);
         pobj = new vector<MyGenJet,allocator<MyGenJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->insert(*((vector<MyGenJet,allocator<MyGenJet> >::iterator*) G__int(libp->para[0])), *((vector<MyGenJet,allocator<MyGenJet> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyGenJet,allocator<MyGenJet> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->insert(*((vector<MyGenJet,allocator<MyGenJet> >::iterator*) G__int(libp->para[0])), (vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[1])
, *(MyGenJet*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->erase(*((vector<MyGenJet,allocator<MyGenJet> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->erase(*((vector<MyGenJet,allocator<MyGenJet> >::iterator*) G__int(libp->para[0])), *((vector<MyGenJet,allocator<MyGenJet> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_582_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyGenJet,allocator<MyGenJet> > G__TvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR;
static int G__eventdict_582_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyGenJet,allocator<MyGenJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyGenJet,allocator<MyGenJet> >*) (soff+(sizeof(vector<MyGenJet,allocator<MyGenJet> >)*i)))->~G__TvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyGenJet,allocator<MyGenJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyGenJet,allocator<MyGenJet> >*) (soff))->~G__TvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyHLTrig,allocator<MyHLTrig> > */
static int G__eventdict_586_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyHLTrig,allocator<MyHLTrig> >::reference obj = ((vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->at((vector<MyHLTrig,allocator<MyHLTrig> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyHLTrig,allocator<MyHLTrig> >::const_reference obj = ((const vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->at((vector<MyHLTrig,allocator<MyHLTrig> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyHLTrig,allocator<MyHLTrig> >::iterator* pobj;
         vector<MyHLTrig,allocator<MyHLTrig> >::iterator xobj = ((vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->begin();
         pobj = new vector<MyHLTrig,allocator<MyHLTrig> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyHLTrig,allocator<MyHLTrig> >::iterator* pobj;
         vector<MyHLTrig,allocator<MyHLTrig> >::iterator xobj = ((vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->end();
         pobj = new vector<MyHLTrig,allocator<MyHLTrig> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyHLTrig,allocator<MyHLTrig> >::reverse_iterator* pobj;
         vector<MyHLTrig,allocator<MyHLTrig> >::reverse_iterator xobj = ((vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyHLTrig,allocator<MyHLTrig> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyHLTrig,allocator<MyHLTrig> >::reverse_iterator* pobj;
         vector<MyHLTrig,allocator<MyHLTrig> >::reverse_iterator xobj = ((vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->rend();
         pobj = new vector<MyHLTrig,allocator<MyHLTrig> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->resize((vector<MyHLTrig,allocator<MyHLTrig> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->resize((vector<MyHLTrig,allocator<MyHLTrig> >::size_type) G__int(libp->para[0]), *((MyHLTrig*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyHLTrig,allocator<MyHLTrig> >::reference obj = ((vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->operator[]((vector<MyHLTrig,allocator<MyHLTrig> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyHLTrig,allocator<MyHLTrig> >::const_reference obj = ((const vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->operator[]((vector<MyHLTrig,allocator<MyHLTrig> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyHLTrig,allocator<MyHLTrig> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyHLTrig,allocator<MyHLTrig> >[n];
     } else {
       p = new((void*) gvp) vector<MyHLTrig,allocator<MyHLTrig> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyHLTrig,allocator<MyHLTrig> >;
     } else {
       p = new((void*) gvp) vector<MyHLTrig,allocator<MyHLTrig> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyHLTrig,allocator<MyHLTrig> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyHLTrig,allocator<MyHLTrig> >((vector<MyHLTrig,allocator<MyHLTrig> >::size_type) G__int(libp->para[0]), *(MyHLTrig*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyHLTrig,allocator<MyHLTrig> >((vector<MyHLTrig,allocator<MyHLTrig> >::size_type) G__int(libp->para[0]), *(MyHLTrig*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyHLTrig,allocator<MyHLTrig> >((vector<MyHLTrig,allocator<MyHLTrig> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyHLTrig,allocator<MyHLTrig> >((vector<MyHLTrig,allocator<MyHLTrig> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyHLTrig,allocator<MyHLTrig> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyHLTrig,allocator<MyHLTrig> >(*(vector<MyHLTrig,allocator<MyHLTrig> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyHLTrig,allocator<MyHLTrig> >(*(vector<MyHLTrig,allocator<MyHLTrig> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyHLTrig,allocator<MyHLTrig> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyHLTrig,allocator<MyHLTrig> >(*((vector<MyHLTrig,allocator<MyHLTrig> >::const_iterator*) G__int(libp->para[0])), *((vector<MyHLTrig,allocator<MyHLTrig> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyHLTrig,allocator<MyHLTrig> >(*((vector<MyHLTrig,allocator<MyHLTrig> >::const_iterator*) G__int(libp->para[0])), *((vector<MyHLTrig,allocator<MyHLTrig> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyHLTrig,allocator<MyHLTrig> >& obj = ((vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->operator=(*(vector<MyHLTrig,allocator<MyHLTrig> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->reserve((vector<MyHLTrig,allocator<MyHLTrig> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyHLTrig& obj = ((vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyHLTrig& obj = ((vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->push_back(*(MyHLTrig*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->swap(*(vector<MyHLTrig,allocator<MyHLTrig> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyHLTrig,allocator<MyHLTrig> >::iterator* pobj;
         vector<MyHLTrig,allocator<MyHLTrig> >::iterator xobj = ((vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->insert(*((vector<MyHLTrig,allocator<MyHLTrig> >::iterator*) G__int(libp->para[0])), *(MyHLTrig*) libp->para[1].ref);
         pobj = new vector<MyHLTrig,allocator<MyHLTrig> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->insert(*((vector<MyHLTrig,allocator<MyHLTrig> >::iterator*) G__int(libp->para[0])), *((vector<MyHLTrig,allocator<MyHLTrig> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyHLTrig,allocator<MyHLTrig> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->insert(*((vector<MyHLTrig,allocator<MyHLTrig> >::iterator*) G__int(libp->para[0])), (vector<MyHLTrig,allocator<MyHLTrig> >::size_type) G__int(libp->para[1])
, *(MyHLTrig*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->erase(*((vector<MyHLTrig,allocator<MyHLTrig> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->erase(*((vector<MyHLTrig,allocator<MyHLTrig> >::iterator*) G__int(libp->para[0])), *((vector<MyHLTrig,allocator<MyHLTrig> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_586_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyHLTrig,allocator<MyHLTrig> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyHLTrig,allocator<MyHLTrig> > G__TvectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR;
static int G__eventdict_586_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyHLTrig,allocator<MyHLTrig> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyHLTrig,allocator<MyHLTrig> >*) (soff+(sizeof(vector<MyHLTrig,allocator<MyHLTrig> >)*i)))->~G__TvectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyHLTrig,allocator<MyHLTrig> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyHLTrig,allocator<MyHLTrig> >*) (soff))->~G__TvectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyL1Trig,allocator<MyL1Trig> > */
static int G__eventdict_590_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyL1Trig,allocator<MyL1Trig> >::reference obj = ((vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->at((vector<MyL1Trig,allocator<MyL1Trig> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyL1Trig,allocator<MyL1Trig> >::const_reference obj = ((const vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->at((vector<MyL1Trig,allocator<MyL1Trig> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyL1Trig,allocator<MyL1Trig> >::iterator* pobj;
         vector<MyL1Trig,allocator<MyL1Trig> >::iterator xobj = ((vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->begin();
         pobj = new vector<MyL1Trig,allocator<MyL1Trig> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyL1Trig,allocator<MyL1Trig> >::iterator* pobj;
         vector<MyL1Trig,allocator<MyL1Trig> >::iterator xobj = ((vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->end();
         pobj = new vector<MyL1Trig,allocator<MyL1Trig> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyL1Trig,allocator<MyL1Trig> >::reverse_iterator* pobj;
         vector<MyL1Trig,allocator<MyL1Trig> >::reverse_iterator xobj = ((vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyL1Trig,allocator<MyL1Trig> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyL1Trig,allocator<MyL1Trig> >::reverse_iterator* pobj;
         vector<MyL1Trig,allocator<MyL1Trig> >::reverse_iterator xobj = ((vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->rend();
         pobj = new vector<MyL1Trig,allocator<MyL1Trig> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->resize((vector<MyL1Trig,allocator<MyL1Trig> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->resize((vector<MyL1Trig,allocator<MyL1Trig> >::size_type) G__int(libp->para[0]), *((MyL1Trig*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyL1Trig,allocator<MyL1Trig> >::reference obj = ((vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->operator[]((vector<MyL1Trig,allocator<MyL1Trig> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyL1Trig,allocator<MyL1Trig> >::const_reference obj = ((const vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->operator[]((vector<MyL1Trig,allocator<MyL1Trig> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyL1Trig,allocator<MyL1Trig> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyL1Trig,allocator<MyL1Trig> >[n];
     } else {
       p = new((void*) gvp) vector<MyL1Trig,allocator<MyL1Trig> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyL1Trig,allocator<MyL1Trig> >;
     } else {
       p = new((void*) gvp) vector<MyL1Trig,allocator<MyL1Trig> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyL1Trig,allocator<MyL1Trig> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyL1Trig,allocator<MyL1Trig> >((vector<MyL1Trig,allocator<MyL1Trig> >::size_type) G__int(libp->para[0]), *(MyL1Trig*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyL1Trig,allocator<MyL1Trig> >((vector<MyL1Trig,allocator<MyL1Trig> >::size_type) G__int(libp->para[0]), *(MyL1Trig*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyL1Trig,allocator<MyL1Trig> >((vector<MyL1Trig,allocator<MyL1Trig> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyL1Trig,allocator<MyL1Trig> >((vector<MyL1Trig,allocator<MyL1Trig> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyL1Trig,allocator<MyL1Trig> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyL1Trig,allocator<MyL1Trig> >(*(vector<MyL1Trig,allocator<MyL1Trig> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyL1Trig,allocator<MyL1Trig> >(*(vector<MyL1Trig,allocator<MyL1Trig> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyL1Trig,allocator<MyL1Trig> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyL1Trig,allocator<MyL1Trig> >(*((vector<MyL1Trig,allocator<MyL1Trig> >::const_iterator*) G__int(libp->para[0])), *((vector<MyL1Trig,allocator<MyL1Trig> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyL1Trig,allocator<MyL1Trig> >(*((vector<MyL1Trig,allocator<MyL1Trig> >::const_iterator*) G__int(libp->para[0])), *((vector<MyL1Trig,allocator<MyL1Trig> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyL1Trig,allocator<MyL1Trig> >& obj = ((vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->operator=(*(vector<MyL1Trig,allocator<MyL1Trig> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->reserve((vector<MyL1Trig,allocator<MyL1Trig> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyL1Trig& obj = ((vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyL1Trig& obj = ((vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->push_back(*(MyL1Trig*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->swap(*(vector<MyL1Trig,allocator<MyL1Trig> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyL1Trig,allocator<MyL1Trig> >::iterator* pobj;
         vector<MyL1Trig,allocator<MyL1Trig> >::iterator xobj = ((vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->insert(*((vector<MyL1Trig,allocator<MyL1Trig> >::iterator*) G__int(libp->para[0])), *(MyL1Trig*) libp->para[1].ref);
         pobj = new vector<MyL1Trig,allocator<MyL1Trig> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->insert(*((vector<MyL1Trig,allocator<MyL1Trig> >::iterator*) G__int(libp->para[0])), *((vector<MyL1Trig,allocator<MyL1Trig> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyL1Trig,allocator<MyL1Trig> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->insert(*((vector<MyL1Trig,allocator<MyL1Trig> >::iterator*) G__int(libp->para[0])), (vector<MyL1Trig,allocator<MyL1Trig> >::size_type) G__int(libp->para[1])
, *(MyL1Trig*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->erase(*((vector<MyL1Trig,allocator<MyL1Trig> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->erase(*((vector<MyL1Trig,allocator<MyL1Trig> >::iterator*) G__int(libp->para[0])), *((vector<MyL1Trig,allocator<MyL1Trig> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_590_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyL1Trig,allocator<MyL1Trig> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyL1Trig,allocator<MyL1Trig> > G__TvectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR;
static int G__eventdict_590_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyL1Trig,allocator<MyL1Trig> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyL1Trig,allocator<MyL1Trig> >*) (soff+(sizeof(vector<MyL1Trig,allocator<MyL1Trig> >)*i)))->~G__TvectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyL1Trig,allocator<MyL1Trig> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyL1Trig,allocator<MyL1Trig> >*) (soff))->~G__TvectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyL1TrigOld,allocator<MyL1TrigOld> > */
static int G__eventdict_594_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyL1TrigOld,allocator<MyL1TrigOld> >::reference obj = ((vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->at((vector<MyL1TrigOld,allocator<MyL1TrigOld> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyL1TrigOld,allocator<MyL1TrigOld> >::const_reference obj = ((const vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->at((vector<MyL1TrigOld,allocator<MyL1TrigOld> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator* pobj;
         vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator xobj = ((vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->begin();
         pobj = new vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator* pobj;
         vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator xobj = ((vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->end();
         pobj = new vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyL1TrigOld,allocator<MyL1TrigOld> >::reverse_iterator* pobj;
         vector<MyL1TrigOld,allocator<MyL1TrigOld> >::reverse_iterator xobj = ((vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyL1TrigOld,allocator<MyL1TrigOld> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyL1TrigOld,allocator<MyL1TrigOld> >::reverse_iterator* pobj;
         vector<MyL1TrigOld,allocator<MyL1TrigOld> >::reverse_iterator xobj = ((vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->rend();
         pobj = new vector<MyL1TrigOld,allocator<MyL1TrigOld> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->resize((vector<MyL1TrigOld,allocator<MyL1TrigOld> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->resize((vector<MyL1TrigOld,allocator<MyL1TrigOld> >::size_type) G__int(libp->para[0]), *((MyL1TrigOld*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyL1TrigOld,allocator<MyL1TrigOld> >::reference obj = ((vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->operator[]((vector<MyL1TrigOld,allocator<MyL1TrigOld> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyL1TrigOld,allocator<MyL1TrigOld> >::const_reference obj = ((const vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->operator[]((vector<MyL1TrigOld,allocator<MyL1TrigOld> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyL1TrigOld,allocator<MyL1TrigOld> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyL1TrigOld,allocator<MyL1TrigOld> >[n];
     } else {
       p = new((void*) gvp) vector<MyL1TrigOld,allocator<MyL1TrigOld> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyL1TrigOld,allocator<MyL1TrigOld> >;
     } else {
       p = new((void*) gvp) vector<MyL1TrigOld,allocator<MyL1TrigOld> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyL1TrigOld,allocator<MyL1TrigOld> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyL1TrigOld,allocator<MyL1TrigOld> >((vector<MyL1TrigOld,allocator<MyL1TrigOld> >::size_type) G__int(libp->para[0]), *(MyL1TrigOld*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyL1TrigOld,allocator<MyL1TrigOld> >((vector<MyL1TrigOld,allocator<MyL1TrigOld> >::size_type) G__int(libp->para[0]), *(MyL1TrigOld*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyL1TrigOld,allocator<MyL1TrigOld> >((vector<MyL1TrigOld,allocator<MyL1TrigOld> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyL1TrigOld,allocator<MyL1TrigOld> >((vector<MyL1TrigOld,allocator<MyL1TrigOld> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyL1TrigOld,allocator<MyL1TrigOld> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyL1TrigOld,allocator<MyL1TrigOld> >(*(vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyL1TrigOld,allocator<MyL1TrigOld> >(*(vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyL1TrigOld,allocator<MyL1TrigOld> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyL1TrigOld,allocator<MyL1TrigOld> >(*((vector<MyL1TrigOld,allocator<MyL1TrigOld> >::const_iterator*) G__int(libp->para[0])), *((vector<MyL1TrigOld,allocator<MyL1TrigOld> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyL1TrigOld,allocator<MyL1TrigOld> >(*((vector<MyL1TrigOld,allocator<MyL1TrigOld> >::const_iterator*) G__int(libp->para[0])), *((vector<MyL1TrigOld,allocator<MyL1TrigOld> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyL1TrigOld,allocator<MyL1TrigOld> >& obj = ((vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->operator=(*(vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->reserve((vector<MyL1TrigOld,allocator<MyL1TrigOld> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyL1TrigOld& obj = ((vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyL1TrigOld& obj = ((vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->push_back(*(MyL1TrigOld*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->swap(*(vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator* pobj;
         vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator xobj = ((vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->insert(*((vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator*) G__int(libp->para[0])), *(MyL1TrigOld*) libp->para[1].ref);
         pobj = new vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->insert(*((vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator*) G__int(libp->para[0])), *((vector<MyL1TrigOld,allocator<MyL1TrigOld> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyL1TrigOld,allocator<MyL1TrigOld> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->insert(*((vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator*) G__int(libp->para[0])), (vector<MyL1TrigOld,allocator<MyL1TrigOld> >::size_type) G__int(libp->para[1])
, *(MyL1TrigOld*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->erase(*((vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->erase(*((vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator*) G__int(libp->para[0])), *((vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_594_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyL1TrigOld,allocator<MyL1TrigOld> > G__TvectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR;
static int G__eventdict_594_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) (soff+(sizeof(vector<MyL1TrigOld,allocator<MyL1TrigOld> >)*i)))->~G__TvectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyL1TrigOld,allocator<MyL1TrigOld> >*) (soff))->~G__TvectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyMITEvtSel,allocator<MyMITEvtSel> > */
static int G__eventdict_598_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyMITEvtSel,allocator<MyMITEvtSel> >::reference obj = ((vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->at((vector<MyMITEvtSel,allocator<MyMITEvtSel> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMITEvtSel,allocator<MyMITEvtSel> >::const_reference obj = ((const vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->at((vector<MyMITEvtSel,allocator<MyMITEvtSel> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator* pobj;
         vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator xobj = ((vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->begin();
         pobj = new vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator* pobj;
         vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator xobj = ((vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->end();
         pobj = new vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMITEvtSel,allocator<MyMITEvtSel> >::reverse_iterator* pobj;
         vector<MyMITEvtSel,allocator<MyMITEvtSel> >::reverse_iterator xobj = ((vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyMITEvtSel,allocator<MyMITEvtSel> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMITEvtSel,allocator<MyMITEvtSel> >::reverse_iterator* pobj;
         vector<MyMITEvtSel,allocator<MyMITEvtSel> >::reverse_iterator xobj = ((vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->rend();
         pobj = new vector<MyMITEvtSel,allocator<MyMITEvtSel> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->resize((vector<MyMITEvtSel,allocator<MyMITEvtSel> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->resize((vector<MyMITEvtSel,allocator<MyMITEvtSel> >::size_type) G__int(libp->para[0]), *((MyMITEvtSel*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyMITEvtSel,allocator<MyMITEvtSel> >::reference obj = ((vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->operator[]((vector<MyMITEvtSel,allocator<MyMITEvtSel> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMITEvtSel,allocator<MyMITEvtSel> >::const_reference obj = ((const vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->operator[]((vector<MyMITEvtSel,allocator<MyMITEvtSel> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMITEvtSel,allocator<MyMITEvtSel> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMITEvtSel,allocator<MyMITEvtSel> >[n];
     } else {
       p = new((void*) gvp) vector<MyMITEvtSel,allocator<MyMITEvtSel> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMITEvtSel,allocator<MyMITEvtSel> >;
     } else {
       p = new((void*) gvp) vector<MyMITEvtSel,allocator<MyMITEvtSel> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMITEvtSel,allocator<MyMITEvtSel> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMITEvtSel,allocator<MyMITEvtSel> >((vector<MyMITEvtSel,allocator<MyMITEvtSel> >::size_type) G__int(libp->para[0]), *(MyMITEvtSel*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyMITEvtSel,allocator<MyMITEvtSel> >((vector<MyMITEvtSel,allocator<MyMITEvtSel> >::size_type) G__int(libp->para[0]), *(MyMITEvtSel*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMITEvtSel,allocator<MyMITEvtSel> >((vector<MyMITEvtSel,allocator<MyMITEvtSel> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyMITEvtSel,allocator<MyMITEvtSel> >((vector<MyMITEvtSel,allocator<MyMITEvtSel> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMITEvtSel,allocator<MyMITEvtSel> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyMITEvtSel,allocator<MyMITEvtSel> >(*(vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyMITEvtSel,allocator<MyMITEvtSel> >(*(vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMITEvtSel,allocator<MyMITEvtSel> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyMITEvtSel,allocator<MyMITEvtSel> >(*((vector<MyMITEvtSel,allocator<MyMITEvtSel> >::const_iterator*) G__int(libp->para[0])), *((vector<MyMITEvtSel,allocator<MyMITEvtSel> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyMITEvtSel,allocator<MyMITEvtSel> >(*((vector<MyMITEvtSel,allocator<MyMITEvtSel> >::const_iterator*) G__int(libp->para[0])), *((vector<MyMITEvtSel,allocator<MyMITEvtSel> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyMITEvtSel,allocator<MyMITEvtSel> >& obj = ((vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->operator=(*(vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->reserve((vector<MyMITEvtSel,allocator<MyMITEvtSel> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyMITEvtSel& obj = ((vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyMITEvtSel& obj = ((vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->push_back(*(MyMITEvtSel*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->swap(*(vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator* pobj;
         vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator xobj = ((vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->insert(*((vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator*) G__int(libp->para[0])), *(MyMITEvtSel*) libp->para[1].ref);
         pobj = new vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->insert(*((vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator*) G__int(libp->para[0])), *((vector<MyMITEvtSel,allocator<MyMITEvtSel> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyMITEvtSel,allocator<MyMITEvtSel> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->insert(*((vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator*) G__int(libp->para[0])), (vector<MyMITEvtSel,allocator<MyMITEvtSel> >::size_type) G__int(libp->para[1])
, *(MyMITEvtSel*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->erase(*((vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->erase(*((vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator*) G__int(libp->para[0])), *((vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_598_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyMITEvtSel,allocator<MyMITEvtSel> > G__TvectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR;
static int G__eventdict_598_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) (soff+(sizeof(vector<MyMITEvtSel,allocator<MyMITEvtSel> >)*i)))->~G__TvectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyMITEvtSel,allocator<MyMITEvtSel> >*) (soff))->~G__TvectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyPart,allocator<MyPart> > */
static int G__eventdict_602_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyPart,allocator<MyPart> >::reference obj = ((vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->at((vector<MyPart,allocator<MyPart> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPart,allocator<MyPart> >::const_reference obj = ((const vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->at((vector<MyPart,allocator<MyPart> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPart,allocator<MyPart> >::iterator* pobj;
         vector<MyPart,allocator<MyPart> >::iterator xobj = ((vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->begin();
         pobj = new vector<MyPart,allocator<MyPart> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPart,allocator<MyPart> >::iterator* pobj;
         vector<MyPart,allocator<MyPart> >::iterator xobj = ((vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->end();
         pobj = new vector<MyPart,allocator<MyPart> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPart,allocator<MyPart> >::reverse_iterator* pobj;
         vector<MyPart,allocator<MyPart> >::reverse_iterator xobj = ((vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyPart,allocator<MyPart> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPart,allocator<MyPart> >::reverse_iterator* pobj;
         vector<MyPart,allocator<MyPart> >::reverse_iterator xobj = ((vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->rend();
         pobj = new vector<MyPart,allocator<MyPart> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->resize((vector<MyPart,allocator<MyPart> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->resize((vector<MyPart,allocator<MyPart> >::size_type) G__int(libp->para[0]), *((MyPart*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyPart,allocator<MyPart> >::reference obj = ((vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->operator[]((vector<MyPart,allocator<MyPart> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPart,allocator<MyPart> >::const_reference obj = ((const vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->operator[]((vector<MyPart,allocator<MyPart> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyPart,allocator<MyPart> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyPart,allocator<MyPart> >[n];
     } else {
       p = new((void*) gvp) vector<MyPart,allocator<MyPart> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyPart,allocator<MyPart> >;
     } else {
       p = new((void*) gvp) vector<MyPart,allocator<MyPart> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyPart,allocator<MyPart> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyPart,allocator<MyPart> >((vector<MyPart,allocator<MyPart> >::size_type) G__int(libp->para[0]), *(MyPart*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyPart,allocator<MyPart> >((vector<MyPart,allocator<MyPart> >::size_type) G__int(libp->para[0]), *(MyPart*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyPart,allocator<MyPart> >((vector<MyPart,allocator<MyPart> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyPart,allocator<MyPart> >((vector<MyPart,allocator<MyPart> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyPart,allocator<MyPart> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyPart,allocator<MyPart> >(*(vector<MyPart,allocator<MyPart> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyPart,allocator<MyPart> >(*(vector<MyPart,allocator<MyPart> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyPart,allocator<MyPart> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyPart,allocator<MyPart> >(*((vector<MyPart,allocator<MyPart> >::const_iterator*) G__int(libp->para[0])), *((vector<MyPart,allocator<MyPart> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyPart,allocator<MyPart> >(*((vector<MyPart,allocator<MyPart> >::const_iterator*) G__int(libp->para[0])), *((vector<MyPart,allocator<MyPart> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyPart,allocator<MyPart> >& obj = ((vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->operator=(*(vector<MyPart,allocator<MyPart> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->reserve((vector<MyPart,allocator<MyPart> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyPart& obj = ((vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyPart& obj = ((vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->push_back(*(MyPart*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->swap(*(vector<MyPart,allocator<MyPart> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPart,allocator<MyPart> >::iterator* pobj;
         vector<MyPart,allocator<MyPart> >::iterator xobj = ((vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->insert(*((vector<MyPart,allocator<MyPart> >::iterator*) G__int(libp->para[0])), *(MyPart*) libp->para[1].ref);
         pobj = new vector<MyPart,allocator<MyPart> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->insert(*((vector<MyPart,allocator<MyPart> >::iterator*) G__int(libp->para[0])), *((vector<MyPart,allocator<MyPart> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyPart,allocator<MyPart> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->insert(*((vector<MyPart,allocator<MyPart> >::iterator*) G__int(libp->para[0])), (vector<MyPart,allocator<MyPart> >::size_type) G__int(libp->para[1])
, *(MyPart*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->erase(*((vector<MyPart,allocator<MyPart> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->erase(*((vector<MyPart,allocator<MyPart> >::iterator*) G__int(libp->para[0])), *((vector<MyPart,allocator<MyPart> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_602_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPart,allocator<MyPart> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyPart,allocator<MyPart> > G__TvectorlEMyPartcOallocatorlEMyPartgRsPgR;
static int G__eventdict_602_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyPart,allocator<MyPart> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyPart,allocator<MyPart> >*) (soff+(sizeof(vector<MyPart,allocator<MyPart> >)*i)))->~G__TvectorlEMyPartcOallocatorlEMyPartgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyPart,allocator<MyPart> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyPart,allocator<MyPart> >*) (soff))->~G__TvectorlEMyPartcOallocatorlEMyPartgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MySimVertex,allocator<MySimVertex> > */
static int G__eventdict_606_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MySimVertex,allocator<MySimVertex> >::reference obj = ((vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->at((vector<MySimVertex,allocator<MySimVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MySimVertex,allocator<MySimVertex> >::const_reference obj = ((const vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->at((vector<MySimVertex,allocator<MySimVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MySimVertex,allocator<MySimVertex> >::iterator* pobj;
         vector<MySimVertex,allocator<MySimVertex> >::iterator xobj = ((vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->begin();
         pobj = new vector<MySimVertex,allocator<MySimVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MySimVertex,allocator<MySimVertex> >::iterator* pobj;
         vector<MySimVertex,allocator<MySimVertex> >::iterator xobj = ((vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->end();
         pobj = new vector<MySimVertex,allocator<MySimVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MySimVertex,allocator<MySimVertex> >::reverse_iterator* pobj;
         vector<MySimVertex,allocator<MySimVertex> >::reverse_iterator xobj = ((vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MySimVertex,allocator<MySimVertex> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MySimVertex,allocator<MySimVertex> >::reverse_iterator* pobj;
         vector<MySimVertex,allocator<MySimVertex> >::reverse_iterator xobj = ((vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->rend();
         pobj = new vector<MySimVertex,allocator<MySimVertex> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->resize((vector<MySimVertex,allocator<MySimVertex> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->resize((vector<MySimVertex,allocator<MySimVertex> >::size_type) G__int(libp->para[0]), *((MySimVertex*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MySimVertex,allocator<MySimVertex> >::reference obj = ((vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->operator[]((vector<MySimVertex,allocator<MySimVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MySimVertex,allocator<MySimVertex> >::const_reference obj = ((const vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->operator[]((vector<MySimVertex,allocator<MySimVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MySimVertex,allocator<MySimVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MySimVertex,allocator<MySimVertex> >[n];
     } else {
       p = new((void*) gvp) vector<MySimVertex,allocator<MySimVertex> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MySimVertex,allocator<MySimVertex> >;
     } else {
       p = new((void*) gvp) vector<MySimVertex,allocator<MySimVertex> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MySimVertex,allocator<MySimVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MySimVertex,allocator<MySimVertex> >((vector<MySimVertex,allocator<MySimVertex> >::size_type) G__int(libp->para[0]), *(MySimVertex*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MySimVertex,allocator<MySimVertex> >((vector<MySimVertex,allocator<MySimVertex> >::size_type) G__int(libp->para[0]), *(MySimVertex*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MySimVertex,allocator<MySimVertex> >((vector<MySimVertex,allocator<MySimVertex> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MySimVertex,allocator<MySimVertex> >((vector<MySimVertex,allocator<MySimVertex> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MySimVertex,allocator<MySimVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MySimVertex,allocator<MySimVertex> >(*(vector<MySimVertex,allocator<MySimVertex> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MySimVertex,allocator<MySimVertex> >(*(vector<MySimVertex,allocator<MySimVertex> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MySimVertex,allocator<MySimVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MySimVertex,allocator<MySimVertex> >(*((vector<MySimVertex,allocator<MySimVertex> >::const_iterator*) G__int(libp->para[0])), *((vector<MySimVertex,allocator<MySimVertex> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MySimVertex,allocator<MySimVertex> >(*((vector<MySimVertex,allocator<MySimVertex> >::const_iterator*) G__int(libp->para[0])), *((vector<MySimVertex,allocator<MySimVertex> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MySimVertex,allocator<MySimVertex> >& obj = ((vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->operator=(*(vector<MySimVertex,allocator<MySimVertex> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->reserve((vector<MySimVertex,allocator<MySimVertex> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MySimVertex& obj = ((vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MySimVertex& obj = ((vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->push_back(*(MySimVertex*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->swap(*(vector<MySimVertex,allocator<MySimVertex> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MySimVertex,allocator<MySimVertex> >::iterator* pobj;
         vector<MySimVertex,allocator<MySimVertex> >::iterator xobj = ((vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->insert(*((vector<MySimVertex,allocator<MySimVertex> >::iterator*) G__int(libp->para[0])), *(MySimVertex*) libp->para[1].ref);
         pobj = new vector<MySimVertex,allocator<MySimVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->insert(*((vector<MySimVertex,allocator<MySimVertex> >::iterator*) G__int(libp->para[0])), *((vector<MySimVertex,allocator<MySimVertex> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MySimVertex,allocator<MySimVertex> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->insert(*((vector<MySimVertex,allocator<MySimVertex> >::iterator*) G__int(libp->para[0])), (vector<MySimVertex,allocator<MySimVertex> >::size_type) G__int(libp->para[1])
, *(MySimVertex*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->erase(*((vector<MySimVertex,allocator<MySimVertex> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->erase(*((vector<MySimVertex,allocator<MySimVertex> >::iterator*) G__int(libp->para[0])), *((vector<MySimVertex,allocator<MySimVertex> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_606_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MySimVertex,allocator<MySimVertex> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MySimVertex,allocator<MySimVertex> > G__TvectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR;
static int G__eventdict_606_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MySimVertex,allocator<MySimVertex> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MySimVertex,allocator<MySimVertex> >*) (soff+(sizeof(vector<MySimVertex,allocator<MySimVertex> >)*i)))->~G__TvectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MySimVertex,allocator<MySimVertex> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MySimVertex,allocator<MySimVertex> >*) (soff))->~G__TvectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyVertex,allocator<MyVertex> > */
static int G__eventdict_610_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyVertex,allocator<MyVertex> >::reference obj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->at((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::const_reference obj = ((const vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->at((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::iterator* pobj;
         vector<MyVertex,allocator<MyVertex> >::iterator xobj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->begin();
         pobj = new vector<MyVertex,allocator<MyVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::iterator* pobj;
         vector<MyVertex,allocator<MyVertex> >::iterator xobj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->end();
         pobj = new vector<MyVertex,allocator<MyVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::reverse_iterator* pobj;
         vector<MyVertex,allocator<MyVertex> >::reverse_iterator xobj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyVertex,allocator<MyVertex> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::reverse_iterator* pobj;
         vector<MyVertex,allocator<MyVertex> >::reverse_iterator xobj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->rend();
         pobj = new vector<MyVertex,allocator<MyVertex> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->resize((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->resize((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]), *((MyVertex*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyVertex,allocator<MyVertex> >::reference obj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->operator[]((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::const_reference obj = ((const vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->operator[]((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyVertex,allocator<MyVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyVertex,allocator<MyVertex> >[n];
     } else {
       p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyVertex,allocator<MyVertex> >;
     } else {
       p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyVertex,allocator<MyVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyVertex,allocator<MyVertex> >((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]), *(MyVertex*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]), *(MyVertex*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyVertex,allocator<MyVertex> >((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyVertex,allocator<MyVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyVertex,allocator<MyVertex> >(*(vector<MyVertex,allocator<MyVertex> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >(*(vector<MyVertex,allocator<MyVertex> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyVertex,allocator<MyVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyVertex,allocator<MyVertex> >(*((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[0])), *((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >(*((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[0])), *((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyVertex,allocator<MyVertex> >& obj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->operator=(*(vector<MyVertex,allocator<MyVertex> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->reserve((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyVertex& obj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyVertex& obj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->push_back(*(MyVertex*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->swap(*(vector<MyVertex,allocator<MyVertex> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::iterator* pobj;
         vector<MyVertex,allocator<MyVertex> >::iterator xobj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->insert(*((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[0])), *(MyVertex*) libp->para[1].ref);
         pobj = new vector<MyVertex,allocator<MyVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->insert(*((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[0])), *((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->insert(*((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[0])), (vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[1])
, *(MyVertex*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->erase(*((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->erase(*((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[0])), *((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_610_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyVertex,allocator<MyVertex> > G__TvectorlEMyVertexcOallocatorlEMyVertexgRsPgR;
static int G__eventdict_610_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyVertex,allocator<MyVertex> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyVertex,allocator<MyVertex> >*) (soff+(sizeof(vector<MyVertex,allocator<MyVertex> >)*i)))->~G__TvectorlEMyVertexcOallocatorlEMyVertexgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyVertex,allocator<MyVertex> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyVertex,allocator<MyVertex> >*) (soff))->~G__TvectorlEMyVertexcOallocatorlEMyVertexgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyElectron,allocator<MyElectron> > */
static int G__eventdict_614_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyElectron,allocator<MyElectron> >::reference obj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->at((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyElectron,allocator<MyElectron> >::const_reference obj = ((const vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->at((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyElectron,allocator<MyElectron> >::iterator* pobj;
         vector<MyElectron,allocator<MyElectron> >::iterator xobj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->begin();
         pobj = new vector<MyElectron,allocator<MyElectron> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyElectron,allocator<MyElectron> >::iterator* pobj;
         vector<MyElectron,allocator<MyElectron> >::iterator xobj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->end();
         pobj = new vector<MyElectron,allocator<MyElectron> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyElectron,allocator<MyElectron> >::reverse_iterator* pobj;
         vector<MyElectron,allocator<MyElectron> >::reverse_iterator xobj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyElectron,allocator<MyElectron> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyElectron,allocator<MyElectron> >::reverse_iterator* pobj;
         vector<MyElectron,allocator<MyElectron> >::reverse_iterator xobj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->rend();
         pobj = new vector<MyElectron,allocator<MyElectron> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->resize((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->resize((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]), *((MyElectron*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyElectron,allocator<MyElectron> >::reference obj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->operator[]((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyElectron,allocator<MyElectron> >::const_reference obj = ((const vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->operator[]((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyElectron,allocator<MyElectron> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyElectron,allocator<MyElectron> >[n];
     } else {
       p = new((void*) gvp) vector<MyElectron,allocator<MyElectron> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyElectron,allocator<MyElectron> >;
     } else {
       p = new((void*) gvp) vector<MyElectron,allocator<MyElectron> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyElectron,allocator<MyElectron> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyElectron,allocator<MyElectron> >((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]), *(MyElectron*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyElectron,allocator<MyElectron> >((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]), *(MyElectron*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyElectron,allocator<MyElectron> >((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyElectron,allocator<MyElectron> >((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyElectron,allocator<MyElectron> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyElectron,allocator<MyElectron> >(*(vector<MyElectron,allocator<MyElectron> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyElectron,allocator<MyElectron> >(*(vector<MyElectron,allocator<MyElectron> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyElectron,allocator<MyElectron> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyElectron,allocator<MyElectron> >(*((vector<MyElectron,allocator<MyElectron> >::const_iterator*) G__int(libp->para[0])), *((vector<MyElectron,allocator<MyElectron> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyElectron,allocator<MyElectron> >(*((vector<MyElectron,allocator<MyElectron> >::const_iterator*) G__int(libp->para[0])), *((vector<MyElectron,allocator<MyElectron> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyElectron,allocator<MyElectron> >& obj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->operator=(*(vector<MyElectron,allocator<MyElectron> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->reserve((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyElectron& obj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyElectron& obj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->push_back(*(MyElectron*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->swap(*(vector<MyElectron,allocator<MyElectron> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyElectron,allocator<MyElectron> >::iterator* pobj;
         vector<MyElectron,allocator<MyElectron> >::iterator xobj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->insert(*((vector<MyElectron,allocator<MyElectron> >::iterator*) G__int(libp->para[0])), *(MyElectron*) libp->para[1].ref);
         pobj = new vector<MyElectron,allocator<MyElectron> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->insert(*((vector<MyElectron,allocator<MyElectron> >::iterator*) G__int(libp->para[0])), *((vector<MyElectron,allocator<MyElectron> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyElectron,allocator<MyElectron> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->insert(*((vector<MyElectron,allocator<MyElectron> >::iterator*) G__int(libp->para[0])), (vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[1])
, *(MyElectron*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->erase(*((vector<MyElectron,allocator<MyElectron> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->erase(*((vector<MyElectron,allocator<MyElectron> >::iterator*) G__int(libp->para[0])), *((vector<MyElectron,allocator<MyElectron> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_614_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyElectron,allocator<MyElectron> > G__TvectorlEMyElectroncOallocatorlEMyElectrongRsPgR;
static int G__eventdict_614_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyElectron,allocator<MyElectron> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyElectron,allocator<MyElectron> >*) (soff+(sizeof(vector<MyElectron,allocator<MyElectron> >)*i)))->~G__TvectorlEMyElectroncOallocatorlEMyElectrongRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyElectron,allocator<MyElectron> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyElectron,allocator<MyElectron> >*) (soff))->~G__TvectorlEMyElectroncOallocatorlEMyElectrongRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyMuon,allocator<MyMuon> > */
static int G__eventdict_618_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyMuon,allocator<MyMuon> >::reference obj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->at((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMuon,allocator<MyMuon> >::const_reference obj = ((const vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->at((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMuon,allocator<MyMuon> >::iterator* pobj;
         vector<MyMuon,allocator<MyMuon> >::iterator xobj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->begin();
         pobj = new vector<MyMuon,allocator<MyMuon> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMuon,allocator<MyMuon> >::iterator* pobj;
         vector<MyMuon,allocator<MyMuon> >::iterator xobj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->end();
         pobj = new vector<MyMuon,allocator<MyMuon> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMuon,allocator<MyMuon> >::reverse_iterator* pobj;
         vector<MyMuon,allocator<MyMuon> >::reverse_iterator xobj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyMuon,allocator<MyMuon> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMuon,allocator<MyMuon> >::reverse_iterator* pobj;
         vector<MyMuon,allocator<MyMuon> >::reverse_iterator xobj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->rend();
         pobj = new vector<MyMuon,allocator<MyMuon> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->resize((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->resize((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]), *((MyMuon*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyMuon,allocator<MyMuon> >::reference obj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->operator[]((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMuon,allocator<MyMuon> >::const_reference obj = ((const vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->operator[]((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMuon,allocator<MyMuon> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMuon,allocator<MyMuon> >[n];
     } else {
       p = new((void*) gvp) vector<MyMuon,allocator<MyMuon> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMuon,allocator<MyMuon> >;
     } else {
       p = new((void*) gvp) vector<MyMuon,allocator<MyMuon> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMuon,allocator<MyMuon> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMuon,allocator<MyMuon> >((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]), *(MyMuon*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyMuon,allocator<MyMuon> >((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]), *(MyMuon*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMuon,allocator<MyMuon> >((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyMuon,allocator<MyMuon> >((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMuon,allocator<MyMuon> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyMuon,allocator<MyMuon> >(*(vector<MyMuon,allocator<MyMuon> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyMuon,allocator<MyMuon> >(*(vector<MyMuon,allocator<MyMuon> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMuon,allocator<MyMuon> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyMuon,allocator<MyMuon> >(*((vector<MyMuon,allocator<MyMuon> >::const_iterator*) G__int(libp->para[0])), *((vector<MyMuon,allocator<MyMuon> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyMuon,allocator<MyMuon> >(*((vector<MyMuon,allocator<MyMuon> >::const_iterator*) G__int(libp->para[0])), *((vector<MyMuon,allocator<MyMuon> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyMuon,allocator<MyMuon> >& obj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->operator=(*(vector<MyMuon,allocator<MyMuon> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->reserve((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyMuon& obj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyMuon& obj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->push_back(*(MyMuon*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->swap(*(vector<MyMuon,allocator<MyMuon> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMuon,allocator<MyMuon> >::iterator* pobj;
         vector<MyMuon,allocator<MyMuon> >::iterator xobj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->insert(*((vector<MyMuon,allocator<MyMuon> >::iterator*) G__int(libp->para[0])), *(MyMuon*) libp->para[1].ref);
         pobj = new vector<MyMuon,allocator<MyMuon> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->insert(*((vector<MyMuon,allocator<MyMuon> >::iterator*) G__int(libp->para[0])), *((vector<MyMuon,allocator<MyMuon> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyMuon,allocator<MyMuon> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->insert(*((vector<MyMuon,allocator<MyMuon> >::iterator*) G__int(libp->para[0])), (vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[1])
, *(MyMuon*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->erase(*((vector<MyMuon,allocator<MyMuon> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->erase(*((vector<MyMuon,allocator<MyMuon> >::iterator*) G__int(libp->para[0])), *((vector<MyMuon,allocator<MyMuon> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_618_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyMuon,allocator<MyMuon> > G__TvectorlEMyMuoncOallocatorlEMyMuongRsPgR;
static int G__eventdict_618_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyMuon,allocator<MyMuon> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyMuon,allocator<MyMuon> >*) (soff+(sizeof(vector<MyMuon,allocator<MyMuon> >)*i)))->~G__TvectorlEMyMuoncOallocatorlEMyMuongRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyMuon,allocator<MyMuon> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyMuon,allocator<MyMuon> >*) (soff))->~G__TvectorlEMyMuoncOallocatorlEMyMuongRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyBaseJet,allocator<MyBaseJet> > */
static int G__eventdict_622_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyBaseJet,allocator<MyBaseJet> >::reference obj = ((vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->at((vector<MyBaseJet,allocator<MyBaseJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyBaseJet,allocator<MyBaseJet> >::const_reference obj = ((const vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->at((vector<MyBaseJet,allocator<MyBaseJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyBaseJet,allocator<MyBaseJet> >::iterator* pobj;
         vector<MyBaseJet,allocator<MyBaseJet> >::iterator xobj = ((vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->begin();
         pobj = new vector<MyBaseJet,allocator<MyBaseJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyBaseJet,allocator<MyBaseJet> >::iterator* pobj;
         vector<MyBaseJet,allocator<MyBaseJet> >::iterator xobj = ((vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->end();
         pobj = new vector<MyBaseJet,allocator<MyBaseJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyBaseJet,allocator<MyBaseJet> >::reverse_iterator* pobj;
         vector<MyBaseJet,allocator<MyBaseJet> >::reverse_iterator xobj = ((vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyBaseJet,allocator<MyBaseJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyBaseJet,allocator<MyBaseJet> >::reverse_iterator* pobj;
         vector<MyBaseJet,allocator<MyBaseJet> >::reverse_iterator xobj = ((vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->rend();
         pobj = new vector<MyBaseJet,allocator<MyBaseJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->resize((vector<MyBaseJet,allocator<MyBaseJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->resize((vector<MyBaseJet,allocator<MyBaseJet> >::size_type) G__int(libp->para[0]), *((MyBaseJet*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyBaseJet,allocator<MyBaseJet> >::reference obj = ((vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->operator[]((vector<MyBaseJet,allocator<MyBaseJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyBaseJet,allocator<MyBaseJet> >::const_reference obj = ((const vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->operator[]((vector<MyBaseJet,allocator<MyBaseJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyBaseJet,allocator<MyBaseJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyBaseJet,allocator<MyBaseJet> >[n];
     } else {
       p = new((void*) gvp) vector<MyBaseJet,allocator<MyBaseJet> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyBaseJet,allocator<MyBaseJet> >;
     } else {
       p = new((void*) gvp) vector<MyBaseJet,allocator<MyBaseJet> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyBaseJet,allocator<MyBaseJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyBaseJet,allocator<MyBaseJet> >((vector<MyBaseJet,allocator<MyBaseJet> >::size_type) G__int(libp->para[0]), *(MyBaseJet*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyBaseJet,allocator<MyBaseJet> >((vector<MyBaseJet,allocator<MyBaseJet> >::size_type) G__int(libp->para[0]), *(MyBaseJet*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyBaseJet,allocator<MyBaseJet> >((vector<MyBaseJet,allocator<MyBaseJet> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyBaseJet,allocator<MyBaseJet> >((vector<MyBaseJet,allocator<MyBaseJet> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyBaseJet,allocator<MyBaseJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyBaseJet,allocator<MyBaseJet> >(*(vector<MyBaseJet,allocator<MyBaseJet> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyBaseJet,allocator<MyBaseJet> >(*(vector<MyBaseJet,allocator<MyBaseJet> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyBaseJet,allocator<MyBaseJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyBaseJet,allocator<MyBaseJet> >(*((vector<MyBaseJet,allocator<MyBaseJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyBaseJet,allocator<MyBaseJet> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyBaseJet,allocator<MyBaseJet> >(*((vector<MyBaseJet,allocator<MyBaseJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyBaseJet,allocator<MyBaseJet> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyBaseJet,allocator<MyBaseJet> >& obj = ((vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->operator=(*(vector<MyBaseJet,allocator<MyBaseJet> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->reserve((vector<MyBaseJet,allocator<MyBaseJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyBaseJet& obj = ((vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyBaseJet& obj = ((vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->push_back(*(MyBaseJet*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->swap(*(vector<MyBaseJet,allocator<MyBaseJet> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyBaseJet,allocator<MyBaseJet> >::iterator* pobj;
         vector<MyBaseJet,allocator<MyBaseJet> >::iterator xobj = ((vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->insert(*((vector<MyBaseJet,allocator<MyBaseJet> >::iterator*) G__int(libp->para[0])), *(MyBaseJet*) libp->para[1].ref);
         pobj = new vector<MyBaseJet,allocator<MyBaseJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->insert(*((vector<MyBaseJet,allocator<MyBaseJet> >::iterator*) G__int(libp->para[0])), *((vector<MyBaseJet,allocator<MyBaseJet> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyBaseJet,allocator<MyBaseJet> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->insert(*((vector<MyBaseJet,allocator<MyBaseJet> >::iterator*) G__int(libp->para[0])), (vector<MyBaseJet,allocator<MyBaseJet> >::size_type) G__int(libp->para[1])
, *(MyBaseJet*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->erase(*((vector<MyBaseJet,allocator<MyBaseJet> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->erase(*((vector<MyBaseJet,allocator<MyBaseJet> >::iterator*) G__int(libp->para[0])), *((vector<MyBaseJet,allocator<MyBaseJet> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_622_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyBaseJet,allocator<MyBaseJet> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyBaseJet,allocator<MyBaseJet> > G__TvectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR;
static int G__eventdict_622_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyBaseJet,allocator<MyBaseJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyBaseJet,allocator<MyBaseJet> >*) (soff+(sizeof(vector<MyBaseJet,allocator<MyBaseJet> >)*i)))->~G__TvectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyBaseJet,allocator<MyBaseJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyBaseJet,allocator<MyBaseJet> >*) (soff))->~G__TvectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyJet,allocator<MyJet> > */
static int G__eventdict_626_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyJet,allocator<MyJet> >::reference obj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->at((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyJet,allocator<MyJet> >::const_reference obj = ((const vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->at((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyJet,allocator<MyJet> >::iterator* pobj;
         vector<MyJet,allocator<MyJet> >::iterator xobj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->begin();
         pobj = new vector<MyJet,allocator<MyJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyJet,allocator<MyJet> >::iterator* pobj;
         vector<MyJet,allocator<MyJet> >::iterator xobj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->end();
         pobj = new vector<MyJet,allocator<MyJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyJet,allocator<MyJet> >::reverse_iterator* pobj;
         vector<MyJet,allocator<MyJet> >::reverse_iterator xobj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyJet,allocator<MyJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyJet,allocator<MyJet> >::reverse_iterator* pobj;
         vector<MyJet,allocator<MyJet> >::reverse_iterator xobj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->rend();
         pobj = new vector<MyJet,allocator<MyJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->resize((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->resize((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]), *((MyJet*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyJet,allocator<MyJet> >::reference obj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->operator[]((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyJet,allocator<MyJet> >::const_reference obj = ((const vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->operator[]((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyJet,allocator<MyJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyJet,allocator<MyJet> >[n];
     } else {
       p = new((void*) gvp) vector<MyJet,allocator<MyJet> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyJet,allocator<MyJet> >;
     } else {
       p = new((void*) gvp) vector<MyJet,allocator<MyJet> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyJet,allocator<MyJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyJet,allocator<MyJet> >((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]), *(MyJet*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyJet,allocator<MyJet> >((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]), *(MyJet*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyJet,allocator<MyJet> >((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyJet,allocator<MyJet> >((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyJet,allocator<MyJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyJet,allocator<MyJet> >(*(vector<MyJet,allocator<MyJet> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyJet,allocator<MyJet> >(*(vector<MyJet,allocator<MyJet> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyJet,allocator<MyJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyJet,allocator<MyJet> >(*((vector<MyJet,allocator<MyJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyJet,allocator<MyJet> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyJet,allocator<MyJet> >(*((vector<MyJet,allocator<MyJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyJet,allocator<MyJet> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyJet,allocator<MyJet> >& obj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->operator=(*(vector<MyJet,allocator<MyJet> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->reserve((vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyJet& obj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyJet& obj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->push_back(*(MyJet*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->swap(*(vector<MyJet,allocator<MyJet> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyJet,allocator<MyJet> >::iterator* pobj;
         vector<MyJet,allocator<MyJet> >::iterator xobj = ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->insert(*((vector<MyJet,allocator<MyJet> >::iterator*) G__int(libp->para[0])), *(MyJet*) libp->para[1].ref);
         pobj = new vector<MyJet,allocator<MyJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->insert(*((vector<MyJet,allocator<MyJet> >::iterator*) G__int(libp->para[0])), *((vector<MyJet,allocator<MyJet> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyJet,allocator<MyJet> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->insert(*((vector<MyJet,allocator<MyJet> >::iterator*) G__int(libp->para[0])), (vector<MyJet,allocator<MyJet> >::size_type) G__int(libp->para[1])
, *(MyJet*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->erase(*((vector<MyJet,allocator<MyJet> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->erase(*((vector<MyJet,allocator<MyJet> >::iterator*) G__int(libp->para[0])), *((vector<MyJet,allocator<MyJet> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_626_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyJet,allocator<MyJet> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyJet,allocator<MyJet> > G__TvectorlEMyJetcOallocatorlEMyJetgRsPgR;
static int G__eventdict_626_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyJet,allocator<MyJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyJet,allocator<MyJet> >*) (soff+(sizeof(vector<MyJet,allocator<MyJet> >)*i)))->~G__TvectorlEMyJetcOallocatorlEMyJetgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyJet,allocator<MyJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyJet,allocator<MyJet> >*) (soff))->~G__TvectorlEMyJetcOallocatorlEMyJetgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyCaloJet,allocator<MyCaloJet> > */
static int G__eventdict_630_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyCaloJet,allocator<MyCaloJet> >::reference obj = ((vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->at((vector<MyCaloJet,allocator<MyCaloJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCaloJet,allocator<MyCaloJet> >::const_reference obj = ((const vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->at((vector<MyCaloJet,allocator<MyCaloJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCaloJet,allocator<MyCaloJet> >::iterator* pobj;
         vector<MyCaloJet,allocator<MyCaloJet> >::iterator xobj = ((vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->begin();
         pobj = new vector<MyCaloJet,allocator<MyCaloJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCaloJet,allocator<MyCaloJet> >::iterator* pobj;
         vector<MyCaloJet,allocator<MyCaloJet> >::iterator xobj = ((vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->end();
         pobj = new vector<MyCaloJet,allocator<MyCaloJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCaloJet,allocator<MyCaloJet> >::reverse_iterator* pobj;
         vector<MyCaloJet,allocator<MyCaloJet> >::reverse_iterator xobj = ((vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyCaloJet,allocator<MyCaloJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCaloJet,allocator<MyCaloJet> >::reverse_iterator* pobj;
         vector<MyCaloJet,allocator<MyCaloJet> >::reverse_iterator xobj = ((vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->rend();
         pobj = new vector<MyCaloJet,allocator<MyCaloJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->resize((vector<MyCaloJet,allocator<MyCaloJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->resize((vector<MyCaloJet,allocator<MyCaloJet> >::size_type) G__int(libp->para[0]), *((MyCaloJet*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyCaloJet,allocator<MyCaloJet> >::reference obj = ((vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->operator[]((vector<MyCaloJet,allocator<MyCaloJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCaloJet,allocator<MyCaloJet> >::const_reference obj = ((const vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->operator[]((vector<MyCaloJet,allocator<MyCaloJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCaloJet,allocator<MyCaloJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCaloJet,allocator<MyCaloJet> >[n];
     } else {
       p = new((void*) gvp) vector<MyCaloJet,allocator<MyCaloJet> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCaloJet,allocator<MyCaloJet> >;
     } else {
       p = new((void*) gvp) vector<MyCaloJet,allocator<MyCaloJet> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCaloJet,allocator<MyCaloJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCaloJet,allocator<MyCaloJet> >((vector<MyCaloJet,allocator<MyCaloJet> >::size_type) G__int(libp->para[0]), *(MyCaloJet*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyCaloJet,allocator<MyCaloJet> >((vector<MyCaloJet,allocator<MyCaloJet> >::size_type) G__int(libp->para[0]), *(MyCaloJet*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCaloJet,allocator<MyCaloJet> >((vector<MyCaloJet,allocator<MyCaloJet> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyCaloJet,allocator<MyCaloJet> >((vector<MyCaloJet,allocator<MyCaloJet> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCaloJet,allocator<MyCaloJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyCaloJet,allocator<MyCaloJet> >(*(vector<MyCaloJet,allocator<MyCaloJet> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyCaloJet,allocator<MyCaloJet> >(*(vector<MyCaloJet,allocator<MyCaloJet> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCaloJet,allocator<MyCaloJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyCaloJet,allocator<MyCaloJet> >(*((vector<MyCaloJet,allocator<MyCaloJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyCaloJet,allocator<MyCaloJet> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyCaloJet,allocator<MyCaloJet> >(*((vector<MyCaloJet,allocator<MyCaloJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyCaloJet,allocator<MyCaloJet> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyCaloJet,allocator<MyCaloJet> >& obj = ((vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->operator=(*(vector<MyCaloJet,allocator<MyCaloJet> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->reserve((vector<MyCaloJet,allocator<MyCaloJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCaloJet& obj = ((vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCaloJet& obj = ((vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->push_back(*(MyCaloJet*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->swap(*(vector<MyCaloJet,allocator<MyCaloJet> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCaloJet,allocator<MyCaloJet> >::iterator* pobj;
         vector<MyCaloJet,allocator<MyCaloJet> >::iterator xobj = ((vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->insert(*((vector<MyCaloJet,allocator<MyCaloJet> >::iterator*) G__int(libp->para[0])), *(MyCaloJet*) libp->para[1].ref);
         pobj = new vector<MyCaloJet,allocator<MyCaloJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->insert(*((vector<MyCaloJet,allocator<MyCaloJet> >::iterator*) G__int(libp->para[0])), *((vector<MyCaloJet,allocator<MyCaloJet> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyCaloJet,allocator<MyCaloJet> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->insert(*((vector<MyCaloJet,allocator<MyCaloJet> >::iterator*) G__int(libp->para[0])), (vector<MyCaloJet,allocator<MyCaloJet> >::size_type) G__int(libp->para[1])
, *(MyCaloJet*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->erase(*((vector<MyCaloJet,allocator<MyCaloJet> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->erase(*((vector<MyCaloJet,allocator<MyCaloJet> >::iterator*) G__int(libp->para[0])), *((vector<MyCaloJet,allocator<MyCaloJet> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_630_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloJet,allocator<MyCaloJet> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyCaloJet,allocator<MyCaloJet> > G__TvectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR;
static int G__eventdict_630_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyCaloJet,allocator<MyCaloJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyCaloJet,allocator<MyCaloJet> >*) (soff+(sizeof(vector<MyCaloJet,allocator<MyCaloJet> >)*i)))->~G__TvectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyCaloJet,allocator<MyCaloJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyCaloJet,allocator<MyCaloJet> >*) (soff))->~G__TvectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyTrackJet,allocator<MyTrackJet> > */
static int G__eventdict_634_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyTrackJet,allocator<MyTrackJet> >::reference obj = ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->at((vector<MyTrackJet,allocator<MyTrackJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTrackJet,allocator<MyTrackJet> >::const_reference obj = ((const vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->at((vector<MyTrackJet,allocator<MyTrackJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTrackJet,allocator<MyTrackJet> >::iterator* pobj;
         vector<MyTrackJet,allocator<MyTrackJet> >::iterator xobj = ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->begin();
         pobj = new vector<MyTrackJet,allocator<MyTrackJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTrackJet,allocator<MyTrackJet> >::iterator* pobj;
         vector<MyTrackJet,allocator<MyTrackJet> >::iterator xobj = ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->end();
         pobj = new vector<MyTrackJet,allocator<MyTrackJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTrackJet,allocator<MyTrackJet> >::reverse_iterator* pobj;
         vector<MyTrackJet,allocator<MyTrackJet> >::reverse_iterator xobj = ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyTrackJet,allocator<MyTrackJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTrackJet,allocator<MyTrackJet> >::reverse_iterator* pobj;
         vector<MyTrackJet,allocator<MyTrackJet> >::reverse_iterator xobj = ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->rend();
         pobj = new vector<MyTrackJet,allocator<MyTrackJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->resize((vector<MyTrackJet,allocator<MyTrackJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->resize((vector<MyTrackJet,allocator<MyTrackJet> >::size_type) G__int(libp->para[0]), *((MyTrackJet*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyTrackJet,allocator<MyTrackJet> >::reference obj = ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->operator[]((vector<MyTrackJet,allocator<MyTrackJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTrackJet,allocator<MyTrackJet> >::const_reference obj = ((const vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->operator[]((vector<MyTrackJet,allocator<MyTrackJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyTrackJet,allocator<MyTrackJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyTrackJet,allocator<MyTrackJet> >[n];
     } else {
       p = new((void*) gvp) vector<MyTrackJet,allocator<MyTrackJet> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyTrackJet,allocator<MyTrackJet> >;
     } else {
       p = new((void*) gvp) vector<MyTrackJet,allocator<MyTrackJet> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyTrackJet,allocator<MyTrackJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyTrackJet,allocator<MyTrackJet> >((vector<MyTrackJet,allocator<MyTrackJet> >::size_type) G__int(libp->para[0]), *(MyTrackJet*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyTrackJet,allocator<MyTrackJet> >((vector<MyTrackJet,allocator<MyTrackJet> >::size_type) G__int(libp->para[0]), *(MyTrackJet*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyTrackJet,allocator<MyTrackJet> >((vector<MyTrackJet,allocator<MyTrackJet> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyTrackJet,allocator<MyTrackJet> >((vector<MyTrackJet,allocator<MyTrackJet> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyTrackJet,allocator<MyTrackJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyTrackJet,allocator<MyTrackJet> >(*(vector<MyTrackJet,allocator<MyTrackJet> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyTrackJet,allocator<MyTrackJet> >(*(vector<MyTrackJet,allocator<MyTrackJet> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyTrackJet,allocator<MyTrackJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyTrackJet,allocator<MyTrackJet> >(*((vector<MyTrackJet,allocator<MyTrackJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyTrackJet,allocator<MyTrackJet> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyTrackJet,allocator<MyTrackJet> >(*((vector<MyTrackJet,allocator<MyTrackJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyTrackJet,allocator<MyTrackJet> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyTrackJet,allocator<MyTrackJet> >& obj = ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->operator=(*(vector<MyTrackJet,allocator<MyTrackJet> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->reserve((vector<MyTrackJet,allocator<MyTrackJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyTrackJet& obj = ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyTrackJet& obj = ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->push_back(*(MyTrackJet*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->swap(*(vector<MyTrackJet,allocator<MyTrackJet> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTrackJet,allocator<MyTrackJet> >::iterator* pobj;
         vector<MyTrackJet,allocator<MyTrackJet> >::iterator xobj = ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->insert(*((vector<MyTrackJet,allocator<MyTrackJet> >::iterator*) G__int(libp->para[0])), *(MyTrackJet*) libp->para[1].ref);
         pobj = new vector<MyTrackJet,allocator<MyTrackJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->insert(*((vector<MyTrackJet,allocator<MyTrackJet> >::iterator*) G__int(libp->para[0])), *((vector<MyTrackJet,allocator<MyTrackJet> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyTrackJet,allocator<MyTrackJet> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->insert(*((vector<MyTrackJet,allocator<MyTrackJet> >::iterator*) G__int(libp->para[0])), (vector<MyTrackJet,allocator<MyTrackJet> >::size_type) G__int(libp->para[1])
, *(MyTrackJet*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->erase(*((vector<MyTrackJet,allocator<MyTrackJet> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->erase(*((vector<MyTrackJet,allocator<MyTrackJet> >::iterator*) G__int(libp->para[0])), *((vector<MyTrackJet,allocator<MyTrackJet> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_634_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTrackJet,allocator<MyTrackJet> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyTrackJet,allocator<MyTrackJet> > G__TvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR;
static int G__eventdict_634_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyTrackJet,allocator<MyTrackJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyTrackJet,allocator<MyTrackJet> >*) (soff+(sizeof(vector<MyTrackJet,allocator<MyTrackJet> >)*i)))->~G__TvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyTrackJet,allocator<MyTrackJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyTrackJet,allocator<MyTrackJet> >*) (soff))->~G__TvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyPFJet,allocator<MyPFJet> > */
static int G__eventdict_638_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyPFJet,allocator<MyPFJet> >::reference obj = ((vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->at((vector<MyPFJet,allocator<MyPFJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPFJet,allocator<MyPFJet> >::const_reference obj = ((const vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->at((vector<MyPFJet,allocator<MyPFJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPFJet,allocator<MyPFJet> >::iterator* pobj;
         vector<MyPFJet,allocator<MyPFJet> >::iterator xobj = ((vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->begin();
         pobj = new vector<MyPFJet,allocator<MyPFJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPFJet,allocator<MyPFJet> >::iterator* pobj;
         vector<MyPFJet,allocator<MyPFJet> >::iterator xobj = ((vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->end();
         pobj = new vector<MyPFJet,allocator<MyPFJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPFJet,allocator<MyPFJet> >::reverse_iterator* pobj;
         vector<MyPFJet,allocator<MyPFJet> >::reverse_iterator xobj = ((vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyPFJet,allocator<MyPFJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPFJet,allocator<MyPFJet> >::reverse_iterator* pobj;
         vector<MyPFJet,allocator<MyPFJet> >::reverse_iterator xobj = ((vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->rend();
         pobj = new vector<MyPFJet,allocator<MyPFJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->resize((vector<MyPFJet,allocator<MyPFJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->resize((vector<MyPFJet,allocator<MyPFJet> >::size_type) G__int(libp->para[0]), *((MyPFJet*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyPFJet,allocator<MyPFJet> >::reference obj = ((vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->operator[]((vector<MyPFJet,allocator<MyPFJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPFJet,allocator<MyPFJet> >::const_reference obj = ((const vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->operator[]((vector<MyPFJet,allocator<MyPFJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyPFJet,allocator<MyPFJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyPFJet,allocator<MyPFJet> >[n];
     } else {
       p = new((void*) gvp) vector<MyPFJet,allocator<MyPFJet> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyPFJet,allocator<MyPFJet> >;
     } else {
       p = new((void*) gvp) vector<MyPFJet,allocator<MyPFJet> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyPFJet,allocator<MyPFJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyPFJet,allocator<MyPFJet> >((vector<MyPFJet,allocator<MyPFJet> >::size_type) G__int(libp->para[0]), *(MyPFJet*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyPFJet,allocator<MyPFJet> >((vector<MyPFJet,allocator<MyPFJet> >::size_type) G__int(libp->para[0]), *(MyPFJet*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyPFJet,allocator<MyPFJet> >((vector<MyPFJet,allocator<MyPFJet> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyPFJet,allocator<MyPFJet> >((vector<MyPFJet,allocator<MyPFJet> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyPFJet,allocator<MyPFJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyPFJet,allocator<MyPFJet> >(*(vector<MyPFJet,allocator<MyPFJet> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyPFJet,allocator<MyPFJet> >(*(vector<MyPFJet,allocator<MyPFJet> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyPFJet,allocator<MyPFJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyPFJet,allocator<MyPFJet> >(*((vector<MyPFJet,allocator<MyPFJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyPFJet,allocator<MyPFJet> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyPFJet,allocator<MyPFJet> >(*((vector<MyPFJet,allocator<MyPFJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyPFJet,allocator<MyPFJet> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyPFJet,allocator<MyPFJet> >& obj = ((vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->operator=(*(vector<MyPFJet,allocator<MyPFJet> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->reserve((vector<MyPFJet,allocator<MyPFJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyPFJet& obj = ((vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyPFJet& obj = ((vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->push_back(*(MyPFJet*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->swap(*(vector<MyPFJet,allocator<MyPFJet> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPFJet,allocator<MyPFJet> >::iterator* pobj;
         vector<MyPFJet,allocator<MyPFJet> >::iterator xobj = ((vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->insert(*((vector<MyPFJet,allocator<MyPFJet> >::iterator*) G__int(libp->para[0])), *(MyPFJet*) libp->para[1].ref);
         pobj = new vector<MyPFJet,allocator<MyPFJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->insert(*((vector<MyPFJet,allocator<MyPFJet> >::iterator*) G__int(libp->para[0])), *((vector<MyPFJet,allocator<MyPFJet> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyPFJet,allocator<MyPFJet> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->insert(*((vector<MyPFJet,allocator<MyPFJet> >::iterator*) G__int(libp->para[0])), (vector<MyPFJet,allocator<MyPFJet> >::size_type) G__int(libp->para[1])
, *(MyPFJet*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->erase(*((vector<MyPFJet,allocator<MyPFJet> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->erase(*((vector<MyPFJet,allocator<MyPFJet> >::iterator*) G__int(libp->para[0])), *((vector<MyPFJet,allocator<MyPFJet> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_638_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPFJet,allocator<MyPFJet> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyPFJet,allocator<MyPFJet> > G__TvectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR;
static int G__eventdict_638_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyPFJet,allocator<MyPFJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyPFJet,allocator<MyPFJet> >*) (soff+(sizeof(vector<MyPFJet,allocator<MyPFJet> >)*i)))->~G__TvectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyPFJet,allocator<MyPFJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyPFJet,allocator<MyPFJet> >*) (soff))->~G__TvectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyPFCand,allocator<MyPFCand> > */
static int G__eventdict_642_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyPFCand,allocator<MyPFCand> >::reference obj = ((vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->at((vector<MyPFCand,allocator<MyPFCand> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPFCand,allocator<MyPFCand> >::const_reference obj = ((const vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->at((vector<MyPFCand,allocator<MyPFCand> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPFCand,allocator<MyPFCand> >::iterator* pobj;
         vector<MyPFCand,allocator<MyPFCand> >::iterator xobj = ((vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->begin();
         pobj = new vector<MyPFCand,allocator<MyPFCand> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPFCand,allocator<MyPFCand> >::iterator* pobj;
         vector<MyPFCand,allocator<MyPFCand> >::iterator xobj = ((vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->end();
         pobj = new vector<MyPFCand,allocator<MyPFCand> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPFCand,allocator<MyPFCand> >::reverse_iterator* pobj;
         vector<MyPFCand,allocator<MyPFCand> >::reverse_iterator xobj = ((vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyPFCand,allocator<MyPFCand> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPFCand,allocator<MyPFCand> >::reverse_iterator* pobj;
         vector<MyPFCand,allocator<MyPFCand> >::reverse_iterator xobj = ((vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->rend();
         pobj = new vector<MyPFCand,allocator<MyPFCand> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->resize((vector<MyPFCand,allocator<MyPFCand> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->resize((vector<MyPFCand,allocator<MyPFCand> >::size_type) G__int(libp->para[0]), *((MyPFCand*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyPFCand,allocator<MyPFCand> >::reference obj = ((vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->operator[]((vector<MyPFCand,allocator<MyPFCand> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPFCand,allocator<MyPFCand> >::const_reference obj = ((const vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->operator[]((vector<MyPFCand,allocator<MyPFCand> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyPFCand,allocator<MyPFCand> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyPFCand,allocator<MyPFCand> >[n];
     } else {
       p = new((void*) gvp) vector<MyPFCand,allocator<MyPFCand> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyPFCand,allocator<MyPFCand> >;
     } else {
       p = new((void*) gvp) vector<MyPFCand,allocator<MyPFCand> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyPFCand,allocator<MyPFCand> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyPFCand,allocator<MyPFCand> >((vector<MyPFCand,allocator<MyPFCand> >::size_type) G__int(libp->para[0]), *(MyPFCand*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyPFCand,allocator<MyPFCand> >((vector<MyPFCand,allocator<MyPFCand> >::size_type) G__int(libp->para[0]), *(MyPFCand*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyPFCand,allocator<MyPFCand> >((vector<MyPFCand,allocator<MyPFCand> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyPFCand,allocator<MyPFCand> >((vector<MyPFCand,allocator<MyPFCand> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyPFCand,allocator<MyPFCand> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyPFCand,allocator<MyPFCand> >(*(vector<MyPFCand,allocator<MyPFCand> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyPFCand,allocator<MyPFCand> >(*(vector<MyPFCand,allocator<MyPFCand> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyPFCand,allocator<MyPFCand> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyPFCand,allocator<MyPFCand> >(*((vector<MyPFCand,allocator<MyPFCand> >::const_iterator*) G__int(libp->para[0])), *((vector<MyPFCand,allocator<MyPFCand> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyPFCand,allocator<MyPFCand> >(*((vector<MyPFCand,allocator<MyPFCand> >::const_iterator*) G__int(libp->para[0])), *((vector<MyPFCand,allocator<MyPFCand> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyPFCand,allocator<MyPFCand> >& obj = ((vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->operator=(*(vector<MyPFCand,allocator<MyPFCand> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->reserve((vector<MyPFCand,allocator<MyPFCand> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyPFCand& obj = ((vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyPFCand& obj = ((vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->push_back(*(MyPFCand*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->swap(*(vector<MyPFCand,allocator<MyPFCand> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyPFCand,allocator<MyPFCand> >::iterator* pobj;
         vector<MyPFCand,allocator<MyPFCand> >::iterator xobj = ((vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->insert(*((vector<MyPFCand,allocator<MyPFCand> >::iterator*) G__int(libp->para[0])), *(MyPFCand*) libp->para[1].ref);
         pobj = new vector<MyPFCand,allocator<MyPFCand> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->insert(*((vector<MyPFCand,allocator<MyPFCand> >::iterator*) G__int(libp->para[0])), *((vector<MyPFCand,allocator<MyPFCand> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyPFCand,allocator<MyPFCand> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->insert(*((vector<MyPFCand,allocator<MyPFCand> >::iterator*) G__int(libp->para[0])), (vector<MyPFCand,allocator<MyPFCand> >::size_type) G__int(libp->para[1])
, *(MyPFCand*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->erase(*((vector<MyPFCand,allocator<MyPFCand> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->erase(*((vector<MyPFCand,allocator<MyPFCand> >::iterator*) G__int(libp->para[0])), *((vector<MyPFCand,allocator<MyPFCand> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_642_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyPFCand,allocator<MyPFCand> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyPFCand,allocator<MyPFCand> > G__TvectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR;
static int G__eventdict_642_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyPFCand,allocator<MyPFCand> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyPFCand,allocator<MyPFCand> >*) (soff+(sizeof(vector<MyPFCand,allocator<MyPFCand> >)*i)))->~G__TvectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyPFCand,allocator<MyPFCand> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyPFCand,allocator<MyPFCand> >*) (soff))->~G__TvectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyCaloTower,allocator<MyCaloTower> > */
static int G__eventdict_646_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyCaloTower,allocator<MyCaloTower> >::reference obj = ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->at((vector<MyCaloTower,allocator<MyCaloTower> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCaloTower,allocator<MyCaloTower> >::const_reference obj = ((const vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->at((vector<MyCaloTower,allocator<MyCaloTower> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCaloTower,allocator<MyCaloTower> >::iterator* pobj;
         vector<MyCaloTower,allocator<MyCaloTower> >::iterator xobj = ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->begin();
         pobj = new vector<MyCaloTower,allocator<MyCaloTower> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCaloTower,allocator<MyCaloTower> >::iterator* pobj;
         vector<MyCaloTower,allocator<MyCaloTower> >::iterator xobj = ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->end();
         pobj = new vector<MyCaloTower,allocator<MyCaloTower> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCaloTower,allocator<MyCaloTower> >::reverse_iterator* pobj;
         vector<MyCaloTower,allocator<MyCaloTower> >::reverse_iterator xobj = ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyCaloTower,allocator<MyCaloTower> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCaloTower,allocator<MyCaloTower> >::reverse_iterator* pobj;
         vector<MyCaloTower,allocator<MyCaloTower> >::reverse_iterator xobj = ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->rend();
         pobj = new vector<MyCaloTower,allocator<MyCaloTower> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->resize((vector<MyCaloTower,allocator<MyCaloTower> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->resize((vector<MyCaloTower,allocator<MyCaloTower> >::size_type) G__int(libp->para[0]), *((MyCaloTower*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyCaloTower,allocator<MyCaloTower> >::reference obj = ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->operator[]((vector<MyCaloTower,allocator<MyCaloTower> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCaloTower,allocator<MyCaloTower> >::const_reference obj = ((const vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->operator[]((vector<MyCaloTower,allocator<MyCaloTower> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCaloTower,allocator<MyCaloTower> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCaloTower,allocator<MyCaloTower> >[n];
     } else {
       p = new((void*) gvp) vector<MyCaloTower,allocator<MyCaloTower> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCaloTower,allocator<MyCaloTower> >;
     } else {
       p = new((void*) gvp) vector<MyCaloTower,allocator<MyCaloTower> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCaloTower,allocator<MyCaloTower> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCaloTower,allocator<MyCaloTower> >((vector<MyCaloTower,allocator<MyCaloTower> >::size_type) G__int(libp->para[0]), *(MyCaloTower*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyCaloTower,allocator<MyCaloTower> >((vector<MyCaloTower,allocator<MyCaloTower> >::size_type) G__int(libp->para[0]), *(MyCaloTower*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyCaloTower,allocator<MyCaloTower> >((vector<MyCaloTower,allocator<MyCaloTower> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyCaloTower,allocator<MyCaloTower> >((vector<MyCaloTower,allocator<MyCaloTower> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCaloTower,allocator<MyCaloTower> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyCaloTower,allocator<MyCaloTower> >(*(vector<MyCaloTower,allocator<MyCaloTower> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyCaloTower,allocator<MyCaloTower> >(*(vector<MyCaloTower,allocator<MyCaloTower> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyCaloTower,allocator<MyCaloTower> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyCaloTower,allocator<MyCaloTower> >(*((vector<MyCaloTower,allocator<MyCaloTower> >::const_iterator*) G__int(libp->para[0])), *((vector<MyCaloTower,allocator<MyCaloTower> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyCaloTower,allocator<MyCaloTower> >(*((vector<MyCaloTower,allocator<MyCaloTower> >::const_iterator*) G__int(libp->para[0])), *((vector<MyCaloTower,allocator<MyCaloTower> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyCaloTower,allocator<MyCaloTower> >& obj = ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->operator=(*(vector<MyCaloTower,allocator<MyCaloTower> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->reserve((vector<MyCaloTower,allocator<MyCaloTower> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCaloTower& obj = ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyCaloTower& obj = ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->push_back(*(MyCaloTower*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->swap(*(vector<MyCaloTower,allocator<MyCaloTower> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyCaloTower,allocator<MyCaloTower> >::iterator* pobj;
         vector<MyCaloTower,allocator<MyCaloTower> >::iterator xobj = ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->insert(*((vector<MyCaloTower,allocator<MyCaloTower> >::iterator*) G__int(libp->para[0])), *(MyCaloTower*) libp->para[1].ref);
         pobj = new vector<MyCaloTower,allocator<MyCaloTower> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->insert(*((vector<MyCaloTower,allocator<MyCaloTower> >::iterator*) G__int(libp->para[0])), *((vector<MyCaloTower,allocator<MyCaloTower> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyCaloTower,allocator<MyCaloTower> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->insert(*((vector<MyCaloTower,allocator<MyCaloTower> >::iterator*) G__int(libp->para[0])), (vector<MyCaloTower,allocator<MyCaloTower> >::size_type) G__int(libp->para[1])
, *(MyCaloTower*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->erase(*((vector<MyCaloTower,allocator<MyCaloTower> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->erase(*((vector<MyCaloTower,allocator<MyCaloTower> >::iterator*) G__int(libp->para[0])), *((vector<MyCaloTower,allocator<MyCaloTower> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_646_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyCaloTower,allocator<MyCaloTower> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyCaloTower,allocator<MyCaloTower> > G__TvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR;
static int G__eventdict_646_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyCaloTower,allocator<MyCaloTower> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyCaloTower,allocator<MyCaloTower> >*) (soff+(sizeof(vector<MyCaloTower,allocator<MyCaloTower> >)*i)))->~G__TvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyCaloTower,allocator<MyCaloTower> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyCaloTower,allocator<MyCaloTower> >*) (soff))->~G__TvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyZDCHit,allocator<MyZDCHit> > */
static int G__eventdict_650_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyZDCHit,allocator<MyZDCHit> >::reference obj = ((vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->at((vector<MyZDCHit,allocator<MyZDCHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyZDCHit,allocator<MyZDCHit> >::const_reference obj = ((const vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->at((vector<MyZDCHit,allocator<MyZDCHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyZDCHit,allocator<MyZDCHit> >::iterator* pobj;
         vector<MyZDCHit,allocator<MyZDCHit> >::iterator xobj = ((vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->begin();
         pobj = new vector<MyZDCHit,allocator<MyZDCHit> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyZDCHit,allocator<MyZDCHit> >::iterator* pobj;
         vector<MyZDCHit,allocator<MyZDCHit> >::iterator xobj = ((vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->end();
         pobj = new vector<MyZDCHit,allocator<MyZDCHit> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyZDCHit,allocator<MyZDCHit> >::reverse_iterator* pobj;
         vector<MyZDCHit,allocator<MyZDCHit> >::reverse_iterator xobj = ((vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyZDCHit,allocator<MyZDCHit> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyZDCHit,allocator<MyZDCHit> >::reverse_iterator* pobj;
         vector<MyZDCHit,allocator<MyZDCHit> >::reverse_iterator xobj = ((vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->rend();
         pobj = new vector<MyZDCHit,allocator<MyZDCHit> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->resize((vector<MyZDCHit,allocator<MyZDCHit> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->resize((vector<MyZDCHit,allocator<MyZDCHit> >::size_type) G__int(libp->para[0]), *((MyZDCHit*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyZDCHit,allocator<MyZDCHit> >::reference obj = ((vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->operator[]((vector<MyZDCHit,allocator<MyZDCHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyZDCHit,allocator<MyZDCHit> >::const_reference obj = ((const vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->operator[]((vector<MyZDCHit,allocator<MyZDCHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyZDCHit,allocator<MyZDCHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyZDCHit,allocator<MyZDCHit> >[n];
     } else {
       p = new((void*) gvp) vector<MyZDCHit,allocator<MyZDCHit> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyZDCHit,allocator<MyZDCHit> >;
     } else {
       p = new((void*) gvp) vector<MyZDCHit,allocator<MyZDCHit> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyZDCHit,allocator<MyZDCHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyZDCHit,allocator<MyZDCHit> >((vector<MyZDCHit,allocator<MyZDCHit> >::size_type) G__int(libp->para[0]), *(MyZDCHit*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyZDCHit,allocator<MyZDCHit> >((vector<MyZDCHit,allocator<MyZDCHit> >::size_type) G__int(libp->para[0]), *(MyZDCHit*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyZDCHit,allocator<MyZDCHit> >((vector<MyZDCHit,allocator<MyZDCHit> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyZDCHit,allocator<MyZDCHit> >((vector<MyZDCHit,allocator<MyZDCHit> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyZDCHit,allocator<MyZDCHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyZDCHit,allocator<MyZDCHit> >(*(vector<MyZDCHit,allocator<MyZDCHit> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyZDCHit,allocator<MyZDCHit> >(*(vector<MyZDCHit,allocator<MyZDCHit> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyZDCHit,allocator<MyZDCHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyZDCHit,allocator<MyZDCHit> >(*((vector<MyZDCHit,allocator<MyZDCHit> >::const_iterator*) G__int(libp->para[0])), *((vector<MyZDCHit,allocator<MyZDCHit> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyZDCHit,allocator<MyZDCHit> >(*((vector<MyZDCHit,allocator<MyZDCHit> >::const_iterator*) G__int(libp->para[0])), *((vector<MyZDCHit,allocator<MyZDCHit> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyZDCHit,allocator<MyZDCHit> >& obj = ((vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->operator=(*(vector<MyZDCHit,allocator<MyZDCHit> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->reserve((vector<MyZDCHit,allocator<MyZDCHit> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyZDCHit& obj = ((vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyZDCHit& obj = ((vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->push_back(*(MyZDCHit*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->swap(*(vector<MyZDCHit,allocator<MyZDCHit> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyZDCHit,allocator<MyZDCHit> >::iterator* pobj;
         vector<MyZDCHit,allocator<MyZDCHit> >::iterator xobj = ((vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->insert(*((vector<MyZDCHit,allocator<MyZDCHit> >::iterator*) G__int(libp->para[0])), *(MyZDCHit*) libp->para[1].ref);
         pobj = new vector<MyZDCHit,allocator<MyZDCHit> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->insert(*((vector<MyZDCHit,allocator<MyZDCHit> >::iterator*) G__int(libp->para[0])), *((vector<MyZDCHit,allocator<MyZDCHit> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyZDCHit,allocator<MyZDCHit> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->insert(*((vector<MyZDCHit,allocator<MyZDCHit> >::iterator*) G__int(libp->para[0])), (vector<MyZDCHit,allocator<MyZDCHit> >::size_type) G__int(libp->para[1])
, *(MyZDCHit*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->erase(*((vector<MyZDCHit,allocator<MyZDCHit> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->erase(*((vector<MyZDCHit,allocator<MyZDCHit> >::iterator*) G__int(libp->para[0])), *((vector<MyZDCHit,allocator<MyZDCHit> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_650_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCHit,allocator<MyZDCHit> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyZDCHit,allocator<MyZDCHit> > G__TvectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR;
static int G__eventdict_650_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyZDCHit,allocator<MyZDCHit> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyZDCHit,allocator<MyZDCHit> >*) (soff+(sizeof(vector<MyZDCHit,allocator<MyZDCHit> >)*i)))->~G__TvectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyZDCHit,allocator<MyZDCHit> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyZDCHit,allocator<MyZDCHit> >*) (soff))->~G__TvectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyZDCDigi,allocator<MyZDCDigi> > */
static int G__eventdict_654_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyZDCDigi,allocator<MyZDCDigi> >::reference obj = ((vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->at((vector<MyZDCDigi,allocator<MyZDCDigi> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyZDCDigi,allocator<MyZDCDigi> >::const_reference obj = ((const vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->at((vector<MyZDCDigi,allocator<MyZDCDigi> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator* pobj;
         vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator xobj = ((vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->begin();
         pobj = new vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator* pobj;
         vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator xobj = ((vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->end();
         pobj = new vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyZDCDigi,allocator<MyZDCDigi> >::reverse_iterator* pobj;
         vector<MyZDCDigi,allocator<MyZDCDigi> >::reverse_iterator xobj = ((vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyZDCDigi,allocator<MyZDCDigi> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyZDCDigi,allocator<MyZDCDigi> >::reverse_iterator* pobj;
         vector<MyZDCDigi,allocator<MyZDCDigi> >::reverse_iterator xobj = ((vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->rend();
         pobj = new vector<MyZDCDigi,allocator<MyZDCDigi> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->resize((vector<MyZDCDigi,allocator<MyZDCDigi> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->resize((vector<MyZDCDigi,allocator<MyZDCDigi> >::size_type) G__int(libp->para[0]), *((MyZDCDigi*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyZDCDigi,allocator<MyZDCDigi> >::reference obj = ((vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->operator[]((vector<MyZDCDigi,allocator<MyZDCDigi> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyZDCDigi,allocator<MyZDCDigi> >::const_reference obj = ((const vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->operator[]((vector<MyZDCDigi,allocator<MyZDCDigi> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyZDCDigi,allocator<MyZDCDigi> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyZDCDigi,allocator<MyZDCDigi> >[n];
     } else {
       p = new((void*) gvp) vector<MyZDCDigi,allocator<MyZDCDigi> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyZDCDigi,allocator<MyZDCDigi> >;
     } else {
       p = new((void*) gvp) vector<MyZDCDigi,allocator<MyZDCDigi> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyZDCDigi,allocator<MyZDCDigi> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyZDCDigi,allocator<MyZDCDigi> >((vector<MyZDCDigi,allocator<MyZDCDigi> >::size_type) G__int(libp->para[0]), *(MyZDCDigi*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyZDCDigi,allocator<MyZDCDigi> >((vector<MyZDCDigi,allocator<MyZDCDigi> >::size_type) G__int(libp->para[0]), *(MyZDCDigi*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyZDCDigi,allocator<MyZDCDigi> >((vector<MyZDCDigi,allocator<MyZDCDigi> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyZDCDigi,allocator<MyZDCDigi> >((vector<MyZDCDigi,allocator<MyZDCDigi> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyZDCDigi,allocator<MyZDCDigi> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyZDCDigi,allocator<MyZDCDigi> >(*(vector<MyZDCDigi,allocator<MyZDCDigi> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyZDCDigi,allocator<MyZDCDigi> >(*(vector<MyZDCDigi,allocator<MyZDCDigi> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyZDCDigi,allocator<MyZDCDigi> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyZDCDigi,allocator<MyZDCDigi> >(*((vector<MyZDCDigi,allocator<MyZDCDigi> >::const_iterator*) G__int(libp->para[0])), *((vector<MyZDCDigi,allocator<MyZDCDigi> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyZDCDigi,allocator<MyZDCDigi> >(*((vector<MyZDCDigi,allocator<MyZDCDigi> >::const_iterator*) G__int(libp->para[0])), *((vector<MyZDCDigi,allocator<MyZDCDigi> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyZDCDigi,allocator<MyZDCDigi> >& obj = ((vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->operator=(*(vector<MyZDCDigi,allocator<MyZDCDigi> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->reserve((vector<MyZDCDigi,allocator<MyZDCDigi> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyZDCDigi& obj = ((vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyZDCDigi& obj = ((vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->push_back(*(MyZDCDigi*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->swap(*(vector<MyZDCDigi,allocator<MyZDCDigi> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator* pobj;
         vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator xobj = ((vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->insert(*((vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator*) G__int(libp->para[0])), *(MyZDCDigi*) libp->para[1].ref);
         pobj = new vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->insert(*((vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator*) G__int(libp->para[0])), *((vector<MyZDCDigi,allocator<MyZDCDigi> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyZDCDigi,allocator<MyZDCDigi> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->insert(*((vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator*) G__int(libp->para[0])), (vector<MyZDCDigi,allocator<MyZDCDigi> >::size_type) G__int(libp->para[1])
, *(MyZDCDigi*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->erase(*((vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->erase(*((vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator*) G__int(libp->para[0])), *((vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_654_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCDigi,allocator<MyZDCDigi> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyZDCDigi,allocator<MyZDCDigi> > G__TvectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR;
static int G__eventdict_654_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyZDCDigi,allocator<MyZDCDigi> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyZDCDigi,allocator<MyZDCDigi> >*) (soff+(sizeof(vector<MyZDCDigi,allocator<MyZDCDigi> >)*i)))->~G__TvectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyZDCDigi,allocator<MyZDCDigi> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyZDCDigi,allocator<MyZDCDigi> >*) (soff))->~G__TvectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyZDCInfo,allocator<MyZDCInfo> > */
static int G__eventdict_658_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyZDCInfo,allocator<MyZDCInfo> >::reference obj = ((vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->at((vector<MyZDCInfo,allocator<MyZDCInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyZDCInfo,allocator<MyZDCInfo> >::const_reference obj = ((const vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->at((vector<MyZDCInfo,allocator<MyZDCInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator* pobj;
         vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator xobj = ((vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->begin();
         pobj = new vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator* pobj;
         vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator xobj = ((vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->end();
         pobj = new vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyZDCInfo,allocator<MyZDCInfo> >::reverse_iterator* pobj;
         vector<MyZDCInfo,allocator<MyZDCInfo> >::reverse_iterator xobj = ((vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyZDCInfo,allocator<MyZDCInfo> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyZDCInfo,allocator<MyZDCInfo> >::reverse_iterator* pobj;
         vector<MyZDCInfo,allocator<MyZDCInfo> >::reverse_iterator xobj = ((vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->rend();
         pobj = new vector<MyZDCInfo,allocator<MyZDCInfo> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->resize((vector<MyZDCInfo,allocator<MyZDCInfo> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->resize((vector<MyZDCInfo,allocator<MyZDCInfo> >::size_type) G__int(libp->para[0]), *((MyZDCInfo*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyZDCInfo,allocator<MyZDCInfo> >::reference obj = ((vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->operator[]((vector<MyZDCInfo,allocator<MyZDCInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyZDCInfo,allocator<MyZDCInfo> >::const_reference obj = ((const vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->operator[]((vector<MyZDCInfo,allocator<MyZDCInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyZDCInfo,allocator<MyZDCInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyZDCInfo,allocator<MyZDCInfo> >[n];
     } else {
       p = new((void*) gvp) vector<MyZDCInfo,allocator<MyZDCInfo> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyZDCInfo,allocator<MyZDCInfo> >;
     } else {
       p = new((void*) gvp) vector<MyZDCInfo,allocator<MyZDCInfo> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyZDCInfo,allocator<MyZDCInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyZDCInfo,allocator<MyZDCInfo> >((vector<MyZDCInfo,allocator<MyZDCInfo> >::size_type) G__int(libp->para[0]), *(MyZDCInfo*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyZDCInfo,allocator<MyZDCInfo> >((vector<MyZDCInfo,allocator<MyZDCInfo> >::size_type) G__int(libp->para[0]), *(MyZDCInfo*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyZDCInfo,allocator<MyZDCInfo> >((vector<MyZDCInfo,allocator<MyZDCInfo> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyZDCInfo,allocator<MyZDCInfo> >((vector<MyZDCInfo,allocator<MyZDCInfo> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyZDCInfo,allocator<MyZDCInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyZDCInfo,allocator<MyZDCInfo> >(*(vector<MyZDCInfo,allocator<MyZDCInfo> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyZDCInfo,allocator<MyZDCInfo> >(*(vector<MyZDCInfo,allocator<MyZDCInfo> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyZDCInfo,allocator<MyZDCInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyZDCInfo,allocator<MyZDCInfo> >(*((vector<MyZDCInfo,allocator<MyZDCInfo> >::const_iterator*) G__int(libp->para[0])), *((vector<MyZDCInfo,allocator<MyZDCInfo> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyZDCInfo,allocator<MyZDCInfo> >(*((vector<MyZDCInfo,allocator<MyZDCInfo> >::const_iterator*) G__int(libp->para[0])), *((vector<MyZDCInfo,allocator<MyZDCInfo> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyZDCInfo,allocator<MyZDCInfo> >& obj = ((vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->operator=(*(vector<MyZDCInfo,allocator<MyZDCInfo> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->reserve((vector<MyZDCInfo,allocator<MyZDCInfo> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyZDCInfo& obj = ((vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyZDCInfo& obj = ((vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->push_back(*(MyZDCInfo*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->swap(*(vector<MyZDCInfo,allocator<MyZDCInfo> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator* pobj;
         vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator xobj = ((vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->insert(*((vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator*) G__int(libp->para[0])), *(MyZDCInfo*) libp->para[1].ref);
         pobj = new vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->insert(*((vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator*) G__int(libp->para[0])), *((vector<MyZDCInfo,allocator<MyZDCInfo> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyZDCInfo,allocator<MyZDCInfo> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->insert(*((vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator*) G__int(libp->para[0])), (vector<MyZDCInfo,allocator<MyZDCInfo> >::size_type) G__int(libp->para[1])
, *(MyZDCInfo*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->erase(*((vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->erase(*((vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator*) G__int(libp->para[0])), *((vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_658_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyZDCInfo,allocator<MyZDCInfo> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyZDCInfo,allocator<MyZDCInfo> > G__TvectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR;
static int G__eventdict_658_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyZDCInfo,allocator<MyZDCInfo> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyZDCInfo,allocator<MyZDCInfo> >*) (soff+(sizeof(vector<MyZDCInfo,allocator<MyZDCInfo> >)*i)))->~G__TvectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyZDCInfo,allocator<MyZDCInfo> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyZDCInfo,allocator<MyZDCInfo> >*) (soff))->~G__TvectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyFSCHit,allocator<MyFSCHit> > */
static int G__eventdict_662_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyFSCHit,allocator<MyFSCHit> >::reference obj = ((vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->at((vector<MyFSCHit,allocator<MyFSCHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFSCHit,allocator<MyFSCHit> >::const_reference obj = ((const vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->at((vector<MyFSCHit,allocator<MyFSCHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFSCHit,allocator<MyFSCHit> >::iterator* pobj;
         vector<MyFSCHit,allocator<MyFSCHit> >::iterator xobj = ((vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->begin();
         pobj = new vector<MyFSCHit,allocator<MyFSCHit> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFSCHit,allocator<MyFSCHit> >::iterator* pobj;
         vector<MyFSCHit,allocator<MyFSCHit> >::iterator xobj = ((vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->end();
         pobj = new vector<MyFSCHit,allocator<MyFSCHit> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFSCHit,allocator<MyFSCHit> >::reverse_iterator* pobj;
         vector<MyFSCHit,allocator<MyFSCHit> >::reverse_iterator xobj = ((vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyFSCHit,allocator<MyFSCHit> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFSCHit,allocator<MyFSCHit> >::reverse_iterator* pobj;
         vector<MyFSCHit,allocator<MyFSCHit> >::reverse_iterator xobj = ((vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->rend();
         pobj = new vector<MyFSCHit,allocator<MyFSCHit> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->resize((vector<MyFSCHit,allocator<MyFSCHit> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->resize((vector<MyFSCHit,allocator<MyFSCHit> >::size_type) G__int(libp->para[0]), *((MyFSCHit*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyFSCHit,allocator<MyFSCHit> >::reference obj = ((vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->operator[]((vector<MyFSCHit,allocator<MyFSCHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFSCHit,allocator<MyFSCHit> >::const_reference obj = ((const vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->operator[]((vector<MyFSCHit,allocator<MyFSCHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyFSCHit,allocator<MyFSCHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyFSCHit,allocator<MyFSCHit> >[n];
     } else {
       p = new((void*) gvp) vector<MyFSCHit,allocator<MyFSCHit> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyFSCHit,allocator<MyFSCHit> >;
     } else {
       p = new((void*) gvp) vector<MyFSCHit,allocator<MyFSCHit> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyFSCHit,allocator<MyFSCHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyFSCHit,allocator<MyFSCHit> >((vector<MyFSCHit,allocator<MyFSCHit> >::size_type) G__int(libp->para[0]), *(MyFSCHit*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyFSCHit,allocator<MyFSCHit> >((vector<MyFSCHit,allocator<MyFSCHit> >::size_type) G__int(libp->para[0]), *(MyFSCHit*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyFSCHit,allocator<MyFSCHit> >((vector<MyFSCHit,allocator<MyFSCHit> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyFSCHit,allocator<MyFSCHit> >((vector<MyFSCHit,allocator<MyFSCHit> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyFSCHit,allocator<MyFSCHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyFSCHit,allocator<MyFSCHit> >(*(vector<MyFSCHit,allocator<MyFSCHit> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyFSCHit,allocator<MyFSCHit> >(*(vector<MyFSCHit,allocator<MyFSCHit> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyFSCHit,allocator<MyFSCHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyFSCHit,allocator<MyFSCHit> >(*((vector<MyFSCHit,allocator<MyFSCHit> >::const_iterator*) G__int(libp->para[0])), *((vector<MyFSCHit,allocator<MyFSCHit> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyFSCHit,allocator<MyFSCHit> >(*((vector<MyFSCHit,allocator<MyFSCHit> >::const_iterator*) G__int(libp->para[0])), *((vector<MyFSCHit,allocator<MyFSCHit> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyFSCHit,allocator<MyFSCHit> >& obj = ((vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->operator=(*(vector<MyFSCHit,allocator<MyFSCHit> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->reserve((vector<MyFSCHit,allocator<MyFSCHit> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyFSCHit& obj = ((vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyFSCHit& obj = ((vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->push_back(*(MyFSCHit*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->swap(*(vector<MyFSCHit,allocator<MyFSCHit> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFSCHit,allocator<MyFSCHit> >::iterator* pobj;
         vector<MyFSCHit,allocator<MyFSCHit> >::iterator xobj = ((vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->insert(*((vector<MyFSCHit,allocator<MyFSCHit> >::iterator*) G__int(libp->para[0])), *(MyFSCHit*) libp->para[1].ref);
         pobj = new vector<MyFSCHit,allocator<MyFSCHit> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->insert(*((vector<MyFSCHit,allocator<MyFSCHit> >::iterator*) G__int(libp->para[0])), *((vector<MyFSCHit,allocator<MyFSCHit> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyFSCHit,allocator<MyFSCHit> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->insert(*((vector<MyFSCHit,allocator<MyFSCHit> >::iterator*) G__int(libp->para[0])), (vector<MyFSCHit,allocator<MyFSCHit> >::size_type) G__int(libp->para[1])
, *(MyFSCHit*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->erase(*((vector<MyFSCHit,allocator<MyFSCHit> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->erase(*((vector<MyFSCHit,allocator<MyFSCHit> >::iterator*) G__int(libp->para[0])), *((vector<MyFSCHit,allocator<MyFSCHit> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_662_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCHit,allocator<MyFSCHit> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyFSCHit,allocator<MyFSCHit> > G__TvectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR;
static int G__eventdict_662_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyFSCHit,allocator<MyFSCHit> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyFSCHit,allocator<MyFSCHit> >*) (soff+(sizeof(vector<MyFSCHit,allocator<MyFSCHit> >)*i)))->~G__TvectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyFSCHit,allocator<MyFSCHit> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyFSCHit,allocator<MyFSCHit> >*) (soff))->~G__TvectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyFSCDigi,allocator<MyFSCDigi> > */
static int G__eventdict_666_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyFSCDigi,allocator<MyFSCDigi> >::reference obj = ((vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->at((vector<MyFSCDigi,allocator<MyFSCDigi> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFSCDigi,allocator<MyFSCDigi> >::const_reference obj = ((const vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->at((vector<MyFSCDigi,allocator<MyFSCDigi> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator* pobj;
         vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator xobj = ((vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->begin();
         pobj = new vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator* pobj;
         vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator xobj = ((vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->end();
         pobj = new vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFSCDigi,allocator<MyFSCDigi> >::reverse_iterator* pobj;
         vector<MyFSCDigi,allocator<MyFSCDigi> >::reverse_iterator xobj = ((vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyFSCDigi,allocator<MyFSCDigi> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFSCDigi,allocator<MyFSCDigi> >::reverse_iterator* pobj;
         vector<MyFSCDigi,allocator<MyFSCDigi> >::reverse_iterator xobj = ((vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->rend();
         pobj = new vector<MyFSCDigi,allocator<MyFSCDigi> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->resize((vector<MyFSCDigi,allocator<MyFSCDigi> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->resize((vector<MyFSCDigi,allocator<MyFSCDigi> >::size_type) G__int(libp->para[0]), *((MyFSCDigi*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyFSCDigi,allocator<MyFSCDigi> >::reference obj = ((vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->operator[]((vector<MyFSCDigi,allocator<MyFSCDigi> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFSCDigi,allocator<MyFSCDigi> >::const_reference obj = ((const vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->operator[]((vector<MyFSCDigi,allocator<MyFSCDigi> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyFSCDigi,allocator<MyFSCDigi> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyFSCDigi,allocator<MyFSCDigi> >[n];
     } else {
       p = new((void*) gvp) vector<MyFSCDigi,allocator<MyFSCDigi> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyFSCDigi,allocator<MyFSCDigi> >;
     } else {
       p = new((void*) gvp) vector<MyFSCDigi,allocator<MyFSCDigi> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyFSCDigi,allocator<MyFSCDigi> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyFSCDigi,allocator<MyFSCDigi> >((vector<MyFSCDigi,allocator<MyFSCDigi> >::size_type) G__int(libp->para[0]), *(MyFSCDigi*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyFSCDigi,allocator<MyFSCDigi> >((vector<MyFSCDigi,allocator<MyFSCDigi> >::size_type) G__int(libp->para[0]), *(MyFSCDigi*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyFSCDigi,allocator<MyFSCDigi> >((vector<MyFSCDigi,allocator<MyFSCDigi> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyFSCDigi,allocator<MyFSCDigi> >((vector<MyFSCDigi,allocator<MyFSCDigi> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyFSCDigi,allocator<MyFSCDigi> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyFSCDigi,allocator<MyFSCDigi> >(*(vector<MyFSCDigi,allocator<MyFSCDigi> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyFSCDigi,allocator<MyFSCDigi> >(*(vector<MyFSCDigi,allocator<MyFSCDigi> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyFSCDigi,allocator<MyFSCDigi> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyFSCDigi,allocator<MyFSCDigi> >(*((vector<MyFSCDigi,allocator<MyFSCDigi> >::const_iterator*) G__int(libp->para[0])), *((vector<MyFSCDigi,allocator<MyFSCDigi> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyFSCDigi,allocator<MyFSCDigi> >(*((vector<MyFSCDigi,allocator<MyFSCDigi> >::const_iterator*) G__int(libp->para[0])), *((vector<MyFSCDigi,allocator<MyFSCDigi> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyFSCDigi,allocator<MyFSCDigi> >& obj = ((vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->operator=(*(vector<MyFSCDigi,allocator<MyFSCDigi> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->reserve((vector<MyFSCDigi,allocator<MyFSCDigi> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyFSCDigi& obj = ((vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyFSCDigi& obj = ((vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->push_back(*(MyFSCDigi*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->swap(*(vector<MyFSCDigi,allocator<MyFSCDigi> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator* pobj;
         vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator xobj = ((vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->insert(*((vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator*) G__int(libp->para[0])), *(MyFSCDigi*) libp->para[1].ref);
         pobj = new vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->insert(*((vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator*) G__int(libp->para[0])), *((vector<MyFSCDigi,allocator<MyFSCDigi> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyFSCDigi,allocator<MyFSCDigi> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->insert(*((vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator*) G__int(libp->para[0])), (vector<MyFSCDigi,allocator<MyFSCDigi> >::size_type) G__int(libp->para[1])
, *(MyFSCDigi*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->erase(*((vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->erase(*((vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator*) G__int(libp->para[0])), *((vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_666_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCDigi,allocator<MyFSCDigi> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyFSCDigi,allocator<MyFSCDigi> > G__TvectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR;
static int G__eventdict_666_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyFSCDigi,allocator<MyFSCDigi> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyFSCDigi,allocator<MyFSCDigi> >*) (soff+(sizeof(vector<MyFSCDigi,allocator<MyFSCDigi> >)*i)))->~G__TvectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyFSCDigi,allocator<MyFSCDigi> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyFSCDigi,allocator<MyFSCDigi> >*) (soff))->~G__TvectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyFSCInfo,allocator<MyFSCInfo> > */
static int G__eventdict_670_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyFSCInfo,allocator<MyFSCInfo> >::reference obj = ((vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->at((vector<MyFSCInfo,allocator<MyFSCInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFSCInfo,allocator<MyFSCInfo> >::const_reference obj = ((const vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->at((vector<MyFSCInfo,allocator<MyFSCInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator* pobj;
         vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator xobj = ((vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->begin();
         pobj = new vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator* pobj;
         vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator xobj = ((vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->end();
         pobj = new vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFSCInfo,allocator<MyFSCInfo> >::reverse_iterator* pobj;
         vector<MyFSCInfo,allocator<MyFSCInfo> >::reverse_iterator xobj = ((vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyFSCInfo,allocator<MyFSCInfo> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFSCInfo,allocator<MyFSCInfo> >::reverse_iterator* pobj;
         vector<MyFSCInfo,allocator<MyFSCInfo> >::reverse_iterator xobj = ((vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->rend();
         pobj = new vector<MyFSCInfo,allocator<MyFSCInfo> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->resize((vector<MyFSCInfo,allocator<MyFSCInfo> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->resize((vector<MyFSCInfo,allocator<MyFSCInfo> >::size_type) G__int(libp->para[0]), *((MyFSCInfo*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyFSCInfo,allocator<MyFSCInfo> >::reference obj = ((vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->operator[]((vector<MyFSCInfo,allocator<MyFSCInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFSCInfo,allocator<MyFSCInfo> >::const_reference obj = ((const vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->operator[]((vector<MyFSCInfo,allocator<MyFSCInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyFSCInfo,allocator<MyFSCInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyFSCInfo,allocator<MyFSCInfo> >[n];
     } else {
       p = new((void*) gvp) vector<MyFSCInfo,allocator<MyFSCInfo> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyFSCInfo,allocator<MyFSCInfo> >;
     } else {
       p = new((void*) gvp) vector<MyFSCInfo,allocator<MyFSCInfo> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyFSCInfo,allocator<MyFSCInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyFSCInfo,allocator<MyFSCInfo> >((vector<MyFSCInfo,allocator<MyFSCInfo> >::size_type) G__int(libp->para[0]), *(MyFSCInfo*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyFSCInfo,allocator<MyFSCInfo> >((vector<MyFSCInfo,allocator<MyFSCInfo> >::size_type) G__int(libp->para[0]), *(MyFSCInfo*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyFSCInfo,allocator<MyFSCInfo> >((vector<MyFSCInfo,allocator<MyFSCInfo> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyFSCInfo,allocator<MyFSCInfo> >((vector<MyFSCInfo,allocator<MyFSCInfo> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyFSCInfo,allocator<MyFSCInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyFSCInfo,allocator<MyFSCInfo> >(*(vector<MyFSCInfo,allocator<MyFSCInfo> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyFSCInfo,allocator<MyFSCInfo> >(*(vector<MyFSCInfo,allocator<MyFSCInfo> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyFSCInfo,allocator<MyFSCInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyFSCInfo,allocator<MyFSCInfo> >(*((vector<MyFSCInfo,allocator<MyFSCInfo> >::const_iterator*) G__int(libp->para[0])), *((vector<MyFSCInfo,allocator<MyFSCInfo> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyFSCInfo,allocator<MyFSCInfo> >(*((vector<MyFSCInfo,allocator<MyFSCInfo> >::const_iterator*) G__int(libp->para[0])), *((vector<MyFSCInfo,allocator<MyFSCInfo> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyFSCInfo,allocator<MyFSCInfo> >& obj = ((vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->operator=(*(vector<MyFSCInfo,allocator<MyFSCInfo> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->reserve((vector<MyFSCInfo,allocator<MyFSCInfo> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyFSCInfo& obj = ((vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyFSCInfo& obj = ((vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->push_back(*(MyFSCInfo*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->swap(*(vector<MyFSCInfo,allocator<MyFSCInfo> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator* pobj;
         vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator xobj = ((vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->insert(*((vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator*) G__int(libp->para[0])), *(MyFSCInfo*) libp->para[1].ref);
         pobj = new vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->insert(*((vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator*) G__int(libp->para[0])), *((vector<MyFSCInfo,allocator<MyFSCInfo> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyFSCInfo,allocator<MyFSCInfo> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->insert(*((vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator*) G__int(libp->para[0])), (vector<MyFSCInfo,allocator<MyFSCInfo> >::size_type) G__int(libp->para[1])
, *(MyFSCInfo*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->erase(*((vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->erase(*((vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator*) G__int(libp->para[0])), *((vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_670_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyFSCInfo,allocator<MyFSCInfo> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyFSCInfo,allocator<MyFSCInfo> > G__TvectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR;
static int G__eventdict_670_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyFSCInfo,allocator<MyFSCInfo> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyFSCInfo,allocator<MyFSCInfo> >*) (soff+(sizeof(vector<MyFSCInfo,allocator<MyFSCInfo> >)*i)))->~G__TvectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyFSCInfo,allocator<MyFSCInfo> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyFSCInfo,allocator<MyFSCInfo> >*) (soff))->~G__TvectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MyBeamSpot */

/* MyCastorDigi */

/* MyCastorJet */

/* MyCastorRecHit */

/* MyDiJet */

/* MyEvtId */

/* MyFwdGap */

/* MyPart */

/* MyMet */

/* MyGenMet */

/* MyGenKin */

/* MyGenPart */

/* MyGenJet */

/* vector<MyGenPart,allocator<MyGenPart> > */

/* MyPUSumInfo */

/* MyHLTrig */

/* pair<string,bool> */

/* MyL1Trig */

/* MyL1TrigOld */

/* MyMITEvtSel */

/* MySimVertex */

/* MyVertex */

/* MyTracks */

/* MyElectron */

/* MyMuon */

/* MyBaseJet */

/* MyJet */

/* MyCaloJet */

/* MyTrackJet */

/* vector<MyTracks,allocator<MyTracks> > */

/* MyPFJet */

/* MyPFCand */

/* MyCaloTower */

/* MyZDCHit */

/* MyZDCDigi */

/* MyZDCInfo */

/* MyFSCHit */

/* MyFSCDigi */

/* MyFSCInfo */

/* vector<MyBeamSpot,allocator<MyBeamSpot> > */

/* vector<MyCastorDigi,allocator<MyCastorDigi> > */

/* vector<MyCastorJet,allocator<MyCastorJet> > */

/* vector<MyCastorRecHit,allocator<MyCastorRecHit> > */

/* vector<MyDiJet,allocator<MyDiJet> > */

/* vector<MyEvtId,allocator<MyEvtId> > */

/* vector<MyFwdGap,allocator<MyFwdGap> > */

/* vector<MyGenKin,allocator<MyGenKin> > */

/* vector<MyPUSumInfo,allocator<MyPUSumInfo> > */

/* vector<MyMet,allocator<MyMet> > */

/* vector<MyGenMet,allocator<MyGenMet> > */

/* vector<MyGenJet,allocator<MyGenJet> > */

/* vector<MyHLTrig,allocator<MyHLTrig> > */

/* vector<MyL1Trig,allocator<MyL1Trig> > */

/* vector<MyL1TrigOld,allocator<MyL1TrigOld> > */

/* vector<MyMITEvtSel,allocator<MyMITEvtSel> > */

/* vector<MyPart,allocator<MyPart> > */

/* vector<MySimVertex,allocator<MySimVertex> > */

/* vector<MyVertex,allocator<MyVertex> > */

/* vector<MyElectron,allocator<MyElectron> > */

/* vector<MyMuon,allocator<MyMuon> > */

/* vector<MyBaseJet,allocator<MyBaseJet> > */

/* vector<MyJet,allocator<MyJet> > */

/* vector<MyCaloJet,allocator<MyCaloJet> > */

/* vector<MyTrackJet,allocator<MyTrackJet> > */

/* vector<MyPFJet,allocator<MyPFJet> > */

/* vector<MyPFCand,allocator<MyPFCand> > */

/* vector<MyCaloTower,allocator<MyCaloTower> > */

/* vector<MyZDCHit,allocator<MyZDCHit> > */

/* vector<MyZDCDigi,allocator<MyZDCDigi> > */

/* vector<MyZDCInfo,allocator<MyZDCInfo> > */

/* vector<MyFSCHit,allocator<MyFSCHit> > */

/* vector<MyFSCDigi,allocator<MyFSCDigi> > */

/* vector<MyFSCInfo,allocator<MyFSCInfo> > */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunceventdict {
 public:
  G__Sizep2memfunceventdict(): p(&G__Sizep2memfunceventdict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunceventdict::*p)();
};

size_t G__get_sizep2memfunceventdict()
{
  G__Sizep2memfunceventdict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceeventdict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot))) {
     MyBeamSpot *G__Lderived;
     G__Lderived=(MyBeamSpot*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi))) {
     MyCastorDigi *G__Lderived;
     G__Lderived=(MyCastorDigi*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyCastorJet))) {
     MyCastorJet *G__Lderived;
     G__Lderived=(MyCastorJet*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyCastorJet),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit))) {
     MyCastorRecHit *G__Lderived;
     G__Lderived=(MyCastorRecHit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyDiJet))) {
     MyDiJet *G__Lderived;
     G__Lderived=(MyDiJet*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyDiJet),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyEvtId))) {
     MyEvtId *G__Lderived;
     G__Lderived=(MyEvtId*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyEvtId),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyFwdGap))) {
     MyFwdGap *G__Lderived;
     G__Lderived=(MyFwdGap*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyFwdGap),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyPart))) {
     MyPart *G__Lderived;
     G__Lderived=(MyPart*)0x1000;
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyPart),G__get_linked_tagnum(&G__eventdictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyPart),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyMet))) {
     MyMet *G__Lderived;
     G__Lderived=(MyMet*)0x1000;
     {
       MyPart *G__Lpbase=(MyPart*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyMet),G__get_linked_tagnum(&G__eventdictLN_MyPart),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyMet),G__get_linked_tagnum(&G__eventdictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyMet),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyGenMet))) {
     MyGenMet *G__Lderived;
     G__Lderived=(MyGenMet*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenMet),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyGenKin))) {
     MyGenKin *G__Lderived;
     G__Lderived=(MyGenKin*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenKin),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyGenPart))) {
     MyGenPart *G__Lderived;
     G__Lderived=(MyGenPart*)0x1000;
     {
       MyPart *G__Lpbase=(MyPart*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenPart),G__get_linked_tagnum(&G__eventdictLN_MyPart),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenPart),G__get_linked_tagnum(&G__eventdictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenPart),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyGenJet))) {
     MyGenJet *G__Lderived;
     G__Lderived=(MyGenJet*)0x1000;
     {
       MyPart *G__Lpbase=(MyPart*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenJet),G__get_linked_tagnum(&G__eventdictLN_MyPart),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenJet),G__get_linked_tagnum(&G__eventdictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenJet),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyPUSumInfo))) {
     MyPUSumInfo *G__Lderived;
     G__Lderived=(MyPUSumInfo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyPUSumInfo),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyHLTrig))) {
     MyHLTrig *G__Lderived;
     G__Lderived=(MyHLTrig*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyHLTrig),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyL1Trig))) {
     MyL1Trig *G__Lderived;
     G__Lderived=(MyL1Trig*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyL1Trig),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyL1TrigOld))) {
     MyL1TrigOld *G__Lderived;
     G__Lderived=(MyL1TrigOld*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyL1TrigOld),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyMITEvtSel))) {
     MyMITEvtSel *G__Lderived;
     G__Lderived=(MyMITEvtSel*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyMITEvtSel),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MySimVertex))) {
     MySimVertex *G__Lderived;
     G__Lderived=(MySimVertex*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MySimVertex),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyVertex))) {
     MyVertex *G__Lderived;
     G__Lderived=(MyVertex*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyVertex),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyTracks))) {
     MyTracks *G__Lderived;
     G__Lderived=(MyTracks*)0x1000;
     {
       MyPart *G__Lpbase=(MyPart*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyTracks),G__get_linked_tagnum(&G__eventdictLN_MyPart),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyTracks),G__get_linked_tagnum(&G__eventdictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyTracks),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyElectron))) {
     MyElectron *G__Lderived;
     G__Lderived=(MyElectron*)0x1000;
     {
       MyPart *G__Lpbase=(MyPart*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyElectron),G__get_linked_tagnum(&G__eventdictLN_MyPart),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyElectron),G__get_linked_tagnum(&G__eventdictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyElectron),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyMuon))) {
     MyMuon *G__Lderived;
     G__Lderived=(MyMuon*)0x1000;
     {
       MyPart *G__Lpbase=(MyPart*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyMuon),G__get_linked_tagnum(&G__eventdictLN_MyPart),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyMuon),G__get_linked_tagnum(&G__eventdictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyMuon),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyBaseJet))) {
     MyBaseJet *G__Lderived;
     G__Lderived=(MyBaseJet*)0x1000;
     {
       MyPart *G__Lpbase=(MyPart*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyBaseJet),G__get_linked_tagnum(&G__eventdictLN_MyPart),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyBaseJet),G__get_linked_tagnum(&G__eventdictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyBaseJet),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyJet))) {
     MyJet *G__Lderived;
     G__Lderived=(MyJet*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyJet),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyCaloJet))) {
     MyCaloJet *G__Lderived;
     G__Lderived=(MyCaloJet*)0x1000;
     {
       MyJet *G__Lpbase=(MyJet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyCaloJet),G__get_linked_tagnum(&G__eventdictLN_MyJet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyCaloJet),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyTrackJet))) {
     MyTrackJet *G__Lderived;
     G__Lderived=(MyTrackJet*)0x1000;
     {
       MyBaseJet *G__Lpbase=(MyBaseJet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyTrackJet),G__get_linked_tagnum(&G__eventdictLN_MyBaseJet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MyPart *G__Lpbase=(MyPart*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyTrackJet),G__get_linked_tagnum(&G__eventdictLN_MyPart),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyTrackJet),G__get_linked_tagnum(&G__eventdictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyTrackJet),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyPFJet))) {
     MyPFJet *G__Lderived;
     G__Lderived=(MyPFJet*)0x1000;
     {
       MyJet *G__Lpbase=(MyJet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyPFJet),G__get_linked_tagnum(&G__eventdictLN_MyJet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyPFJet),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyPFCand))) {
     MyPFCand *G__Lderived;
     G__Lderived=(MyPFCand*)0x1000;
     {
       MyPart *G__Lpbase=(MyPart*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyPFCand),G__get_linked_tagnum(&G__eventdictLN_MyPart),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyPFCand),G__get_linked_tagnum(&G__eventdictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyPFCand),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyCaloTower))) {
     MyCaloTower *G__Lderived;
     G__Lderived=(MyCaloTower*)0x1000;
     {
       MyPart *G__Lpbase=(MyPart*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyCaloTower),G__get_linked_tagnum(&G__eventdictLN_MyPart),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyCaloTower),G__get_linked_tagnum(&G__eventdictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyCaloTower),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyZDCHit))) {
     MyZDCHit *G__Lderived;
     G__Lderived=(MyZDCHit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyZDCHit),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyZDCDigi))) {
     MyZDCDigi *G__Lderived;
     G__Lderived=(MyZDCDigi*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyZDCDigi),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyZDCInfo))) {
     MyZDCInfo *G__Lderived;
     G__Lderived=(MyZDCInfo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyZDCInfo),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyFSCHit))) {
     MyFSCHit *G__Lderived;
     G__Lderived=(MyFSCHit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyFSCHit),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyFSCDigi))) {
     MyFSCDigi *G__Lderived;
     G__Lderived=(MyFSCDigi*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyFSCDigi),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyFSCInfo))) {
     MyFSCInfo *G__Lderived;
     G__Lderived=(MyFSCInfo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyFSCInfo),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableeventdict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyGenPart>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyGenPart),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyGenPart),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyGenPart),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyGenPart),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyGenPart),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,bool>",117,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,bool,less<string> >",117,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,unsigned>",117,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,unsigned int>",117,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,unsigned int,less<string> >",117,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TrigMap",117,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),0,G__get_linked_tagnum(&G__eventdictLN_MyL1Trig));
   G__setnewtype(-1,"-- string name, unsigned bit",0);
   G__search_typename2("map<string,MyBaseJet>",117,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOMyBaseJetcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOMyBaseJetgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,MyBaseJet,less<string> >",117,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOMyBaseJetcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOMyBaseJetgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyTracks>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyTracks),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyTracks),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyTracks),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyTracks),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyTracks),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,double>",117,G__get_linked_tagnum(&G__eventdictLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,double,less<int> >",117,G__get_linked_tagnum(&G__eventdictLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyBeamSpot>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyCastorDigi>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyCastorJet>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyCastorJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyCastorJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyCastorJet),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyCastorJet),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyCastorJet),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyCastorRecHit>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyDiJet>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyDiJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyDiJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyDiJet),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyDiJet),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyDiJet),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyDiJetcOallocatorlEMyDiJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyDiJetcOallocatorlEMyDiJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyDiJetcOallocatorlEMyDiJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyDiJetcOallocatorlEMyDiJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyEvtId>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyEvtId),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyEvtId),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyEvtId),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyEvtId),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyEvtId),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyFwdGap>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyFwdGap),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyFwdGap),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyFwdGap),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyFwdGap),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyFwdGap),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyGenKin>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyGenKin),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyGenKin),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyGenKin),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyGenKin),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyGenKin),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenKincOallocatorlEMyGenKingRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenKincOallocatorlEMyGenKingRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenKincOallocatorlEMyGenKingRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenKincOallocatorlEMyGenKingRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyPUSumInfo>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyPUSumInfo),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyPUSumInfo),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyPUSumInfo),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyPUSumInfo),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyPUSumInfo),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyMet>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyMet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyMet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyMet),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyMet),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyMet),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMetcOallocatorlEMyMetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMetcOallocatorlEMyMetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMetcOallocatorlEMyMetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMetcOallocatorlEMyMetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyGenMet>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyGenMet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyGenMet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyGenMet),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyGenMet),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyGenMet),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenMetcOallocatorlEMyGenMetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenMetcOallocatorlEMyGenMetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenMetcOallocatorlEMyGenMetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenMetcOallocatorlEMyGenMetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyGenJet>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyGenJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyGenJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyGenJet),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyGenJet),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyGenJet),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyHLTrig>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyHLTrig),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyHLTrig),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyHLTrig),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyHLTrig),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyHLTrig),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyL1Trig>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyL1Trig),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyL1Trig),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyL1Trig),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyL1Trig),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyL1Trig),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyL1TrigOld>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyL1TrigOld),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyL1TrigOld),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyL1TrigOld),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyL1TrigOld),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyL1TrigOld),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyMITEvtSel>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyMITEvtSel),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyMITEvtSel),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyMITEvtSel),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyMITEvtSel),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyMITEvtSel),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyPart>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyPart),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyPart),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyPart),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyPart),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyPart),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyPartcOallocatorlEMyPartgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyPartcOallocatorlEMyPartgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyPartcOallocatorlEMyPartgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyPartcOallocatorlEMyPartgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MySimVertex>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MySimVertex),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MySimVertex),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MySimVertex),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MySimVertex),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MySimVertex),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMySimVertexcOallocatorlEMySimVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMySimVertexcOallocatorlEMySimVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMySimVertexcOallocatorlEMySimVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMySimVertexcOallocatorlEMySimVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyVertex>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyVertex),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyVertex),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyVertex),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyVertex),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyVertex),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyElectron>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyElectron),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyElectron),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyElectron),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyElectron),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyElectron),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyMuon>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyMuon),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyMuon),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyMuon),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyMuon),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyMuon),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyBaseJet>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyBaseJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyBaseJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyBaseJet),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyBaseJet),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyBaseJet),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyJet>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyJet),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyJet),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyJet),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyCaloJet>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyCaloJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyCaloJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyCaloJet),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyCaloJet),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyCaloJet),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyTrackJet>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyTrackJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyTrackJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyTrackJet),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyTrackJet),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyTrackJet),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyPFJet>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyPFJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyPFJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyPFJet),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyPFJet),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyPFJet),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyPFJetcOallocatorlEMyPFJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyPFJetcOallocatorlEMyPFJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyPFJetcOallocatorlEMyPFJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyPFJetcOallocatorlEMyPFJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyPFCand>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyPFCand),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyPFCand),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyPFCand),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyPFCand),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyPFCand),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyPFCandcOallocatorlEMyPFCandgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyPFCandcOallocatorlEMyPFCandgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyPFCandcOallocatorlEMyPFCandgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyPFCandcOallocatorlEMyPFCandgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyCaloTower>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyCaloTower),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyCaloTower),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyCaloTower),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyCaloTower),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyCaloTower),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyZDCHit>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyZDCHit),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyZDCHit),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyZDCHit),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyZDCHit),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyZDCHit),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyZDCDigi>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyZDCDigi),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyZDCDigi),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyZDCDigi),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyZDCDigi),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyZDCDigi),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyZDCInfo>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyZDCInfo),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyZDCInfo),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyZDCInfo),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyZDCInfo),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyZDCInfo),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyFSCHit>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyFSCHit),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyFSCHit),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyFSCHit),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyFSCHit),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyFSCHit),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyFSCDigi>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyFSCDigi),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyFSCDigi),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyFSCDigi),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyFSCDigi),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyFSCDigi),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyFSCInfo>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyFSCInfo),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyFSCInfo),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyFSCInfo),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyFSCInfo),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyFSCInfo),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MyBeamSpot */
static void G__setup_memvarMyBeamSpot(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot));
   { MyBeamSpot *p; p=(MyBeamSpot*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ex)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ey)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ey=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ez)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ez=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaZ)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sigmaZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dxdz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dxdz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dydz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dydz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->esigmaZ)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"esigmaZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->edxdz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"edxdz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->edydz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"edydz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BeamWidthX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"BeamWidthX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BeamWidthY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"BeamWidthY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eBeamWidthX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eBeamWidthX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eBeamWidthY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eBeamWidthY=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyCastorDigi */
static void G__setup_memvarMyCastorDigi(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi));
   { MyCastorDigi *p; p=(MyCastorDigi*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->adc)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"adc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fC)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"fC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mod)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"mod=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sec)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"sec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cha)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"cha=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyCastorJet */
static void G__setup_memvarMyCastorJet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyCastorJet));
   { MyCastorJet *p; p=(MyCastorJet*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->energy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"energy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fem)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fem=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eem)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eem=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ehad)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ehad=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->width)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"width=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->depth)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"depth=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fhot)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fhot=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sigmaz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ntower)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ntower=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyCastorRecHit */
static void G__setup_memvarMyCastorRecHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit));
   { MyCastorRecHit *p; p=(MyCastorRecHit*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->energy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"energy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fC)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mod)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"mod=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sec)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"sec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cha)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"cha=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->smearing)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"smearing=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->energy_smeared)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"energy_smeared=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fC_smeared)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fC_smeared=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyDiJet */
static void G__setup_memvarMyDiJet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyDiJet));
   { MyDiJet *p; p=(MyDiJet*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->isDiJet)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"isDiJet=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->posJet1)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"posJet1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->posJet2)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"posJet2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyEvtId */
static void G__setup_memvarMyEvtId(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyEvtId));
   { MyEvtId *p; p=(MyEvtId*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Run)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"Run=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Evt)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"Evt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LumiSect)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"LumiSect=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),109,0,0,-1,G__defined_typename("TimeValue_t"),-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IsData)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"IsData=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ExpType)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"ExpType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Bunch)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Bunch=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Orbit)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Orbit=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyFwdGap */
static void G__setup_memvarMyFwdGap(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyFwdGap));
   { MyFwdGap *p; p=(MyFwdGap*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->nTowersHF_plus)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nTowersHF_plus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nTowersHF_minus)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nTowersHF_minus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nTowersHE_plus)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nTowersHE_plus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nTowersHE_minus)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nTowersHE_minus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nTowersHB_plus)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nTowersHB_plus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nTowersHB_minus)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nTowersHB_minus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nTowersEE_plus)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nTowersEE_plus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nTowersEE_minus)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nTowersEE_minus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nTowersEB_plus)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nTowersEB_plus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nTowersEB_minus)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nTowersEB_minus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumEHF_plus)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sumEHF_plus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumEHF_minus)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sumEHF_minus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumEHE_plus)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sumEHE_plus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumEHE_minus)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sumEHE_minus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumEHB_plus)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sumEHB_plus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumEHB_minus)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sumEHB_minus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumEEE_plus)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sumEEE_plus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumEEE_minus)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sumEEE_minus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumEEB_plus)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sumEEB_plus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumEEB_minus)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sumEEB_minus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumETHF_plus)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sumETHF_plus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumETHF_minus)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sumETHF_minus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumETHE_plus)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sumETHE_plus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumETHE_minus)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sumETHE_minus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumETHB_plus)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sumETHB_plus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumETHB_minus)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sumETHB_minus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumETEE_plus)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sumETEE_plus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumETEE_minus)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sumETEE_minus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumETEB_plus)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sumETEB_plus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumETEB_minus)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sumETEB_minus=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyPart */
static void G__setup_memvarMyPart(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyPart));
   { MyPart *p; p=(MyPart*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyMet */
static void G__setup_memvarMyMet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyMet));
   { MyMet *p; p=(MyMet*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->sumet)-(long)(p)),100,0,0,-1,-1,-1,1,"sumet=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->elongit)-(long)(p)),100,0,0,-1,-1,-1,1,"elongit=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyGenMet */
static void G__setup_memvarMyGenMet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenMet));
   { MyGenMet *p; p=(MyGenMet*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Met)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Met=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MetX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"MetX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MetY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"MetY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MetPhi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"MetPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MetGP1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_TLorentzVector),-1,-1,1,"MetGP1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MetGP3)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_TLorentzVector),-1,-1,1,"MetGP3=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyGenKin */
static void G__setup_memvarMyGenKin(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenKin));
   { MyGenKin *p; p=(MyGenKin*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->MCProcId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"MCProcId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PtHat)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"PtHat=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genWeight)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"genWeight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x1)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"x1=",0,"-- fraction of beam momentum carried by first parton ");
   G__memvar_setup((void*)((long)(&p->x2)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"x2=",0,"-- fraction of beam momentum carried by second parton");
   G__memvar_setup((void*)((long)(&p->Q)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Q=",0,"-- Q-scale used in evaluation of PDFs (in GeV)");
   G__memvar_setup((void*)((long)(&p->Part1Id)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Part1Id=",0,"-- flavour code of first parton");
   G__memvar_setup((void*)((long)(&p->Part2Id)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Part2Id=",0,"-- flavour code of second parton");
   G__memvar_setup((void*)((long)(&p->kfactor)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"kfactor=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyGenPart */
static void G__setup_memvarMyGenPart(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenPart));
   { MyGenPart *p; p=(MyGenPart*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pdgId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"pdgId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->status)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"status=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mo1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"mo1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mo2)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"mo2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->da1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"da1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->da2)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"da2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyGenJet */
static void G__setup_memvarMyGenJet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenJet));
   { MyGenJet *p; p=(MyGenJet*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->npart)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"npart=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->JetPart)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR),G__defined_typename("vector<MyGenPart>"),-1,1,"JetPart=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<MyGenPart,allocator<MyGenPart> > */
static void G__setup_memvarvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   { vector<MyGenPart,allocator<MyGenPart> > *p; p=(vector<MyGenPart,allocator<MyGenPart> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* MyPUSumInfo */
static void G__setup_memvarMyPUSumInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyPUSumInfo));
   { MyPUSumInfo *p; p=(MyPUSumInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->nPU)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nPU=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zposition)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"zposition=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumpT_lowpT)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"sumpT_lowpT=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumpT_highpT)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"sumpT_highpT=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ntrks_lowpT)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"ntrks_lowpT=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ntrks_highpT)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"ntrks_highpT=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyHLTrig */
static void G__setup_memvarMyHLTrig(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyHLTrig));
   { MyHLTrig *p; p=(MyHLTrig*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->HLTmap)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),G__defined_typename("map<string,bool>"),-1,1,"HLTmap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HLTprescale)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR),G__defined_typename("map<string,double>"),-1,1,"HLTprescale=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* pair<string,bool> */
static void G__setup_memvarpairlEstringcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_pairlEstringcOboolgR));
   { pair<string,bool> *p; p=(pair<string,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_string),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyL1Trig */
static void G__setup_memvarMyL1Trig(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyL1Trig));
   { MyL1Trig *p; p=(MyL1Trig*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,-1,-2,4,"bit_max=500ULL",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),G__defined_typename("TrigMap"),-1,4,"fPhysMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fPhysMask[128]=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fPhysDecisionBefore[128]=",0,"-- L1 algorithm decision, not considering the mask");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fPhysDecisionAfter[128]=",0,"-- L1 algorithm decision, considering the mask");
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"fPhysPrescale[128]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__eventdictLN_string),-1,-1,4,"fPhysAlias[128]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),G__defined_typename("TrigMap"),-1,4,"fTechMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fTechMask[64]=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fTechDecisionBefore[64]=",0,"-- L1 algorithm decision, not considering the mask");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fTechDecisionAfter[64]=",0,"-- L1 algorithm decision, considering the mask");
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"fTechPrescale[64]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__eventdictLN_string),-1,-1,4,"fTechAlias[64]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyL1TrigOld */
static void G__setup_memvarMyL1TrigOld(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyL1TrigOld));
   { MyL1TrigOld *p; p=(MyL1TrigOld*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->PhysTrigWord)-(long)(p)),103,0,0,-1,-1,-1,1,"PhysTrigWord[128]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TechTrigWord)-(long)(p)),103,0,0,-1,-1,-1,1,"TechTrigWord[64]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyMITEvtSel */
static void G__setup_memvarMyMITEvtSel(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyMITEvtSel));
   { MyMITEvtSel *p; p=(MyMITEvtSel*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eHcalNeg)-(long)(p)),100,0,0,-1,-1,-1,1,"eHcalNeg=",0,"energy HCAL negative side");
   G__memvar_setup((void*)((long)(&p->eHcalPos)-(long)(p)),100,0,0,-1,-1,-1,1,"eHcalPos=",0,"energy HCAL positive side");
   G__memvar_setup((void*)((long)(&p->eHfNeg)-(long)(p)),100,0,0,-1,-1,-1,1,"eHfNeg=",0,"energy HF negative side");
   G__memvar_setup((void*)((long)(&p->eHfPos)-(long)(p)),100,0,0,-1,-1,-1,1,"eHfPos=",0,"energy HF positive side");
   G__memvar_setup((void*)((long)(&p->eHfNegTime)-(long)(p)),100,0,0,-1,-1,-1,1,"eHfNegTime=",0,"energy weighted HF time on negative side ");
   G__memvar_setup((void*)((long)(&p->eHfPosTime)-(long)(p)),100,0,0,-1,-1,-1,1,"eHfPosTime=",0,"energy weighted HF time on positive side ");
   G__memvar_setup((void*)((long)(&p->eCaNeg)-(long)(p)),100,0,0,-1,-1,-1,1,"eCaNeg=",0,"energy CASTOR negative side");
   G__memvar_setup((void*)((long)(&p->eCaPos)-(long)(p)),100,0,0,-1,-1,-1,1,"eCaPos=",0,"energy CASTOR positive side");
   G__memvar_setup((void*)((long)(&p->eCaNegTime)-(long)(p)),100,0,0,-1,-1,-1,1,"eCaNegTime=",0,"energy weighted CASTOR time on negative side ");
   G__memvar_setup((void*)((long)(&p->eCaPosTime)-(long)(p)),100,0,0,-1,-1,-1,1,"eCaPosTime=",0,"energy weighted CASTOR time on positive side ");
   G__memvar_setup((void*)((long)(&p->eZdcNeg)-(long)(p)),100,0,0,-1,-1,-1,1,"eZdcNeg=",0,"energy ZDC negative side");
   G__memvar_setup((void*)((long)(&p->eZdcPos)-(long)(p)),100,0,0,-1,-1,-1,1,"eZdcPos=",0,"energy ZDC positive side");
   G__memvar_setup((void*)((long)(&p->eZdcNegTime)-(long)(p)),100,0,0,-1,-1,-1,1,"eZdcNegTime=",0,"energy weighted ZDC time on negative side ");
   G__memvar_setup((void*)((long)(&p->eZdcPosTime)-(long)(p)),100,0,0,-1,-1,-1,1,"eZdcPosTime=",0,"energy weighted ZDC time on positive side ");
   G__memvar_setup((void*)((long)(&p->ePxbHits)-(long)(p)),105,0,0,-1,-1,-1,1,"ePxbHits=",0,"number of pixel rechits in the three barrel layers");
   G__memvar_setup((void*)((long)(&p->ePxHits)-(long)(p)),105,0,0,-1,-1,-1,1,"ePxHits=",0,"number of pixel rechits in all barrel and forward layers");
   G__memvar_setup((void*)((long)(&p->eClusVtxQual)-(long)(p)),100,0,0,-1,-1,-1,1,"eClusVtxQual=",0,"incompatibility of pixel cluster shapes with vertex (ratio)");
   G__memvar_setup((void*)((long)(&p->eClusVtxDiff)-(long)(p)),100,0,0,-1,-1,-1,1,"eClusVtxDiff=",0,"incompatibility of pixel cluster shapes with vertex (difference)");
   G__memvar_setup((void*)((long)(&p->nHfNegHits)-(long)(p)),105,0,0,-1,-1,-1,1,"nHfNegHits=",0,"hf neg hits above threshold");
   G__memvar_setup((void*)((long)(&p->nHfPosHits)-(long)(p)),105,0,0,-1,-1,-1,1,"nHfPosHits=",0,"hf pos hits above threshold");
   G__memvar_setup((void*)((long)(&p->nHfTowersP)-(long)(p)),105,0,0,-1,-1,-1,1,"nHfTowersP=",0,"hf neg calo towers above threshold");
   G__memvar_setup((void*)((long)(&p->nHfTowersN)-(long)(p)),105,0,0,-1,-1,-1,1,"nHfTowersN=",0,"hf pos calo towers above threshold");
   G__memvar_setup((void*)((long)(&p->sumEsubEpPos)-(long)(p)),100,0,0,-1,-1,-1,1,"sumEsubEpPos=",0,"sum E sub Ep for pos calo towers");
   G__memvar_setup((void*)((long)(&p->sumEaddEpPos)-(long)(p)),100,0,0,-1,-1,-1,1,"sumEaddEpPos=",0,"sum E add Ep for pos calo towers");
   G__memvar_setup((void*)((long)(&p->sumEsubEpNeg)-(long)(p)),100,0,0,-1,-1,-1,1,"sumEsubEpNeg=",0,"sum E sub Ep for neg calo towers");
   G__memvar_setup((void*)((long)(&p->sumEaddEpNeg)-(long)(p)),100,0,0,-1,-1,-1,1,"sumEaddEpNeg=",0,"sum E add Ep for neg calo towers");
   G__memvar_setup((void*)((long)(&p->sumHfEsubEpPos)-(long)(p)),100,0,0,-1,-1,-1,1,"sumHfEsubEpPos=",0,"sum E sub Ep for pos hf calo towers");
   G__memvar_setup((void*)((long)(&p->sumHfEaddEpPos)-(long)(p)),100,0,0,-1,-1,-1,1,"sumHfEaddEpPos=",0,"sum E add Ep for pos hf calo towers");
   G__memvar_setup((void*)((long)(&p->sumHfEsubEpNeg)-(long)(p)),100,0,0,-1,-1,-1,1,"sumHfEsubEpNeg=",0,"sum E sub Ep for neg hf calo towers");
   G__memvar_setup((void*)((long)(&p->sumHfEaddEpNeg)-(long)(p)),100,0,0,-1,-1,-1,1,"sumHfEaddEpNeg=",0,"sum E add Ep for neg hf calo towers");
   G__memvar_setup((void*)((long)(&p->eHPTrkFrac)-(long)(p)),100,0,0,-1,-1,-1,1,"eHPTrkFrac=",0,"fraction of high-purity tracks out of all with \"loose\" cuts");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MySimVertex */
static void G__setup_memvarMySimVertex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MySimVertex));
   { MySimVertex *p; p=(MySimVertex*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyVertex */
static void G__setup_memvarMyVertex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyVertex));
   { MyVertex *p; p=(MyVertex*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->id)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ex)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ey)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ey=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ez)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ez=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->validity)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"validity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fake)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"fake=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chi2)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"chi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ndof)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ndof=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ntracks)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ntracks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SumPtTracks)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"SumPtTracks=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyTracks */
static void G__setup_memvarMyTracks(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyTracks));
   { MyTracks *p; p=(MyTracks*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->quality)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"quality[5]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackAlgo)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"trackAlgo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nhit)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nhit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nValidPixelHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nValidPixelHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nValidStripHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nValidStripHits=",0,"can also look individual layer but do it later if needed ...");
   G__memvar_setup((void*)((long)(&p->nValidMuonCSCHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nValidMuonCSCHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nValidMuonDTHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nValidMuonDTHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nValidMuonRPCHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nValidMuonRPCHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chi2n)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"chi2n=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d0)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"d0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->edz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"edz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ed0)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ed0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ept)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ept=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vx)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"vx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"vy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"vz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vtxid)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"vtxid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vtxdxy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"vtxdxy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vtxdz)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"vtxdz=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyElectron */
static void G__setup_memvarMyElectron(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyElectron));
   { MyElectron *p; p=(MyElectron*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->GsfTrack)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_MyTracks),-1,-1,1,"GsfTrack=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TrackerTrack)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_MyTracks),-1,-1,1,"TrackerTrack=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eSupClusOverP)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eSupClusOverP=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eSeedClusOverPout)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eSeedClusOverPout=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PIn)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"PIn=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->POut)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"POut=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dEtaSupClusTrVtx)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dEtaSupClusTrVtx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dEtaSeedClusTrCalo)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dEtaSeedClusTrCalo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dPhiSupClusTrVtx)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dPhiSupClusTrVtx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dPhiSeedClusTrCalo)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dPhiSeedClusTrCalo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fbrem)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fbrem=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isBarrel)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"isBarrel=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isEndCap)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"isEndCap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isEcalDriven)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"isEcalDriven=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isTrackerDriven)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"isTrackerDriven=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isEScaleCorr)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"isEScaleCorr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isMomentumCorr)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"isMomentumCorr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nClus)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nClus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->classification)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"classification=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->expectedInnerHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"expectedInnerHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EcalRecHitIsoDr04)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"EcalRecHitIsoDr04=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HcalDepth1TowerSumEtDr04)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"HcalDepth1TowerSumEtDr04=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HcalDepth2TowerSumEtDr04)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"HcalDepth2TowerSumEtDr04=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TrackIsolationDr04)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"TrackIsolationDr04=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EcalRecHitIsoDr03)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"EcalRecHitIsoDr03=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HcalTowerSumEtDr03)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"HcalTowerSumEtDr03=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HcalDepth1TowerSumEtDr03)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"HcalDepth1TowerSumEtDr03=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HcalDepth2TowerSumEtDr03)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"HcalDepth2TowerSumEtDr03=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TrackIsolationDr03)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"TrackIsolationDr03=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eidRobustLoose)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"eidRobustLoose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eidRobustTight)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"eidRobustTight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eidLoose)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"eidLoose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eidTight)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"eidTight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E15)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"E15=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E25Max)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"E25Max=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E55)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"E55=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CovEtaEta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"CovEtaEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CoviEtaiEta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"CoviEtaiEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HadronicOverEm)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"HadronicOverEm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HcalDepth1OverEcal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"HcalDepth1OverEcal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HcalDepth2OverEcal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"HcalDepth2OverEcal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dist_conv)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dist_conv=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dcot_conv)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dcot_conv=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyMuon */
static void G__setup_memvarMyMuon(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyMuon));
   { MyMuon *p; p=(MyMuon*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->globalTrack)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_MyTracks),-1,-1,1,"globalTrack=",0,"Track reconstructed in both tracked and muon detector");
   G__memvar_setup((void*)((long)(&p->innerTrack)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_MyTracks),-1,-1,1,"innerTrack=",0,"Track reconstructed in the tracker only");
   G__memvar_setup((void*)((long)(&p->outerTrack)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_MyTracks),-1,-1,1,"outerTrack=",0,"Track reconstructed in the muon detector only");
   G__memvar_setup((void*)((long)(&p->nChambers)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nChambers=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nChambersMatched)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nChambersMatched=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isoR03sumPt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"isoR03sumPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isoR03emEt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"isoR03emEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isoR03hadEt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"isoR03hadEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isoR03hoEt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"isoR03hoEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isoR03nTracks)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isoR03nTracks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isoR03nJets)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isoR03nJets=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isoR05sumPt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"isoR05sumPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isoR05emEt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"isoR05emEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isoR05hadEt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"isoR05hadEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isoR05hoEt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"isoR05hoEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isoR05nTracks)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isoR05nTracks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isoR05nJets)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isoR05nJets=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calEnergyEm)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"calEnergyEm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calEnergyHad)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"calEnergyHad=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calEnergyHo)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"calEnergyHo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calEnergyEmS9)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"calEnergyEmS9=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calEnergyHadS9)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"calEnergyHadS9=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calEnergyHoS9)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"calEnergyHoS9=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IsGlobalMuon)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"IsGlobalMuon=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IsTrackerMuon)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"IsTrackerMuon=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IsStandaloneMuon)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"IsStandaloneMuon=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IsCaloMuon)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"IsCaloMuon=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->AllGlobalMuons)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"AllGlobalMuons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->AllStandAloneMuons)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"AllStandAloneMuons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->AllTrackerMuons)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"AllTrackerMuons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TrackerMuonArbitrated)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TrackerMuonArbitrated=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->AllArbitrated)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"AllArbitrated=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->GlobalMuonPromptTight)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"GlobalMuonPromptTight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TMLastStationLoose)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TMLastStationLoose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TMLastStationTight)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TMLastStationTight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TM2DCompatibilityLoose)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TM2DCompatibilityLoose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TM2DCompatibilityTight)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TM2DCompatibilityTight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TMOneStationLoose)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TMOneStationLoose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TMOneStationTight)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TMOneStationTight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TMLastStationOptimizedLowPtLoose)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TMLastStationOptimizedLowPtLoose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TMLastStationOptimizedLowPtTight)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TMLastStationOptimizedLowPtTight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->GMTkChiCompatibility)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"GMTkChiCompatibility=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->GMStaChiCompatibility)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"GMStaChiCompatibility=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->GMTkKinkTight)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"GMTkKinkTight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TMLastStationAngLoose)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TMLastStationAngLoose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TMLastStationAngTight)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TMLastStationAngTight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TMOneStationAngLoose)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TMOneStationAngLoose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TMOneStationAngTight)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TMOneStationAngTight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TMLastStationOptimizedBarrelLowPtLoose)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TMLastStationOptimizedBarrelLowPtLoose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TMLastStationOptimizedBarrelLowPtTight)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TMLastStationOptimizedBarrelLowPtTight=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyBaseJet */
static void G__setup_memvarMyBaseJet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyBaseJet));
   { MyBaseJet *p; p=(MyBaseJet*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->jec)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"jec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jec_unc)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"jec_unc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyJet */
static void G__setup_memvarMyJet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyJet));
   { MyJet *p; p=(MyJet*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->mapjet)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOMyBaseJetcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOMyBaseJetgRsPgRsPgR),G__defined_typename("map<string,MyBaseJet>"),-1,1,"mapjet=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nconstituent)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"nconstituent=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LooseJetId)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"LooseJetId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TightJetId)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TightJetId=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyCaloJet */
static void G__setup_memvarMyCaloJet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyCaloJet));
   { MyCaloJet *p; p=(MyCaloJet*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fem)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fem=",0,"-- emEnergyFraction() (for PFJet: fem_ch + fem_ne)");
   G__memvar_setup((void*)((long)(&p->eem_EB)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eem_EB=",0,"-- emEnergyInEB()");
   G__memvar_setup((void*)((long)(&p->eem_EE)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eem_EE=",0,"-- emEnergyInEE()");
   G__memvar_setup((void*)((long)(&p->eem_HF)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eem_HF=",0,"-- emEnergyInHF()");
   G__memvar_setup((void*)((long)(&p->fhad)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fhad=",0,"-- energyFractionHadronic()  (for PFjet: fhad_ch + fhad_ne)");
   G__memvar_setup((void*)((long)(&p->ehad_HB)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ehad_HB=",0,"-- hadEnergyInHB()");
   G__memvar_setup((void*)((long)(&p->ehad_HE)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ehad_HE=",0,"-- hadEnergyInHE()");
   G__memvar_setup((void*)((long)(&p->ehad_HF)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ehad_HF=",0,"-- hadEnergyInHF()");
   G__memvar_setup((void*)((long)(&p->ehad_HO)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ehad_HO=",0,"-- hadEnergyInHO()");
   G__memvar_setup((void*)((long)(&p->n60)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"n60=",0,"-- n60()");
   G__memvar_setup((void*)((long)(&p->n90)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"n90=",0,"-- n90()");
   G__memvar_setup((void*)((long)(&p->emax_ecal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"emax_ecal=",0,"-- maxEInEmTowers()");
   G__memvar_setup((void*)((long)(&p->emax_hcal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"emax_hcal=",0,"-- maxEInHadTowers()");
   G__memvar_setup((void*)((long)(&p->n90hits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"n90hits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HPD)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"HPD=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->RBX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"RBX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigma_eta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sigma_eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigma_phi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sigma_phi=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyTrackJet */
static void G__setup_memvarMyTrackJet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyTrackJet));
   { MyTrackJet *p; p=(MyTrackJet*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->vtxId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"vtxId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mapjet)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_maplEstringcOMyBaseJetcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOMyBaseJetgRsPgRsPgR),G__defined_typename("map<string,MyBaseJet>"),-1,1,"mapjet=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e_raw)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"e_raw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt_raw)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pt_raw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta_raw)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eta_raw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi_raw)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"phi_raw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->px_raw)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"px_raw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->py_raw)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"py_raw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pz_raw)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pz_raw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e_cal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"e_cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt_cal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pt_cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta_cal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eta_cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi_cal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"phi_cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->px_cal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"px_cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->py_cal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"py_cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pz_cal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pz_cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ntrack)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ntrack=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vtracks)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR),G__defined_typename("vector<MyTracks>"),-1,1,"vtracks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackjet_pv)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"trackjet_pv=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<MyTracks,allocator<MyTracks> > */
static void G__setup_memvarvectorlEMyTrackscOallocatorlEMyTracksgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   { vector<MyTracks,allocator<MyTracks> > *p; p=(vector<MyTracks,allocator<MyTracks> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* MyPFJet */
static void G__setup_memvarMyPFJet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyPFJet));
   { MyPFJet *p; p=(MyPFJet*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fhad_ch)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fhad_ch=",0,"-- chargedHadronEnergyFraction()");
   G__memvar_setup((void*)((long)(&p->fhad_ne)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fhad_ne=",0,"-- neutralHadronEnergyFraction()");
   G__memvar_setup((void*)((long)(&p->fem_ch)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fem_ch=",0,"-- chargedEmEnergyFraction()");
   G__memvar_setup((void*)((long)(&p->fem_ne)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fem_ne=",0,"-- neutralEmEnergyFraction()");
   G__memvar_setup((void*)((long)(&p->multi_ch)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"multi_ch=",0,"-- chargedMultiplicity()");
   G__memvar_setup((void*)((long)(&p->multi_ne)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"multi_ne=",0,"-- neutralMultiplicity()");
   G__memvar_setup((void*)((long)(&p->multi_ch_had)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"multi_ch_had=",0,"-- chargedHadronMultiplicity()");
   G__memvar_setup((void*)((long)(&p->multi_ne_had)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"multi_ne_had=",0,"-- neutralHadronMultiplicity()");
   G__memvar_setup((void*)((long)(&p->multi_gamma)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"multi_gamma=",0,"-- photonMultiplicity()");
   G__memvar_setup((void*)((long)(&p->multi_ele)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"multi_ele=",0,"-- electronMultiplicity()");
   G__memvar_setup((void*)((long)(&p->multi_mu)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"multi_mu=",0,"-- muonMultiplicity()");
   G__memvar_setup((void*)((long)(&p->ntrack)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ntrack=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vtracks)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR),G__defined_typename("vector<MyTracks>"),-1,1,"vtracks=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyPFCand */
static void G__setup_memvarMyPFCand(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyPFCand));
   { MyPFCand *p; p=(MyPFCand*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyPFCandcLcLParticleType),-1,-2,1,G__FastAllocString(4096).Format("X=%lldLL",(long long)MyPFCand::X).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyPFCandcLcLParticleType),-1,-2,1,G__FastAllocString(4096).Format("h=%lldLL",(long long)MyPFCand::h).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyPFCandcLcLParticleType),-1,-2,1,G__FastAllocString(4096).Format("e=%lldLL",(long long)MyPFCand::e).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyPFCandcLcLParticleType),-1,-2,1,G__FastAllocString(4096).Format("mu=%lldLL",(long long)MyPFCand::mu).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyPFCandcLcLParticleType),-1,-2,1,G__FastAllocString(4096).Format("gamma=%lldLL",(long long)MyPFCand::gamma).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyPFCandcLcLParticleType),-1,-2,1,G__FastAllocString(4096).Format("h0=%lldLL",(long long)MyPFCand::h0).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyPFCandcLcLParticleType),-1,-2,1,G__FastAllocString(4096).Format("h_HF=%lldLL",(long long)MyPFCand::h_HF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__eventdictLN_MyPFCandcLcLParticleType),-1,-2,1,G__FastAllocString(4096).Format("egamma_HF=%lldLL",(long long)MyPFCand::egamma_HF).data(),0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->particleId)-(long)(p)),105,0,0,G__get_linked_tagnum(&G__eventdictLN_MyPFCandcLcLParticleType),-1,-1,1,"particleId=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyCaloTower */
static void G__setup_memvarMyCaloTower(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyCaloTower));
   { MyCaloTower *p; p=(MyCaloTower*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->emEnergy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"emEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hadEnergy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"hadEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hasEB)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"hasEB=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hasEE)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"hasEE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hasHB)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"hasHB=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hasHE)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"hasHE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hasHF)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"hasHF=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zside)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"zside=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyZDCHit */
static void G__setup_memvarMyZDCHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyZDCHit));
   { MyZDCHit *p; p=(MyZDCHit*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->side)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"side=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->section)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"section=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->channel)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"channel=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->channelId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"channelId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->energy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"energy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"time=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyZDCDigi */
static void G__setup_memvarMyZDCDigi(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyZDCDigi));
   { MyZDCDigi *p; p=(MyZDCDigi*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->side)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"side=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->section)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"section=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->channel)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"channel=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->channelId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"channelId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->digiADC)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"digiADC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->digifC)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"digifC=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyZDCInfo */
static void G__setup_memvarMyZDCInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyZDCInfo));
   { MyZDCInfo *p; p=(MyZDCInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->nHitsPerChannel)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR),G__defined_typename("map<int,int>"),-1,1,"nHitsPerChannel=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumEnergyPerChannel)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR),G__defined_typename("map<int,double>"),-1,1,"sumEnergyPerChannel=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyFSCHit */
static void G__setup_memvarMyFSCHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyFSCHit));
   { MyFSCHit *p; p=(MyFSCHit*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->side)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"side=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->section)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"section=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->channel)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"channel=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->channelId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"channelId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->energy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"energy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"time=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyFSCDigi */
static void G__setup_memvarMyFSCDigi(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyFSCDigi));
   { MyFSCDigi *p; p=(MyFSCDigi*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->side)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"side=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->section)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"section=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->channel)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"channel=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->channelId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"channelId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->digiADC)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"digiADC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->digifC)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"digifC=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyFSCInfo */
static void G__setup_memvarMyFSCInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyFSCInfo));
   { MyFSCInfo *p; p=(MyFSCInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->nHitsPerChannel)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR),G__defined_typename("map<int,int>"),-1,1,"nHitsPerChannel=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumEnergyPerChannel)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR),G__defined_typename("map<int,double>"),-1,1,"sumEnergyPerChannel=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<MyBeamSpot,allocator<MyBeamSpot> > */
static void G__setup_memvarvectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR));
   { vector<MyBeamSpot,allocator<MyBeamSpot> > *p; p=(vector<MyBeamSpot,allocator<MyBeamSpot> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyCastorDigi,allocator<MyCastorDigi> > */
static void G__setup_memvarvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   { vector<MyCastorDigi,allocator<MyCastorDigi> > *p; p=(vector<MyCastorDigi,allocator<MyCastorDigi> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyCastorJet,allocator<MyCastorJet> > */
static void G__setup_memvarvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   { vector<MyCastorJet,allocator<MyCastorJet> > *p; p=(vector<MyCastorJet,allocator<MyCastorJet> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyCastorRecHit,allocator<MyCastorRecHit> > */
static void G__setup_memvarvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   { vector<MyCastorRecHit,allocator<MyCastorRecHit> > *p; p=(vector<MyCastorRecHit,allocator<MyCastorRecHit> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyDiJet,allocator<MyDiJet> > */
static void G__setup_memvarvectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR));
   { vector<MyDiJet,allocator<MyDiJet> > *p; p=(vector<MyDiJet,allocator<MyDiJet> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyEvtId,allocator<MyEvtId> > */
static void G__setup_memvarvectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR));
   { vector<MyEvtId,allocator<MyEvtId> > *p; p=(vector<MyEvtId,allocator<MyEvtId> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyFwdGap,allocator<MyFwdGap> > */
static void G__setup_memvarvectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR));
   { vector<MyFwdGap,allocator<MyFwdGap> > *p; p=(vector<MyFwdGap,allocator<MyFwdGap> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyGenKin,allocator<MyGenKin> > */
static void G__setup_memvarvectorlEMyGenKincOallocatorlEMyGenKingRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR));
   { vector<MyGenKin,allocator<MyGenKin> > *p; p=(vector<MyGenKin,allocator<MyGenKin> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyPUSumInfo,allocator<MyPUSumInfo> > */
static void G__setup_memvarvectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR));
   { vector<MyPUSumInfo,allocator<MyPUSumInfo> > *p; p=(vector<MyPUSumInfo,allocator<MyPUSumInfo> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyMet,allocator<MyMet> > */
static void G__setup_memvarvectorlEMyMetcOallocatorlEMyMetgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR));
   { vector<MyMet,allocator<MyMet> > *p; p=(vector<MyMet,allocator<MyMet> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyGenMet,allocator<MyGenMet> > */
static void G__setup_memvarvectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR));
   { vector<MyGenMet,allocator<MyGenMet> > *p; p=(vector<MyGenMet,allocator<MyGenMet> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyGenJet,allocator<MyGenJet> > */
static void G__setup_memvarvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   { vector<MyGenJet,allocator<MyGenJet> > *p; p=(vector<MyGenJet,allocator<MyGenJet> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyHLTrig,allocator<MyHLTrig> > */
static void G__setup_memvarvectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR));
   { vector<MyHLTrig,allocator<MyHLTrig> > *p; p=(vector<MyHLTrig,allocator<MyHLTrig> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyL1Trig,allocator<MyL1Trig> > */
static void G__setup_memvarvectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR));
   { vector<MyL1Trig,allocator<MyL1Trig> > *p; p=(vector<MyL1Trig,allocator<MyL1Trig> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyL1TrigOld,allocator<MyL1TrigOld> > */
static void G__setup_memvarvectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR));
   { vector<MyL1TrigOld,allocator<MyL1TrigOld> > *p; p=(vector<MyL1TrigOld,allocator<MyL1TrigOld> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyMITEvtSel,allocator<MyMITEvtSel> > */
static void G__setup_memvarvectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR));
   { vector<MyMITEvtSel,allocator<MyMITEvtSel> > *p; p=(vector<MyMITEvtSel,allocator<MyMITEvtSel> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyPart,allocator<MyPart> > */
static void G__setup_memvarvectorlEMyPartcOallocatorlEMyPartgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR));
   { vector<MyPart,allocator<MyPart> > *p; p=(vector<MyPart,allocator<MyPart> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MySimVertex,allocator<MySimVertex> > */
static void G__setup_memvarvectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR));
   { vector<MySimVertex,allocator<MySimVertex> > *p; p=(vector<MySimVertex,allocator<MySimVertex> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyVertex,allocator<MyVertex> > */
static void G__setup_memvarvectorlEMyVertexcOallocatorlEMyVertexgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   { vector<MyVertex,allocator<MyVertex> > *p; p=(vector<MyVertex,allocator<MyVertex> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyElectron,allocator<MyElectron> > */
static void G__setup_memvarvectorlEMyElectroncOallocatorlEMyElectrongRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   { vector<MyElectron,allocator<MyElectron> > *p; p=(vector<MyElectron,allocator<MyElectron> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyMuon,allocator<MyMuon> > */
static void G__setup_memvarvectorlEMyMuoncOallocatorlEMyMuongRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   { vector<MyMuon,allocator<MyMuon> > *p; p=(vector<MyMuon,allocator<MyMuon> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyBaseJet,allocator<MyBaseJet> > */
static void G__setup_memvarvectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR));
   { vector<MyBaseJet,allocator<MyBaseJet> > *p; p=(vector<MyBaseJet,allocator<MyBaseJet> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyJet,allocator<MyJet> > */
static void G__setup_memvarvectorlEMyJetcOallocatorlEMyJetgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   { vector<MyJet,allocator<MyJet> > *p; p=(vector<MyJet,allocator<MyJet> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyCaloJet,allocator<MyCaloJet> > */
static void G__setup_memvarvectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR));
   { vector<MyCaloJet,allocator<MyCaloJet> > *p; p=(vector<MyCaloJet,allocator<MyCaloJet> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyTrackJet,allocator<MyTrackJet> > */
static void G__setup_memvarvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   { vector<MyTrackJet,allocator<MyTrackJet> > *p; p=(vector<MyTrackJet,allocator<MyTrackJet> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyPFJet,allocator<MyPFJet> > */
static void G__setup_memvarvectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR));
   { vector<MyPFJet,allocator<MyPFJet> > *p; p=(vector<MyPFJet,allocator<MyPFJet> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyPFCand,allocator<MyPFCand> > */
static void G__setup_memvarvectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR));
   { vector<MyPFCand,allocator<MyPFCand> > *p; p=(vector<MyPFCand,allocator<MyPFCand> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyCaloTower,allocator<MyCaloTower> > */
static void G__setup_memvarvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   { vector<MyCaloTower,allocator<MyCaloTower> > *p; p=(vector<MyCaloTower,allocator<MyCaloTower> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyZDCHit,allocator<MyZDCHit> > */
static void G__setup_memvarvectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR));
   { vector<MyZDCHit,allocator<MyZDCHit> > *p; p=(vector<MyZDCHit,allocator<MyZDCHit> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyZDCDigi,allocator<MyZDCDigi> > */
static void G__setup_memvarvectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR));
   { vector<MyZDCDigi,allocator<MyZDCDigi> > *p; p=(vector<MyZDCDigi,allocator<MyZDCDigi> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyZDCInfo,allocator<MyZDCInfo> > */
static void G__setup_memvarvectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR));
   { vector<MyZDCInfo,allocator<MyZDCInfo> > *p; p=(vector<MyZDCInfo,allocator<MyZDCInfo> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyFSCHit,allocator<MyFSCHit> > */
static void G__setup_memvarvectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR));
   { vector<MyFSCHit,allocator<MyFSCHit> > *p; p=(vector<MyFSCHit,allocator<MyFSCHit> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyFSCDigi,allocator<MyFSCDigi> > */
static void G__setup_memvarvectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR));
   { vector<MyFSCDigi,allocator<MyFSCDigi> > *p; p=(vector<MyFSCDigi,allocator<MyFSCDigi> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyFSCInfo,allocator<MyFSCInfo> > */
static void G__setup_memvarvectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR));
   { vector<MyFSCInfo,allocator<MyFSCInfo> > *p; p=(vector<MyFSCInfo,allocator<MyFSCInfo> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvareventdict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMyBeamSpot(void) {
   /* MyBeamSpot */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot));
   G__memfunc_setup("MyBeamSpot",993,G__eventdict_168_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_168_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_168_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_168_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyBeamSpot::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_168_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyBeamSpot::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_168_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyBeamSpot::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_168_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyBeamSpot::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_168_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_168_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyBeamSpot::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_168_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyBeamSpot::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_168_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyBeamSpot::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_168_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyBeamSpot::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyBeamSpot", 993, G__eventdict_168_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot), -1, 0, 1, 1, 1, 0, "u 'MyBeamSpot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyBeamSpot", 1119, G__eventdict_168_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_168_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot), -1, 1, 1, 1, 1, 0, "u 'MyBeamSpot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyCastorDigi(void) {
   /* MyCastorDigi */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi));
   G__memfunc_setup("MyCastorDigi",1199,G__eventdict_169_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_169_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__eventdict_169_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__eventdict_169_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyCastorDigi::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_169_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCastorDigi::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_169_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyCastorDigi::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_169_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyCastorDigi::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_169_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_169_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCastorDigi::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_169_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCastorDigi::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_169_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCastorDigi::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_169_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCastorDigi::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyCastorDigi", 1199, G__eventdict_169_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi), -1, 0, 1, 1, 1, 0, "u 'MyCastorDigi' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyCastorDigi", 1325, G__eventdict_169_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_169_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi), -1, 1, 1, 1, 1, 0, "u 'MyCastorDigi' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyCastorJet(void) {
   /* MyCastorJet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyCastorJet));
   G__memfunc_setup("MyCastorJet",1109,G__eventdict_170_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyCastorJet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_170_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__eventdict_170_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__eventdict_170_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyCastorJet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_170_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCastorJet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_170_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyCastorJet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_170_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyCastorJet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_170_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_170_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCastorJet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_170_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCastorJet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_170_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCastorJet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_170_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCastorJet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyCastorJet", 1109, G__eventdict_170_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyCastorJet), -1, 0, 1, 1, 1, 0, "u 'MyCastorJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyCastorJet", 1235, G__eventdict_170_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_170_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyCastorJet), -1, 1, 1, 1, 1, 0, "u 'MyCastorJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyCastorRecHit(void) {
   /* MyCastorRecHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit));
   G__memfunc_setup("MyCastorRecHit",1393,G__eventdict_171_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_171_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__eventdict_171_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__eventdict_171_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyCastorRecHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_171_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCastorRecHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_171_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyCastorRecHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_171_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyCastorRecHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_171_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_171_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCastorRecHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_171_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCastorRecHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_171_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCastorRecHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_171_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCastorRecHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyCastorRecHit", 1393, G__eventdict_171_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit), -1, 0, 1, 1, 1, 0, "u 'MyCastorRecHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyCastorRecHit", 1519, G__eventdict_171_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_171_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit), -1, 1, 1, 1, 1, 0, "u 'MyCastorRecHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyDiJet(void) {
   /* MyDiJet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyDiJet));
   G__memfunc_setup("MyDiJet",662,G__eventdict_172_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyDiJet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_172_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_172_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_172_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyDiJet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_172_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyDiJet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_172_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyDiJet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_172_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyDiJet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_172_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_172_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyDiJet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_172_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyDiJet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_172_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyDiJet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_172_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyDiJet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyDiJet", 662, G__eventdict_172_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyDiJet), -1, 0, 1, 1, 1, 0, "u 'MyDiJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyDiJet", 788, G__eventdict_172_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_172_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyDiJet), -1, 1, 1, 1, 1, 0, "u 'MyDiJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyEvtId(void) {
   /* MyEvtId */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyEvtId));
   G__memfunc_setup("MyEvtId",674,G__eventdict_173_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyEvtId), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_173_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_173_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_173_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyEvtId::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_173_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyEvtId::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_173_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyEvtId::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_173_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyEvtId::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_173_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_173_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyEvtId::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_173_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyEvtId::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_173_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyEvtId::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_173_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyEvtId::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyEvtId", 674, G__eventdict_173_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyEvtId), -1, 0, 1, 1, 1, 0, "u 'MyEvtId' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyEvtId", 800, G__eventdict_173_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_173_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyEvtId), -1, 1, 1, 1, 1, 0, "u 'MyEvtId' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyFwdGap(void) {
   /* MyFwdGap */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyFwdGap));
   G__memfunc_setup("MyFwdGap",767,G__eventdict_174_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyFwdGap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_174_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_174_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_174_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyFwdGap::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_174_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyFwdGap::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_174_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyFwdGap::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_174_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyFwdGap::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_174_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_174_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyFwdGap::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_174_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyFwdGap::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_174_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyFwdGap::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_174_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyFwdGap::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyFwdGap", 767, G__eventdict_174_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyFwdGap), -1, 0, 1, 1, 1, 0, "u 'MyFwdGap' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyFwdGap", 893, G__eventdict_174_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_174_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyFwdGap), -1, 1, 1, 1, 1, 0, "u 'MyFwdGap' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyPart(void) {
   /* MyPart */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyPart));
   G__memfunc_setup("MyPart",605,G__eventdict_232_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyPart), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_232_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__eventdict_232_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("vmpi",444,G__eventdict_232_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_TLorentzVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__eventdict_232_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'MyPart' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__eventdict_232_0_6, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyPart::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_232_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyPart::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_232_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyPart::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_232_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyPart::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_232_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_232_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyPart::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_232_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyPart::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_232_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyPart::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_232_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyPart::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyPart", 605, G__eventdict_232_0_18, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyPart), -1, 0, 1, 1, 1, 0, "u 'MyPart' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyPart", 731, G__eventdict_232_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_232_0_20, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyPart), -1, 1, 1, 1, 1, 0, "u 'MyPart' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyMet(void) {
   /* MyMet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyMet));
   G__memfunc_setup("MyMet",492,G__eventdict_233_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyMet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__eventdict_233_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyMet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_233_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyMet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_233_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyMet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_233_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyMet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_233_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_233_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyMet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_233_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyMet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_233_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyMet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_233_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyMet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyMet", 492, G__eventdict_233_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyMet), -1, 0, 1, 1, 1, 0, "u 'MyMet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyMet", 618, G__eventdict_233_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_233_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyMet), -1, 1, 1, 1, 1, 0, "u 'MyMet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyGenMet(void) {
   /* MyGenMet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenMet));
   G__memfunc_setup("MyGenMet",774,G__eventdict_234_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyGenMet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_234_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_234_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_234_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyGenMet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_234_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyGenMet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_234_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyGenMet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_234_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyGenMet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_234_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_234_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyGenMet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_234_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyGenMet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_234_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyGenMet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_234_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyGenMet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyGenMet", 774, G__eventdict_234_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyGenMet), -1, 0, 1, 1, 1, 0, "u 'MyGenMet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyGenMet", 900, G__eventdict_234_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_234_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyGenMet), -1, 1, 1, 1, 1, 0, "u 'MyGenMet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyGenKin(void) {
   /* MyGenKin */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenKin));
   G__memfunc_setup("MyGenKin",770,G__eventdict_235_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyGenKin), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_235_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_235_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_235_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyGenKin::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_235_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyGenKin::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_235_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyGenKin::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_235_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyGenKin::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_235_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_235_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyGenKin::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_235_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyGenKin::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_235_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyGenKin::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_235_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyGenKin::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyGenKin", 770, G__eventdict_235_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyGenKin), -1, 0, 1, 1, 1, 0, "u 'MyGenKin' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyGenKin", 896, G__eventdict_235_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_235_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyGenKin), -1, 1, 1, 1, 1, 0, "u 'MyGenKin' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyGenPart(void) {
   /* MyGenPart */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenPart));
   G__memfunc_setup("MyGenPart",887,G__eventdict_236_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyGenPart), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__eventdict_236_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyGenPart::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_236_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyGenPart::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_236_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyGenPart::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_236_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyGenPart::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_236_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_236_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyGenPart::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_236_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyGenPart::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_236_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyGenPart::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_236_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyGenPart::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyGenPart", 887, G__eventdict_236_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyGenPart), -1, 0, 1, 1, 1, 0, "u 'MyGenPart' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyGenPart", 1013, G__eventdict_236_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_236_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyGenPart), -1, 1, 1, 1, 1, 0, "u 'MyGenPart' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyGenJet(void) {
   /* MyGenJet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenJet));
   G__memfunc_setup("MyGenJet",771,G__eventdict_237_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyGenJet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__eventdict_237_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyGenJet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_237_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyGenJet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_237_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyGenJet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_237_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyGenJet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_237_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_237_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyGenJet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_237_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyGenJet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_237_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyGenJet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_237_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyGenJet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyGenJet", 771, G__eventdict_237_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyGenJet), -1, 0, 1, 1, 1, 0, "u 'MyGenJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyGenJet", 897, G__eventdict_237_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_237_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyGenJet), -1, 1, 1, 1, 1, 0, "u 'MyGenJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR(void) {
   /* vector<MyGenPart,allocator<MyGenPart> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_239_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenPart), G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_239_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenPart), G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_239_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_239_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_239_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_239_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_239_0_7, 107, -1, G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_239_0_8, 107, -1, G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_239_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_239_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - sz u 'MyGenPart' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_239_0_11, 107, -1, G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_239_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_239_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenPart), G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_239_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenPart), G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenPart,allocator<MyGenPart> >",3714,G__eventdict_239_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenPart,allocator<MyGenPart> >",3714,G__eventdict_239_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - n u 'MyGenPart' - 11 'MyGenPart()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenPart,allocator<MyGenPart> >",3714,G__eventdict_239_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyGenPart,allocator<MyGenPart> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenPart,allocator<MyGenPart> >",3714,G__eventdict_239_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' 'vector<MyGenPart,allocator<MyGenPart> >::const_iterator' 10 - first u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' 'vector<MyGenPart,allocator<MyGenPart> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_239_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyGenPart,allocator<MyGenPart> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_239_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_239_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenPart), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_239_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenPart), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_239_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyGenPart' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_239_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyGenPart,allocator<MyGenPart> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_239_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' - 0 - position u 'MyGenPart' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_239_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' - 0 - position u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' 'vector<MyGenPart,allocator<MyGenPart> >::const_iterator' 10 - first "
"u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' 'vector<MyGenPart,allocator<MyGenPart> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_239_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' - 0 - position k - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - n "
"u 'MyGenPart' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_239_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_239_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_239_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' - 0 - first u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_239_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyGenPart,allocator<MyGenPart> >", 3840, G__eventdict_239_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyPUSumInfo(void) {
   /* MyPUSumInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyPUSumInfo));
   G__memfunc_setup("MyPUSumInfo",1068,G__eventdict_242_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyPUSumInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_242_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_242_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_242_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyPUSumInfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_242_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyPUSumInfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_242_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyPUSumInfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_242_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyPUSumInfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_242_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_242_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyPUSumInfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_242_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyPUSumInfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_242_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyPUSumInfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_242_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyPUSumInfo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyPUSumInfo", 1068, G__eventdict_242_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyPUSumInfo), -1, 0, 1, 1, 1, 0, "u 'MyPUSumInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyPUSumInfo", 1194, G__eventdict_242_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_242_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyPUSumInfo), -1, 1, 1, 1, 1, 0, "u 'MyPUSumInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyHLTrig(void) {
   /* MyHLTrig */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyHLTrig));
   G__memfunc_setup("MyHLTrig",752,G__eventdict_482_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyHLTrig), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_482_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_482_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_482_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyHLTrig::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_482_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyHLTrig::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_482_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyHLTrig::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_482_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyHLTrig::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_482_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_482_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyHLTrig::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_482_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyHLTrig::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_482_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyHLTrig::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_482_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyHLTrig::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyHLTrig", 752, G__eventdict_482_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyHLTrig), -1, 0, 1, 1, 1, 0, "u 'MyHLTrig' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyHLTrig", 878, G__eventdict_482_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_482_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyHLTrig), -1, 1, 1, 1, 1, 0, "u 'MyHLTrig' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEstringcOboolgR(void) {
   /* pair<string,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_pairlEstringcOboolgR));
   G__memfunc_setup("pair<string,bool>",1685,G__eventdict_486_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_pairlEstringcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<string,bool>",1685,G__eventdict_486_0_2, 105, G__get_linked_tagnum(&G__eventdictLN_pairlEstringcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__eventdictLN_pairlEstringcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<string,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<string,bool>", 1685, G__eventdict_486_0_4, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_pairlEstringcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<string,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<string,bool>", 1811, G__eventdict_486_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyL1Trig(void) {
   /* MyL1Trig */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyL1Trig));
   G__memfunc_setup("MyL1Trig",729,G__eventdict_490_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyL1Trig), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_490_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_490_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPhys",720,G__eventdict_490_0_4, 121, -1, -1, 0, 7, 1, 1, 0, 
"u 'string' - 0 - name h - - 0 - - "
"g - - 0 - mask g - - 0 - decisionBeforeMask "
"g - - 0 - decisionAfterMask h - - 0 - - "
"u 'string' - 0 - alias", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhysName",1093,G__eventdict_490_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_string), -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhysMask",1104,G__eventdict_490_0_6, 103, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhysDecisionBefore",2117,G__eventdict_490_0_7, 103, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhysDecisionAfter",2020,G__eventdict_490_0_8, 103, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhysPrescale",1523,G__eventdict_490_0_9, 104, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhysAlias",1198,G__eventdict_490_0_10, 117, G__get_linked_tagnum(&G__eventdictLN_string), -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhysBit",995,G__eventdict_490_0_11, 104, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhysMaskByName",1676,G__eventdict_490_0_12, 103, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhysDecisionBeforeByName",2689,G__eventdict_490_0_13, 103, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhysDecisionAfterByName",2592,G__eventdict_490_0_14, 103, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhysPrescaleByName",2095,G__eventdict_490_0_15, 104, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhysAliasByName",1770,G__eventdict_490_0_16, 117, G__get_linked_tagnum(&G__eventdictLN_string), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTech",688,G__eventdict_490_0_17, 121, -1, -1, 0, 7, 1, 1, 0, 
"u 'string' - 0 - name h - - 0 - - "
"g - - 0 - mask g - - 0 - decisionBeforeMask "
"g - - 0 - decisionAfterMask h - - 0 - - "
"u 'string' - 0 - alias", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTechName",1061,G__eventdict_490_0_18, 117, G__get_linked_tagnum(&G__eventdictLN_string), -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTechMask",1072,G__eventdict_490_0_19, 103, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTechDecisionBefore",2085,G__eventdict_490_0_20, 103, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTechDecisionAfter",1988,G__eventdict_490_0_21, 103, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTechPrescale",1491,G__eventdict_490_0_22, 104, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTechAlias",1166,G__eventdict_490_0_23, 117, G__get_linked_tagnum(&G__eventdictLN_string), -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTechBit",963,G__eventdict_490_0_24, 104, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTechMaskByName",1644,G__eventdict_490_0_25, 103, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTechDecisionBeforeByName",2657,G__eventdict_490_0_26, 103, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTechDecisionAfterByName",2560,G__eventdict_490_0_27, 103, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTechPrescaleByName",2063,G__eventdict_490_0_28, 104, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTechAliasByName",1738,G__eventdict_490_0_29, 117, G__get_linked_tagnum(&G__eventdictLN_string), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_490_0_30, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyL1Trig::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_490_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyL1Trig::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_490_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyL1Trig::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_490_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyL1Trig::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_490_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_490_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyL1Trig::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_490_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyL1Trig::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_490_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyL1Trig::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_490_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyL1Trig::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyL1Trig", 729, G__eventdict_490_0_42, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyL1Trig), -1, 0, 1, 1, 1, 0, "u 'MyL1Trig' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyL1Trig", 855, G__eventdict_490_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_490_0_44, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyL1Trig), -1, 1, 1, 1, 1, 0, "u 'MyL1Trig' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyL1TrigOld(void) {
   /* MyL1TrigOld */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyL1TrigOld));
   G__memfunc_setup("MyL1TrigOld",1016,G__eventdict_498_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyL1TrigOld), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_498_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_498_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_498_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyL1TrigOld::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_498_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyL1TrigOld::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_498_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyL1TrigOld::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_498_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyL1TrigOld::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_498_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_498_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyL1TrigOld::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_498_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyL1TrigOld::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_498_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyL1TrigOld::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_498_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyL1TrigOld::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyL1TrigOld", 1016, G__eventdict_498_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyL1TrigOld), -1, 0, 1, 1, 1, 0, "u 'MyL1TrigOld' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyL1TrigOld", 1142, G__eventdict_498_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_498_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyL1TrigOld), -1, 1, 1, 1, 1, 0, "u 'MyL1TrigOld' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyMITEvtSel(void) {
   /* MyMITEvtSel */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyMITEvtSel));
   G__memfunc_setup("MyMITEvtSel",1027,G__eventdict_499_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyMITEvtSel), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_499_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_499_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_499_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyMITEvtSel::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_499_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyMITEvtSel::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_499_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyMITEvtSel::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_499_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyMITEvtSel::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_499_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_499_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyMITEvtSel::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_499_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyMITEvtSel::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_499_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyMITEvtSel::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_499_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyMITEvtSel::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyMITEvtSel", 1027, G__eventdict_499_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyMITEvtSel), -1, 0, 1, 1, 1, 0, "u 'MyMITEvtSel' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyMITEvtSel", 1153, G__eventdict_499_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_499_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyMITEvtSel), -1, 1, 1, 1, 1, 0, "u 'MyMITEvtSel' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMySimVertex(void) {
   /* MySimVertex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MySimVertex));
   G__memfunc_setup("MySimVertex",1133,G__eventdict_500_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MySimVertex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_500_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_500_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_500_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MySimVertex::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_500_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MySimVertex::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_500_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MySimVertex::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_500_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MySimVertex::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_500_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_500_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MySimVertex::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_500_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MySimVertex::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_500_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MySimVertex::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_500_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MySimVertex::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MySimVertex", 1133, G__eventdict_500_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MySimVertex), -1, 0, 1, 1, 1, 0, "u 'MySimVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MySimVertex", 1259, G__eventdict_500_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_500_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MySimVertex), -1, 1, 1, 1, 1, 0, "u 'MySimVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyVertex(void) {
   /* MyVertex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyVertex));
   G__memfunc_setup("MyVertex",836,G__eventdict_501_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_501_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_501_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("chi2n",468,G__eventdict_501_0_4, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_501_0_5, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyVertex::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_501_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyVertex::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_501_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyVertex::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_501_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyVertex::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_501_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_501_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyVertex::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_501_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyVertex::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_501_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyVertex::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_501_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyVertex::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyVertex", 836, G__eventdict_501_0_17, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 0, 1, 1, 1, 0, "u 'MyVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyVertex", 962, G__eventdict_501_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_501_0_19, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 1, 1, 1, 1, 0, "u 'MyVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyTracks(void) {
   /* MyTracks */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyTracks));
   G__memfunc_setup("MyTracks",814,G__eventdict_502_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyTracks), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("nValidTrackerHits",1730,G__eventdict_502_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nValidMuonHits",1429,G__eventdict_502_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_502_0_6, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyTracks::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_502_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyTracks::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_502_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyTracks::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_502_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyTracks::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_502_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_502_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyTracks::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_502_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyTracks::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_502_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyTracks::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_502_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyTracks::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyTracks", 814, G__eventdict_502_0_18, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyTracks), -1, 0, 1, 1, 1, 0, "u 'MyTracks' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyTracks", 940, G__eventdict_502_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_502_0_20, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyTracks), -1, 1, 1, 1, 1, 0, "u 'MyTracks' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyElectron(void) {
   /* MyElectron */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyElectron));
   G__memfunc_setup("MyElectron",1026,G__eventdict_503_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyElectron), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__eventdict_503_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyElectron::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_503_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyElectron::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_503_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyElectron::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_503_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyElectron::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_503_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_503_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyElectron::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_503_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyElectron::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_503_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyElectron::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_503_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyElectron::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyElectron", 1026, G__eventdict_503_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyElectron), -1, 0, 1, 1, 1, 0, "u 'MyElectron' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyElectron", 1152, G__eventdict_503_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_503_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyElectron), -1, 1, 1, 1, 1, 0, "u 'MyElectron' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyMuon(void) {
   /* MyMuon */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyMuon));
   G__memfunc_setup("MyMuon",613,G__eventdict_504_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyMuon), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__eventdict_504_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyMuon::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_504_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyMuon::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_504_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyMuon::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_504_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyMuon::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_504_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_504_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyMuon::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_504_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyMuon::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_504_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyMuon::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_504_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyMuon::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyMuon", 613, G__eventdict_504_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyMuon), -1, 0, 1, 1, 1, 0, "u 'MyMuon' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyMuon", 739, G__eventdict_504_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_504_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyMuon), -1, 1, 1, 1, 1, 0, "u 'MyMuon' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyBaseJet(void) {
   /* MyBaseJet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyBaseJet));
   G__memfunc_setup("MyBaseJet",868,G__eventdict_505_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyBaseJet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__eventdict_505_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyBaseJet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_505_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyBaseJet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_505_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyBaseJet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_505_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyBaseJet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_505_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_505_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyBaseJet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_505_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyBaseJet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_505_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyBaseJet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_505_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyBaseJet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyBaseJet", 868, G__eventdict_505_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyBaseJet), -1, 0, 1, 1, 1, 0, "u 'MyBaseJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyBaseJet", 994, G__eventdict_505_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_505_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyBaseJet), -1, 1, 1, 1, 1, 0, "u 'MyBaseJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyJet(void) {
   /* MyJet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyJet));
   G__memfunc_setup("MyJet",489,G__eventdict_513_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyJet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_513_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__eventdict_513_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__eventdict_513_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyJet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_513_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyJet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_513_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyJet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_513_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyJet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_513_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_513_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyJet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_513_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyJet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_513_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyJet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_513_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyJet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyJet", 489, G__eventdict_513_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyJet), -1, 0, 1, 1, 1, 0, "u 'MyJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyJet", 615, G__eventdict_513_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_513_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyJet), -1, 1, 1, 1, 1, 0, "u 'MyJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyCaloJet(void) {
   /* MyCaloJet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyCaloJet));
   G__memfunc_setup("MyCaloJet",872,G__eventdict_514_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyCaloJet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__eventdict_514_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyCaloJet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_514_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCaloJet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_514_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyCaloJet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_514_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyCaloJet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_514_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_514_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCaloJet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_514_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCaloJet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_514_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCaloJet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_514_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCaloJet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyCaloJet", 872, G__eventdict_514_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyCaloJet), -1, 0, 1, 1, 1, 0, "u 'MyCaloJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyCaloJet", 998, G__eventdict_514_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_514_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyCaloJet), -1, 1, 1, 1, 1, 0, "u 'MyCaloJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyTrackJet(void) {
   /* MyTrackJet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyTrackJet));
   G__memfunc_setup("MyTrackJet",990,G__eventdict_515_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyTrackJet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__eventdict_515_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyTrackJet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_515_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyTrackJet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_515_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyTrackJet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_515_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyTrackJet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_515_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_515_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyTrackJet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_515_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyTrackJet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_515_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyTrackJet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_515_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyTrackJet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyTrackJet", 990, G__eventdict_515_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyTrackJet), -1, 0, 1, 1, 1, 0, "u 'MyTrackJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyTrackJet", 1116, G__eventdict_515_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_515_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyTrackJet), -1, 1, 1, 1, 1, 0, "u 'MyTrackJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyTrackscOallocatorlEMyTracksgRsPgR(void) {
   /* vector<MyTracks,allocator<MyTracks> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_517_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyTracks), G__defined_typename("vector<MyTracks,allocator<MyTracks> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyTracks,allocator<MyTracks> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_517_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyTracks), G__defined_typename("vector<MyTracks,allocator<MyTracks> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyTracks,allocator<MyTracks> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_517_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_517_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_517_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyTracks,allocator<MyTracks> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_517_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyTracks,allocator<MyTracks> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_517_0_7, 107, -1, G__defined_typename("vector<MyTracks,allocator<MyTracks> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_517_0_8, 107, -1, G__defined_typename("vector<MyTracks,allocator<MyTracks> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_517_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyTracks,allocator<MyTracks> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_517_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyTracks,allocator<MyTracks> >::size_type' 0 - sz u 'MyTracks' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_517_0_11, 107, -1, G__defined_typename("vector<MyTracks,allocator<MyTracks> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_517_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_517_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyTracks), G__defined_typename("vector<MyTracks,allocator<MyTracks> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyTracks,allocator<MyTracks> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_517_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyTracks), G__defined_typename("vector<MyTracks,allocator<MyTracks> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyTracks,allocator<MyTracks> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyTracks,allocator<MyTracks> >",3568,G__eventdict_517_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyTracks,allocator<MyTracks> >",3568,G__eventdict_517_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyTracks,allocator<MyTracks> >::size_type' 0 - n u 'MyTracks' - 11 'MyTracks()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyTracks,allocator<MyTracks> >",3568,G__eventdict_517_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyTracks,allocator<MyTracks> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyTracks,allocator<MyTracks> >",3568,G__eventdict_517_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyTracks,allocator<MyTracks> >::iterator' 'vector<MyTracks,allocator<MyTracks> >::const_iterator' 10 - first u 'vector<MyTracks,allocator<MyTracks> >::iterator' 'vector<MyTracks,allocator<MyTracks> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_517_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyTracks,allocator<MyTracks> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_517_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyTracks,allocator<MyTracks> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_517_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyTracks), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_517_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyTracks), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_517_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyTracks' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_517_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyTracks,allocator<MyTracks> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_517_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyTracks,allocator<MyTracks> >::iterator' - 0 - position u 'MyTracks' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_517_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyTracks,allocator<MyTracks> >::iterator' - 0 - position u 'vector<MyTracks,allocator<MyTracks> >::iterator' 'vector<MyTracks,allocator<MyTracks> >::const_iterator' 10 - first "
"u 'vector<MyTracks,allocator<MyTracks> >::iterator' 'vector<MyTracks,allocator<MyTracks> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_517_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyTracks,allocator<MyTracks> >::iterator' - 0 - position k - 'vector<MyTracks,allocator<MyTracks> >::size_type' 0 - n "
"u 'MyTracks' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_517_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_517_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyTracks,allocator<MyTracks> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_517_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyTracks,allocator<MyTracks> >::iterator' - 0 - first u 'vector<MyTracks,allocator<MyTracks> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_517_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyTracks,allocator<MyTracks> >", 3694, G__eventdict_517_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyPFJet(void) {
   /* MyPFJet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyPFJet));
   G__memfunc_setup("MyPFJet",639,G__eventdict_520_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyPFJet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__eventdict_520_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyPFJet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_520_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyPFJet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_520_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyPFJet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_520_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyPFJet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_520_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_520_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyPFJet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_520_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyPFJet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_520_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyPFJet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_520_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyPFJet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyPFJet", 639, G__eventdict_520_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyPFJet), -1, 0, 1, 1, 1, 0, "u 'MyPFJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyPFJet", 765, G__eventdict_520_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_520_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyPFJet), -1, 1, 1, 1, 1, 0, "u 'MyPFJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyPFCand(void) {
   /* MyPFCand */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyPFCand));
   G__memfunc_setup("MyPFCand",722,G__eventdict_521_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyPFCand), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__eventdict_521_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyPFCand::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_521_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyPFCand::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_521_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyPFCand::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_521_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyPFCand::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_521_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_521_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyPFCand::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_521_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyPFCand::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_521_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyPFCand::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_521_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyPFCand::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyPFCand", 722, G__eventdict_521_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyPFCand), -1, 0, 1, 1, 1, 0, "u 'MyPFCand' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyPFCand", 848, G__eventdict_521_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_521_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyPFCand), -1, 1, 1, 1, 1, 0, "u 'MyPFCand' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyCaloTower(void) {
   /* MyCaloTower */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyCaloTower));
   G__memfunc_setup("MyCaloTower",1110,G__eventdict_523_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyCaloTower), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__eventdict_523_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyCaloTower::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_523_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCaloTower::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_523_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyCaloTower::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_523_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyCaloTower::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_523_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_523_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCaloTower::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_523_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCaloTower::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_523_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyCaloTower::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_523_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyCaloTower::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyCaloTower", 1110, G__eventdict_523_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyCaloTower), -1, 0, 1, 1, 1, 0, "u 'MyCaloTower' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyCaloTower", 1236, G__eventdict_523_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_523_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyCaloTower), -1, 1, 1, 1, 1, 0, "u 'MyCaloTower' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyZDCHit(void) {
   /* MyZDCHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyZDCHit));
   G__memfunc_setup("MyZDCHit",716,G__eventdict_524_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyZDCHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_524_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_524_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_524_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyZDCHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_524_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyZDCHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_524_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyZDCHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_524_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyZDCHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_524_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_524_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyZDCHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_524_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyZDCHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_524_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyZDCHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_524_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyZDCHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyZDCHit", 716, G__eventdict_524_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyZDCHit), -1, 0, 1, 1, 1, 0, "u 'MyZDCHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyZDCHit", 842, G__eventdict_524_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_524_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyZDCHit), -1, 1, 1, 1, 1, 0, "u 'MyZDCHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyZDCDigi(void) {
   /* MyZDCDigi */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyZDCDigi));
   G__memfunc_setup("MyZDCDigi",804,G__eventdict_525_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyZDCDigi), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_525_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_525_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_525_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyZDCDigi::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_525_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyZDCDigi::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_525_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyZDCDigi::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_525_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyZDCDigi::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_525_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_525_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyZDCDigi::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_525_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyZDCDigi::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_525_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyZDCDigi::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_525_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyZDCDigi::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyZDCDigi", 804, G__eventdict_525_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyZDCDigi), -1, 0, 1, 1, 1, 0, "u 'MyZDCDigi' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyZDCDigi", 930, G__eventdict_525_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_525_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyZDCDigi), -1, 1, 1, 1, 1, 0, "u 'MyZDCDigi' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyZDCInfo(void) {
   /* MyZDCInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyZDCInfo));
   G__memfunc_setup("MyZDCInfo",819,G__eventdict_526_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyZDCInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_526_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_526_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_526_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyZDCInfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_526_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyZDCInfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_526_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyZDCInfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_526_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyZDCInfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_526_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_526_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyZDCInfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_526_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyZDCInfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_526_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyZDCInfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_526_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyZDCInfo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyZDCInfo", 819, G__eventdict_526_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyZDCInfo), -1, 0, 1, 1, 1, 0, "u 'MyZDCInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyZDCInfo", 945, G__eventdict_526_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_526_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyZDCInfo), -1, 1, 1, 1, 1, 0, "u 'MyZDCInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyFSCHit(void) {
   /* MyFSCHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyFSCHit));
   G__memfunc_setup("MyFSCHit",711,G__eventdict_534_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyFSCHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_534_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_534_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_534_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyFSCHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_534_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyFSCHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_534_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyFSCHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_534_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyFSCHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_534_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_534_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyFSCHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_534_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyFSCHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_534_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyFSCHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_534_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyFSCHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyFSCHit", 711, G__eventdict_534_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyFSCHit), -1, 0, 1, 1, 1, 0, "u 'MyFSCHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyFSCHit", 837, G__eventdict_534_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_534_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyFSCHit), -1, 1, 1, 1, 1, 0, "u 'MyFSCHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyFSCDigi(void) {
   /* MyFSCDigi */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyFSCDigi));
   G__memfunc_setup("MyFSCDigi",799,G__eventdict_535_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyFSCDigi), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_535_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_535_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_535_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyFSCDigi::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_535_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyFSCDigi::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_535_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyFSCDigi::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_535_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyFSCDigi::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_535_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_535_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyFSCDigi::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_535_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyFSCDigi::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_535_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyFSCDigi::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_535_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyFSCDigi::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyFSCDigi", 799, G__eventdict_535_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyFSCDigi), -1, 0, 1, 1, 1, 0, "u 'MyFSCDigi' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyFSCDigi", 925, G__eventdict_535_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_535_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyFSCDigi), -1, 1, 1, 1, 1, 0, "u 'MyFSCDigi' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyFSCInfo(void) {
   /* MyFSCInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyFSCInfo));
   G__memfunc_setup("MyFSCInfo",814,G__eventdict_536_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyFSCInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_536_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__eventdict_536_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_536_0_4, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MyFSCInfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_536_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyFSCInfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_536_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MyFSCInfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_536_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MyFSCInfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_536_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_536_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyFSCInfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_536_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyFSCInfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_536_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MyFSCInfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_536_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MyFSCInfo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MyFSCInfo", 814, G__eventdict_536_0_16, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyFSCInfo), -1, 0, 1, 1, 1, 0, "u 'MyFSCInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyFSCInfo", 940, G__eventdict_536_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_536_0_18, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyFSCInfo), -1, 1, 1, 1, 1, 0, "u 'MyFSCInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR(void) {
   /* vector<MyBeamSpot,allocator<MyBeamSpot> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_538_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot), G__defined_typename("vector<MyBeamSpot,allocator<MyBeamSpot> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyBeamSpot,allocator<MyBeamSpot> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_538_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot), G__defined_typename("vector<MyBeamSpot,allocator<MyBeamSpot> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyBeamSpot,allocator<MyBeamSpot> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_538_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_538_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_538_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyBeamSpot,allocator<MyBeamSpot> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_538_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyBeamSpot,allocator<MyBeamSpot> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_538_0_7, 107, -1, G__defined_typename("vector<MyBeamSpot,allocator<MyBeamSpot> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_538_0_8, 107, -1, G__defined_typename("vector<MyBeamSpot,allocator<MyBeamSpot> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_538_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyBeamSpot,allocator<MyBeamSpot> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_538_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyBeamSpot,allocator<MyBeamSpot> >::size_type' 0 - sz u 'MyBeamSpot' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_538_0_11, 107, -1, G__defined_typename("vector<MyBeamSpot,allocator<MyBeamSpot> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_538_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_538_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot), G__defined_typename("vector<MyBeamSpot,allocator<MyBeamSpot> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyBeamSpot,allocator<MyBeamSpot> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_538_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot), G__defined_typename("vector<MyBeamSpot,allocator<MyBeamSpot> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyBeamSpot,allocator<MyBeamSpot> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyBeamSpot,allocator<MyBeamSpot> >",3926,G__eventdict_538_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyBeamSpot,allocator<MyBeamSpot> >",3926,G__eventdict_538_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyBeamSpot,allocator<MyBeamSpot> >::size_type' 0 - n u 'MyBeamSpot' - 11 'MyBeamSpot()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyBeamSpot,allocator<MyBeamSpot> >",3926,G__eventdict_538_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyBeamSpot,allocator<MyBeamSpot> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyBeamSpot,allocator<MyBeamSpot> >",3926,G__eventdict_538_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator' 'vector<MyBeamSpot,allocator<MyBeamSpot> >::const_iterator' 10 - first u 'vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator' 'vector<MyBeamSpot,allocator<MyBeamSpot> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_538_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyBeamSpot,allocator<MyBeamSpot> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_538_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyBeamSpot,allocator<MyBeamSpot> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_538_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_538_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_538_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyBeamSpot' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_538_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyBeamSpot,allocator<MyBeamSpot> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_538_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator' - 0 - position u 'MyBeamSpot' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_538_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator' - 0 - position u 'vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator' 'vector<MyBeamSpot,allocator<MyBeamSpot> >::const_iterator' 10 - first "
"u 'vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator' 'vector<MyBeamSpot,allocator<MyBeamSpot> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_538_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator' - 0 - position k - 'vector<MyBeamSpot,allocator<MyBeamSpot> >::size_type' 0 - n "
"u 'MyBeamSpot' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_538_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_538_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_538_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator' - 0 - first u 'vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_538_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyBeamSpot,allocator<MyBeamSpot> >", 4052, G__eventdict_538_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR(void) {
   /* vector<MyCastorDigi,allocator<MyCastorDigi> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR));
   G__memfunc_setup("at",213,G__eventdict_542_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi), G__defined_typename("vector<MyCastorDigi,allocator<MyCastorDigi> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_542_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi), G__defined_typename("vector<MyCastorDigi,allocator<MyCastorDigi> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_542_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_542_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_542_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiteratorgR), G__defined_typename("vector<MyCastorDigi,allocator<MyCastorDigi> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_542_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiteratorgR), G__defined_typename("vector<MyCastorDigi,allocator<MyCastorDigi> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_542_0_7, 107, -1, G__defined_typename("vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_542_0_8, 107, -1, G__defined_typename("vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_542_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_542_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type' 0 - sz u 'MyCastorDigi' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_542_0_11, 107, -1, G__defined_typename("vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_542_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_542_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi), G__defined_typename("vector<MyCastorDigi,allocator<MyCastorDigi> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_542_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi), G__defined_typename("vector<MyCastorDigi,allocator<MyCastorDigi> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorDigi,allocator<MyCastorDigi> >",4338,G__eventdict_542_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorDigi,allocator<MyCastorDigi> >",4338,G__eventdict_542_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type' 0 - n u 'MyCastorDigi' - 11 'MyCastorDigi()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorDigi,allocator<MyCastorDigi> >",4338,G__eventdict_542_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyCastorDigi,allocator<MyCastorDigi> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorDigi,allocator<MyCastorDigi> >",4338,G__eventdict_542_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator' 'vector<MyCastorDigi,allocator<MyCastorDigi> >::const_iterator' 10 - first u 'vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator' 'vector<MyCastorDigi,allocator<MyCastorDigi> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_542_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyCastorDigi,allocator<MyCastorDigi> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_542_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_542_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_542_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorDigi), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_542_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyCastorDigi' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_542_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyCastorDigi,allocator<MyCastorDigi> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_542_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator' - 0 - position u 'MyCastorDigi' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_542_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator' - 0 - position u 'vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator' 'vector<MyCastorDigi,allocator<MyCastorDigi> >::const_iterator' 10 - first "
"u 'vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator' 'vector<MyCastorDigi,allocator<MyCastorDigi> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_542_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator' - 0 - position k - 'vector<MyCastorDigi,allocator<MyCastorDigi> >::size_type' 0 - n "
"u 'MyCastorDigi' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_542_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_542_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_542_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator' - 0 - first u 'vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_542_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyCastorDigi,allocator<MyCastorDigi> >", 4464, G__eventdict_542_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR(void) {
   /* vector<MyCastorJet,allocator<MyCastorJet> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_546_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorJet), G__defined_typename("vector<MyCastorJet,allocator<MyCastorJet> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyCastorJet,allocator<MyCastorJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_546_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorJet), G__defined_typename("vector<MyCastorJet,allocator<MyCastorJet> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyCastorJet,allocator<MyCastorJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_546_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_546_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_546_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyCastorJet,allocator<MyCastorJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_546_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyCastorJet,allocator<MyCastorJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_546_0_7, 107, -1, G__defined_typename("vector<MyCastorJet,allocator<MyCastorJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_546_0_8, 107, -1, G__defined_typename("vector<MyCastorJet,allocator<MyCastorJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_546_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyCastorJet,allocator<MyCastorJet> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_546_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyCastorJet,allocator<MyCastorJet> >::size_type' 0 - sz u 'MyCastorJet' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_546_0_11, 107, -1, G__defined_typename("vector<MyCastorJet,allocator<MyCastorJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_546_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_546_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorJet), G__defined_typename("vector<MyCastorJet,allocator<MyCastorJet> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyCastorJet,allocator<MyCastorJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_546_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorJet), G__defined_typename("vector<MyCastorJet,allocator<MyCastorJet> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyCastorJet,allocator<MyCastorJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorJet,allocator<MyCastorJet> >",4158,G__eventdict_546_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorJet,allocator<MyCastorJet> >",4158,G__eventdict_546_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyCastorJet,allocator<MyCastorJet> >::size_type' 0 - n u 'MyCastorJet' - 11 'MyCastorJet()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorJet,allocator<MyCastorJet> >",4158,G__eventdict_546_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyCastorJet,allocator<MyCastorJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorJet,allocator<MyCastorJet> >",4158,G__eventdict_546_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCastorJet,allocator<MyCastorJet> >::iterator' 'vector<MyCastorJet,allocator<MyCastorJet> >::const_iterator' 10 - first u 'vector<MyCastorJet,allocator<MyCastorJet> >::iterator' 'vector<MyCastorJet,allocator<MyCastorJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_546_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyCastorJet,allocator<MyCastorJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_546_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyCastorJet,allocator<MyCastorJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_546_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_546_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_546_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyCastorJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_546_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyCastorJet,allocator<MyCastorJet> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_546_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCastorJet,allocator<MyCastorJet> >::iterator' - 0 - position u 'MyCastorJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_546_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyCastorJet,allocator<MyCastorJet> >::iterator' - 0 - position u 'vector<MyCastorJet,allocator<MyCastorJet> >::iterator' 'vector<MyCastorJet,allocator<MyCastorJet> >::const_iterator' 10 - first "
"u 'vector<MyCastorJet,allocator<MyCastorJet> >::iterator' 'vector<MyCastorJet,allocator<MyCastorJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_546_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyCastorJet,allocator<MyCastorJet> >::iterator' - 0 - position k - 'vector<MyCastorJet,allocator<MyCastorJet> >::size_type' 0 - n "
"u 'MyCastorJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_546_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_546_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyCastorJet,allocator<MyCastorJet> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_546_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCastorJet,allocator<MyCastorJet> >::iterator' - 0 - first u 'vector<MyCastorJet,allocator<MyCastorJet> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_546_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyCastorJet,allocator<MyCastorJet> >", 4284, G__eventdict_546_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR(void) {
   /* vector<MyCastorRecHit,allocator<MyCastorRecHit> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_550_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit), G__defined_typename("vector<MyCastorRecHit,allocator<MyCastorRecHit> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_550_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit), G__defined_typename("vector<MyCastorRecHit,allocator<MyCastorRecHit> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_550_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_550_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_550_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyCastorRecHit,allocator<MyCastorRecHit> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_550_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyCastorRecHit,allocator<MyCastorRecHit> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_550_0_7, 107, -1, G__defined_typename("vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_550_0_8, 107, -1, G__defined_typename("vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_550_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_550_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type' 0 - sz u 'MyCastorRecHit' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_550_0_11, 107, -1, G__defined_typename("vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_550_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_550_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit), G__defined_typename("vector<MyCastorRecHit,allocator<MyCastorRecHit> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_550_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit), G__defined_typename("vector<MyCastorRecHit,allocator<MyCastorRecHit> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorRecHit,allocator<MyCastorRecHit> >",4726,G__eventdict_550_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorRecHit,allocator<MyCastorRecHit> >",4726,G__eventdict_550_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type' 0 - n u 'MyCastorRecHit' - 11 'MyCastorRecHit()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorRecHit,allocator<MyCastorRecHit> >",4726,G__eventdict_550_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCastorRecHit,allocator<MyCastorRecHit> >",4726,G__eventdict_550_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator' 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::const_iterator' 10 - first u 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator' 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_550_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_550_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_550_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_550_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyCastorRecHit), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_550_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyCastorRecHit' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_550_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_550_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator' - 0 - position u 'MyCastorRecHit' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_550_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator' - 0 - position u 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator' 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::const_iterator' 10 - first "
"u 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator' 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_550_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator' - 0 - position k - 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::size_type' 0 - n "
"u 'MyCastorRecHit' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_550_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_550_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_550_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator' - 0 - first u 'vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_550_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyCastorRecHit,allocator<MyCastorRecHit> >", 4852, G__eventdict_550_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR(void) {
   /* vector<MyDiJet,allocator<MyDiJet> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_554_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyDiJet), G__defined_typename("vector<MyDiJet,allocator<MyDiJet> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyDiJet,allocator<MyDiJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_554_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyDiJet), G__defined_typename("vector<MyDiJet,allocator<MyDiJet> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyDiJet,allocator<MyDiJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_554_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_554_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_554_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyDiJetcOallocatorlEMyDiJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyDiJet,allocator<MyDiJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_554_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyDiJetcOallocatorlEMyDiJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyDiJet,allocator<MyDiJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_554_0_7, 107, -1, G__defined_typename("vector<MyDiJet,allocator<MyDiJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_554_0_8, 107, -1, G__defined_typename("vector<MyDiJet,allocator<MyDiJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_554_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyDiJet,allocator<MyDiJet> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_554_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyDiJet,allocator<MyDiJet> >::size_type' 0 - sz u 'MyDiJet' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_554_0_11, 107, -1, G__defined_typename("vector<MyDiJet,allocator<MyDiJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_554_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_554_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyDiJet), G__defined_typename("vector<MyDiJet,allocator<MyDiJet> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyDiJet,allocator<MyDiJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_554_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyDiJet), G__defined_typename("vector<MyDiJet,allocator<MyDiJet> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyDiJet,allocator<MyDiJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyDiJet,allocator<MyDiJet> >",3264,G__eventdict_554_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyDiJet,allocator<MyDiJet> >",3264,G__eventdict_554_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyDiJet,allocator<MyDiJet> >::size_type' 0 - n u 'MyDiJet' - 11 'MyDiJet()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyDiJet,allocator<MyDiJet> >",3264,G__eventdict_554_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyDiJet,allocator<MyDiJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyDiJet,allocator<MyDiJet> >",3264,G__eventdict_554_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyDiJet,allocator<MyDiJet> >::iterator' 'vector<MyDiJet,allocator<MyDiJet> >::const_iterator' 10 - first u 'vector<MyDiJet,allocator<MyDiJet> >::iterator' 'vector<MyDiJet,allocator<MyDiJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_554_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyDiJet,allocator<MyDiJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_554_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyDiJet,allocator<MyDiJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_554_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyDiJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_554_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyDiJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_554_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyDiJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_554_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyDiJet,allocator<MyDiJet> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_554_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyDiJet,allocator<MyDiJet> >::iterator' - 0 - position u 'MyDiJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_554_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyDiJet,allocator<MyDiJet> >::iterator' - 0 - position u 'vector<MyDiJet,allocator<MyDiJet> >::iterator' 'vector<MyDiJet,allocator<MyDiJet> >::const_iterator' 10 - first "
"u 'vector<MyDiJet,allocator<MyDiJet> >::iterator' 'vector<MyDiJet,allocator<MyDiJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_554_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyDiJet,allocator<MyDiJet> >::iterator' - 0 - position k - 'vector<MyDiJet,allocator<MyDiJet> >::size_type' 0 - n "
"u 'MyDiJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_554_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_554_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyDiJet,allocator<MyDiJet> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_554_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyDiJet,allocator<MyDiJet> >::iterator' - 0 - first u 'vector<MyDiJet,allocator<MyDiJet> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_554_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyDiJet,allocator<MyDiJet> >", 3390, G__eventdict_554_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR(void) {
   /* vector<MyEvtId,allocator<MyEvtId> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_558_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyEvtId), G__defined_typename("vector<MyEvtId,allocator<MyEvtId> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyEvtId,allocator<MyEvtId> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_558_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyEvtId), G__defined_typename("vector<MyEvtId,allocator<MyEvtId> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyEvtId,allocator<MyEvtId> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_558_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_558_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_558_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyEvtId,allocator<MyEvtId> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_558_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyEvtId,allocator<MyEvtId> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_558_0_7, 107, -1, G__defined_typename("vector<MyEvtId,allocator<MyEvtId> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_558_0_8, 107, -1, G__defined_typename("vector<MyEvtId,allocator<MyEvtId> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_558_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyEvtId,allocator<MyEvtId> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_558_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyEvtId,allocator<MyEvtId> >::size_type' 0 - sz u 'MyEvtId' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_558_0_11, 107, -1, G__defined_typename("vector<MyEvtId,allocator<MyEvtId> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_558_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_558_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyEvtId), G__defined_typename("vector<MyEvtId,allocator<MyEvtId> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyEvtId,allocator<MyEvtId> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_558_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyEvtId), G__defined_typename("vector<MyEvtId,allocator<MyEvtId> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyEvtId,allocator<MyEvtId> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyEvtId,allocator<MyEvtId> >",3288,G__eventdict_558_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyEvtId,allocator<MyEvtId> >",3288,G__eventdict_558_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyEvtId,allocator<MyEvtId> >::size_type' 0 - n u 'MyEvtId' - 11 'MyEvtId()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyEvtId,allocator<MyEvtId> >",3288,G__eventdict_558_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyEvtId,allocator<MyEvtId> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyEvtId,allocator<MyEvtId> >",3288,G__eventdict_558_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyEvtId,allocator<MyEvtId> >::iterator' 'vector<MyEvtId,allocator<MyEvtId> >::const_iterator' 10 - first u 'vector<MyEvtId,allocator<MyEvtId> >::iterator' 'vector<MyEvtId,allocator<MyEvtId> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_558_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyEvtId,allocator<MyEvtId> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_558_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyEvtId,allocator<MyEvtId> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_558_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyEvtId), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_558_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyEvtId), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_558_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyEvtId' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_558_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyEvtId,allocator<MyEvtId> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_558_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyEvtId,allocator<MyEvtId> >::iterator' - 0 - position u 'MyEvtId' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_558_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyEvtId,allocator<MyEvtId> >::iterator' - 0 - position u 'vector<MyEvtId,allocator<MyEvtId> >::iterator' 'vector<MyEvtId,allocator<MyEvtId> >::const_iterator' 10 - first "
"u 'vector<MyEvtId,allocator<MyEvtId> >::iterator' 'vector<MyEvtId,allocator<MyEvtId> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_558_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyEvtId,allocator<MyEvtId> >::iterator' - 0 - position k - 'vector<MyEvtId,allocator<MyEvtId> >::size_type' 0 - n "
"u 'MyEvtId' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_558_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_558_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyEvtId,allocator<MyEvtId> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_558_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyEvtId,allocator<MyEvtId> >::iterator' - 0 - first u 'vector<MyEvtId,allocator<MyEvtId> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_558_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyEvtId,allocator<MyEvtId> >", 3414, G__eventdict_558_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR(void) {
   /* vector<MyFwdGap,allocator<MyFwdGap> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_562_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyFwdGap), G__defined_typename("vector<MyFwdGap,allocator<MyFwdGap> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyFwdGap,allocator<MyFwdGap> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_562_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyFwdGap), G__defined_typename("vector<MyFwdGap,allocator<MyFwdGap> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyFwdGap,allocator<MyFwdGap> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_562_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_562_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_562_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyFwdGap,allocator<MyFwdGap> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_562_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyFwdGap,allocator<MyFwdGap> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_562_0_7, 107, -1, G__defined_typename("vector<MyFwdGap,allocator<MyFwdGap> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_562_0_8, 107, -1, G__defined_typename("vector<MyFwdGap,allocator<MyFwdGap> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_562_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyFwdGap,allocator<MyFwdGap> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_562_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyFwdGap,allocator<MyFwdGap> >::size_type' 0 - sz u 'MyFwdGap' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_562_0_11, 107, -1, G__defined_typename("vector<MyFwdGap,allocator<MyFwdGap> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_562_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_562_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyFwdGap), G__defined_typename("vector<MyFwdGap,allocator<MyFwdGap> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyFwdGap,allocator<MyFwdGap> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_562_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyFwdGap), G__defined_typename("vector<MyFwdGap,allocator<MyFwdGap> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyFwdGap,allocator<MyFwdGap> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyFwdGap,allocator<MyFwdGap> >",3474,G__eventdict_562_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyFwdGap,allocator<MyFwdGap> >",3474,G__eventdict_562_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyFwdGap,allocator<MyFwdGap> >::size_type' 0 - n u 'MyFwdGap' - 11 'MyFwdGap()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyFwdGap,allocator<MyFwdGap> >",3474,G__eventdict_562_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyFwdGap,allocator<MyFwdGap> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyFwdGap,allocator<MyFwdGap> >",3474,G__eventdict_562_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyFwdGap,allocator<MyFwdGap> >::iterator' 'vector<MyFwdGap,allocator<MyFwdGap> >::const_iterator' 10 - first u 'vector<MyFwdGap,allocator<MyFwdGap> >::iterator' 'vector<MyFwdGap,allocator<MyFwdGap> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_562_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyFwdGap,allocator<MyFwdGap> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_562_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyFwdGap,allocator<MyFwdGap> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_562_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyFwdGap), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_562_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyFwdGap), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_562_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyFwdGap' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_562_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyFwdGap,allocator<MyFwdGap> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_562_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyFwdGap,allocator<MyFwdGap> >::iterator' - 0 - position u 'MyFwdGap' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_562_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyFwdGap,allocator<MyFwdGap> >::iterator' - 0 - position u 'vector<MyFwdGap,allocator<MyFwdGap> >::iterator' 'vector<MyFwdGap,allocator<MyFwdGap> >::const_iterator' 10 - first "
"u 'vector<MyFwdGap,allocator<MyFwdGap> >::iterator' 'vector<MyFwdGap,allocator<MyFwdGap> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_562_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyFwdGap,allocator<MyFwdGap> >::iterator' - 0 - position k - 'vector<MyFwdGap,allocator<MyFwdGap> >::size_type' 0 - n "
"u 'MyFwdGap' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_562_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_562_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyFwdGap,allocator<MyFwdGap> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_562_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyFwdGap,allocator<MyFwdGap> >::iterator' - 0 - first u 'vector<MyFwdGap,allocator<MyFwdGap> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_562_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyFwdGap,allocator<MyFwdGap> >", 3600, G__eventdict_562_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyGenKincOallocatorlEMyGenKingRsPgR(void) {
   /* vector<MyGenKin,allocator<MyGenKin> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR));
   G__memfunc_setup("at",213,G__eventdict_566_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenKin), G__defined_typename("vector<MyGenKin,allocator<MyGenKin> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyGenKin,allocator<MyGenKin> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_566_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenKin), G__defined_typename("vector<MyGenKin,allocator<MyGenKin> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyGenKin,allocator<MyGenKin> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_566_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_566_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_566_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenKincOallocatorlEMyGenKingRsPgRcLcLiteratorgR), G__defined_typename("vector<MyGenKin,allocator<MyGenKin> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_566_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenKincOallocatorlEMyGenKingRsPgRcLcLiteratorgR), G__defined_typename("vector<MyGenKin,allocator<MyGenKin> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_566_0_7, 107, -1, G__defined_typename("vector<MyGenKin,allocator<MyGenKin> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_566_0_8, 107, -1, G__defined_typename("vector<MyGenKin,allocator<MyGenKin> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_566_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyGenKin,allocator<MyGenKin> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_566_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyGenKin,allocator<MyGenKin> >::size_type' 0 - sz u 'MyGenKin' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_566_0_11, 107, -1, G__defined_typename("vector<MyGenKin,allocator<MyGenKin> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_566_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_566_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenKin), G__defined_typename("vector<MyGenKin,allocator<MyGenKin> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyGenKin,allocator<MyGenKin> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_566_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenKin), G__defined_typename("vector<MyGenKin,allocator<MyGenKin> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyGenKin,allocator<MyGenKin> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenKin,allocator<MyGenKin> >",3480,G__eventdict_566_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenKin,allocator<MyGenKin> >",3480,G__eventdict_566_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyGenKin,allocator<MyGenKin> >::size_type' 0 - n u 'MyGenKin' - 11 'MyGenKin()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenKin,allocator<MyGenKin> >",3480,G__eventdict_566_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyGenKin,allocator<MyGenKin> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenKin,allocator<MyGenKin> >",3480,G__eventdict_566_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenKin,allocator<MyGenKin> >::iterator' 'vector<MyGenKin,allocator<MyGenKin> >::const_iterator' 10 - first u 'vector<MyGenKin,allocator<MyGenKin> >::iterator' 'vector<MyGenKin,allocator<MyGenKin> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_566_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyGenKin,allocator<MyGenKin> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_566_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyGenKin,allocator<MyGenKin> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_566_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenKin), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_566_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenKin), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_566_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyGenKin' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_566_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyGenKin,allocator<MyGenKin> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_566_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenKin,allocator<MyGenKin> >::iterator' - 0 - position u 'MyGenKin' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_566_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyGenKin,allocator<MyGenKin> >::iterator' - 0 - position u 'vector<MyGenKin,allocator<MyGenKin> >::iterator' 'vector<MyGenKin,allocator<MyGenKin> >::const_iterator' 10 - first "
"u 'vector<MyGenKin,allocator<MyGenKin> >::iterator' 'vector<MyGenKin,allocator<MyGenKin> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_566_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyGenKin,allocator<MyGenKin> >::iterator' - 0 - position k - 'vector<MyGenKin,allocator<MyGenKin> >::size_type' 0 - n "
"u 'MyGenKin' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_566_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_566_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyGenKin,allocator<MyGenKin> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_566_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenKin,allocator<MyGenKin> >::iterator' - 0 - first u 'vector<MyGenKin,allocator<MyGenKin> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_566_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyGenKin,allocator<MyGenKin> >", 3606, G__eventdict_566_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR(void) {
   /* vector<MyPUSumInfo,allocator<MyPUSumInfo> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR));
   G__memfunc_setup("at",213,G__eventdict_570_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyPUSumInfo), G__defined_typename("vector<MyPUSumInfo,allocator<MyPUSumInfo> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyPUSumInfo,allocator<MyPUSumInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_570_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyPUSumInfo), G__defined_typename("vector<MyPUSumInfo,allocator<MyPUSumInfo> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyPUSumInfo,allocator<MyPUSumInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_570_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_570_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_570_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgRcLcLiteratorgR), G__defined_typename("vector<MyPUSumInfo,allocator<MyPUSumInfo> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_570_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgRcLcLiteratorgR), G__defined_typename("vector<MyPUSumInfo,allocator<MyPUSumInfo> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_570_0_7, 107, -1, G__defined_typename("vector<MyPUSumInfo,allocator<MyPUSumInfo> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_570_0_8, 107, -1, G__defined_typename("vector<MyPUSumInfo,allocator<MyPUSumInfo> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_570_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyPUSumInfo,allocator<MyPUSumInfo> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_570_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyPUSumInfo,allocator<MyPUSumInfo> >::size_type' 0 - sz u 'MyPUSumInfo' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_570_0_11, 107, -1, G__defined_typename("vector<MyPUSumInfo,allocator<MyPUSumInfo> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_570_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_570_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyPUSumInfo), G__defined_typename("vector<MyPUSumInfo,allocator<MyPUSumInfo> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyPUSumInfo,allocator<MyPUSumInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_570_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyPUSumInfo), G__defined_typename("vector<MyPUSumInfo,allocator<MyPUSumInfo> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyPUSumInfo,allocator<MyPUSumInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyPUSumInfo,allocator<MyPUSumInfo> >",4076,G__eventdict_570_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyPUSumInfo,allocator<MyPUSumInfo> >",4076,G__eventdict_570_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyPUSumInfo,allocator<MyPUSumInfo> >::size_type' 0 - n u 'MyPUSumInfo' - 11 'MyPUSumInfo()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyPUSumInfo,allocator<MyPUSumInfo> >",4076,G__eventdict_570_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyPUSumInfo,allocator<MyPUSumInfo> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyPUSumInfo,allocator<MyPUSumInfo> >",4076,G__eventdict_570_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator' 'vector<MyPUSumInfo,allocator<MyPUSumInfo> >::const_iterator' 10 - first u 'vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator' 'vector<MyPUSumInfo,allocator<MyPUSumInfo> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_570_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyPUSumInfo,allocator<MyPUSumInfo> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_570_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyPUSumInfo,allocator<MyPUSumInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_570_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyPUSumInfo), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_570_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyPUSumInfo), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_570_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyPUSumInfo' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_570_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyPUSumInfo,allocator<MyPUSumInfo> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_570_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator' - 0 - position u 'MyPUSumInfo' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_570_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator' - 0 - position u 'vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator' 'vector<MyPUSumInfo,allocator<MyPUSumInfo> >::const_iterator' 10 - first "
"u 'vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator' 'vector<MyPUSumInfo,allocator<MyPUSumInfo> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_570_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator' - 0 - position k - 'vector<MyPUSumInfo,allocator<MyPUSumInfo> >::size_type' 0 - n "
"u 'MyPUSumInfo' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_570_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_570_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_570_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator' - 0 - first u 'vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_570_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyPUSumInfo,allocator<MyPUSumInfo> >", 4202, G__eventdict_570_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyMetcOallocatorlEMyMetgRsPgR(void) {
   /* vector<MyMet,allocator<MyMet> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_574_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyMet), G__defined_typename("vector<MyMet,allocator<MyMet> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyMet,allocator<MyMet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_574_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyMet), G__defined_typename("vector<MyMet,allocator<MyMet> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyMet,allocator<MyMet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_574_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_574_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_574_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMetcOallocatorlEMyMetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyMet,allocator<MyMet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_574_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMetcOallocatorlEMyMetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyMet,allocator<MyMet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_574_0_7, 107, -1, G__defined_typename("vector<MyMet,allocator<MyMet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_574_0_8, 107, -1, G__defined_typename("vector<MyMet,allocator<MyMet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_574_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyMet,allocator<MyMet> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_574_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyMet,allocator<MyMet> >::size_type' 0 - sz u 'MyMet' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_574_0_11, 107, -1, G__defined_typename("vector<MyMet,allocator<MyMet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_574_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_574_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyMet), G__defined_typename("vector<MyMet,allocator<MyMet> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyMet,allocator<MyMet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_574_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyMet), G__defined_typename("vector<MyMet,allocator<MyMet> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyMet,allocator<MyMet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMet,allocator<MyMet> >",2924,G__eventdict_574_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMet,allocator<MyMet> >",2924,G__eventdict_574_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyMet,allocator<MyMet> >::size_type' 0 - n u 'MyMet' - 11 'MyMet()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMet,allocator<MyMet> >",2924,G__eventdict_574_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyMet,allocator<MyMet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMet,allocator<MyMet> >",2924,G__eventdict_574_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyMet,allocator<MyMet> >::iterator' 'vector<MyMet,allocator<MyMet> >::const_iterator' 10 - first u 'vector<MyMet,allocator<MyMet> >::iterator' 'vector<MyMet,allocator<MyMet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_574_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyMet,allocator<MyMet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_574_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyMet,allocator<MyMet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_574_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyMet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_574_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyMet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_574_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyMet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_574_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyMet,allocator<MyMet> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_574_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyMet,allocator<MyMet> >::iterator' - 0 - position u 'MyMet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_574_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyMet,allocator<MyMet> >::iterator' - 0 - position u 'vector<MyMet,allocator<MyMet> >::iterator' 'vector<MyMet,allocator<MyMet> >::const_iterator' 10 - first "
"u 'vector<MyMet,allocator<MyMet> >::iterator' 'vector<MyMet,allocator<MyMet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_574_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyMet,allocator<MyMet> >::iterator' - 0 - position k - 'vector<MyMet,allocator<MyMet> >::size_type' 0 - n "
"u 'MyMet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_574_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_574_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyMet,allocator<MyMet> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_574_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyMet,allocator<MyMet> >::iterator' - 0 - first u 'vector<MyMet,allocator<MyMet> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_574_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyMet,allocator<MyMet> >", 3050, G__eventdict_574_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR(void) {
   /* vector<MyGenMet,allocator<MyGenMet> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_578_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenMet), G__defined_typename("vector<MyGenMet,allocator<MyGenMet> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyGenMet,allocator<MyGenMet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_578_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenMet), G__defined_typename("vector<MyGenMet,allocator<MyGenMet> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyGenMet,allocator<MyGenMet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_578_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_578_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_578_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenMetcOallocatorlEMyGenMetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyGenMet,allocator<MyGenMet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_578_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenMetcOallocatorlEMyGenMetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyGenMet,allocator<MyGenMet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_578_0_7, 107, -1, G__defined_typename("vector<MyGenMet,allocator<MyGenMet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_578_0_8, 107, -1, G__defined_typename("vector<MyGenMet,allocator<MyGenMet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_578_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyGenMet,allocator<MyGenMet> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_578_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyGenMet,allocator<MyGenMet> >::size_type' 0 - sz u 'MyGenMet' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_578_0_11, 107, -1, G__defined_typename("vector<MyGenMet,allocator<MyGenMet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_578_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_578_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenMet), G__defined_typename("vector<MyGenMet,allocator<MyGenMet> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyGenMet,allocator<MyGenMet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_578_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenMet), G__defined_typename("vector<MyGenMet,allocator<MyGenMet> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyGenMet,allocator<MyGenMet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenMet,allocator<MyGenMet> >",3488,G__eventdict_578_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenMet,allocator<MyGenMet> >",3488,G__eventdict_578_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyGenMet,allocator<MyGenMet> >::size_type' 0 - n u 'MyGenMet' - 11 'MyGenMet()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenMet,allocator<MyGenMet> >",3488,G__eventdict_578_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyGenMet,allocator<MyGenMet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenMet,allocator<MyGenMet> >",3488,G__eventdict_578_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenMet,allocator<MyGenMet> >::iterator' 'vector<MyGenMet,allocator<MyGenMet> >::const_iterator' 10 - first u 'vector<MyGenMet,allocator<MyGenMet> >::iterator' 'vector<MyGenMet,allocator<MyGenMet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_578_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyGenMet,allocator<MyGenMet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_578_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyGenMet,allocator<MyGenMet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_578_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenMet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_578_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenMet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_578_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyGenMet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_578_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyGenMet,allocator<MyGenMet> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_578_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenMet,allocator<MyGenMet> >::iterator' - 0 - position u 'MyGenMet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_578_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyGenMet,allocator<MyGenMet> >::iterator' - 0 - position u 'vector<MyGenMet,allocator<MyGenMet> >::iterator' 'vector<MyGenMet,allocator<MyGenMet> >::const_iterator' 10 - first "
"u 'vector<MyGenMet,allocator<MyGenMet> >::iterator' 'vector<MyGenMet,allocator<MyGenMet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_578_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyGenMet,allocator<MyGenMet> >::iterator' - 0 - position k - 'vector<MyGenMet,allocator<MyGenMet> >::size_type' 0 - n "
"u 'MyGenMet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_578_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_578_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyGenMet,allocator<MyGenMet> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_578_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenMet,allocator<MyGenMet> >::iterator' - 0 - first u 'vector<MyGenMet,allocator<MyGenMet> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_578_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyGenMet,allocator<MyGenMet> >", 3614, G__eventdict_578_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR(void) {
   /* vector<MyGenJet,allocator<MyGenJet> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_582_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenJet), G__defined_typename("vector<MyGenJet,allocator<MyGenJet> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyGenJet,allocator<MyGenJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_582_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenJet), G__defined_typename("vector<MyGenJet,allocator<MyGenJet> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyGenJet,allocator<MyGenJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_582_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_582_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_582_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyGenJet,allocator<MyGenJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_582_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyGenJet,allocator<MyGenJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_582_0_7, 107, -1, G__defined_typename("vector<MyGenJet,allocator<MyGenJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_582_0_8, 107, -1, G__defined_typename("vector<MyGenJet,allocator<MyGenJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_582_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyGenJet,allocator<MyGenJet> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_582_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyGenJet,allocator<MyGenJet> >::size_type' 0 - sz u 'MyGenJet' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_582_0_11, 107, -1, G__defined_typename("vector<MyGenJet,allocator<MyGenJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_582_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_582_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenJet), G__defined_typename("vector<MyGenJet,allocator<MyGenJet> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyGenJet,allocator<MyGenJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_582_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenJet), G__defined_typename("vector<MyGenJet,allocator<MyGenJet> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyGenJet,allocator<MyGenJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenJet,allocator<MyGenJet> >",3482,G__eventdict_582_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenJet,allocator<MyGenJet> >",3482,G__eventdict_582_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyGenJet,allocator<MyGenJet> >::size_type' 0 - n u 'MyGenJet' - 11 'MyGenJet()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenJet,allocator<MyGenJet> >",3482,G__eventdict_582_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyGenJet,allocator<MyGenJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenJet,allocator<MyGenJet> >",3482,G__eventdict_582_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' 'vector<MyGenJet,allocator<MyGenJet> >::const_iterator' 10 - first u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' 'vector<MyGenJet,allocator<MyGenJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_582_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyGenJet,allocator<MyGenJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_582_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyGenJet,allocator<MyGenJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_582_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_582_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_582_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyGenJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_582_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyGenJet,allocator<MyGenJet> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_582_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' - 0 - position u 'MyGenJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_582_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' - 0 - position u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' 'vector<MyGenJet,allocator<MyGenJet> >::const_iterator' 10 - first "
"u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' 'vector<MyGenJet,allocator<MyGenJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_582_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' - 0 - position k - 'vector<MyGenJet,allocator<MyGenJet> >::size_type' 0 - n "
"u 'MyGenJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_582_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_582_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_582_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' - 0 - first u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_582_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyGenJet,allocator<MyGenJet> >", 3608, G__eventdict_582_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR(void) {
   /* vector<MyHLTrig,allocator<MyHLTrig> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR));
   G__memfunc_setup("at",213,G__eventdict_586_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyHLTrig), G__defined_typename("vector<MyHLTrig,allocator<MyHLTrig> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyHLTrig,allocator<MyHLTrig> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_586_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyHLTrig), G__defined_typename("vector<MyHLTrig,allocator<MyHLTrig> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyHLTrig,allocator<MyHLTrig> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_586_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_586_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_586_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgRcLcLiteratorgR), G__defined_typename("vector<MyHLTrig,allocator<MyHLTrig> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_586_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgRcLcLiteratorgR), G__defined_typename("vector<MyHLTrig,allocator<MyHLTrig> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_586_0_7, 107, -1, G__defined_typename("vector<MyHLTrig,allocator<MyHLTrig> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_586_0_8, 107, -1, G__defined_typename("vector<MyHLTrig,allocator<MyHLTrig> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_586_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyHLTrig,allocator<MyHLTrig> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_586_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyHLTrig,allocator<MyHLTrig> >::size_type' 0 - sz u 'MyHLTrig' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_586_0_11, 107, -1, G__defined_typename("vector<MyHLTrig,allocator<MyHLTrig> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_586_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_586_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyHLTrig), G__defined_typename("vector<MyHLTrig,allocator<MyHLTrig> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyHLTrig,allocator<MyHLTrig> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_586_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyHLTrig), G__defined_typename("vector<MyHLTrig,allocator<MyHLTrig> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyHLTrig,allocator<MyHLTrig> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyHLTrig,allocator<MyHLTrig> >",3444,G__eventdict_586_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyHLTrig,allocator<MyHLTrig> >",3444,G__eventdict_586_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyHLTrig,allocator<MyHLTrig> >::size_type' 0 - n u 'MyHLTrig' - 11 'MyHLTrig()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyHLTrig,allocator<MyHLTrig> >",3444,G__eventdict_586_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyHLTrig,allocator<MyHLTrig> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyHLTrig,allocator<MyHLTrig> >",3444,G__eventdict_586_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyHLTrig,allocator<MyHLTrig> >::iterator' 'vector<MyHLTrig,allocator<MyHLTrig> >::const_iterator' 10 - first u 'vector<MyHLTrig,allocator<MyHLTrig> >::iterator' 'vector<MyHLTrig,allocator<MyHLTrig> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_586_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyHLTrig,allocator<MyHLTrig> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_586_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyHLTrig,allocator<MyHLTrig> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_586_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyHLTrig), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_586_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyHLTrig), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_586_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyHLTrig' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_586_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyHLTrig,allocator<MyHLTrig> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_586_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyHLTrig,allocator<MyHLTrig> >::iterator' - 0 - position u 'MyHLTrig' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_586_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyHLTrig,allocator<MyHLTrig> >::iterator' - 0 - position u 'vector<MyHLTrig,allocator<MyHLTrig> >::iterator' 'vector<MyHLTrig,allocator<MyHLTrig> >::const_iterator' 10 - first "
"u 'vector<MyHLTrig,allocator<MyHLTrig> >::iterator' 'vector<MyHLTrig,allocator<MyHLTrig> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_586_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyHLTrig,allocator<MyHLTrig> >::iterator' - 0 - position k - 'vector<MyHLTrig,allocator<MyHLTrig> >::size_type' 0 - n "
"u 'MyHLTrig' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_586_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_586_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyHLTrig,allocator<MyHLTrig> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_586_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyHLTrig,allocator<MyHLTrig> >::iterator' - 0 - first u 'vector<MyHLTrig,allocator<MyHLTrig> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_586_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyHLTrig,allocator<MyHLTrig> >", 3570, G__eventdict_586_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR(void) {
   /* vector<MyL1Trig,allocator<MyL1Trig> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR));
   G__memfunc_setup("at",213,G__eventdict_590_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyL1Trig), G__defined_typename("vector<MyL1Trig,allocator<MyL1Trig> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyL1Trig,allocator<MyL1Trig> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_590_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyL1Trig), G__defined_typename("vector<MyL1Trig,allocator<MyL1Trig> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyL1Trig,allocator<MyL1Trig> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_590_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_590_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_590_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgRcLcLiteratorgR), G__defined_typename("vector<MyL1Trig,allocator<MyL1Trig> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_590_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgRcLcLiteratorgR), G__defined_typename("vector<MyL1Trig,allocator<MyL1Trig> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_590_0_7, 107, -1, G__defined_typename("vector<MyL1Trig,allocator<MyL1Trig> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_590_0_8, 107, -1, G__defined_typename("vector<MyL1Trig,allocator<MyL1Trig> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_590_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyL1Trig,allocator<MyL1Trig> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_590_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyL1Trig,allocator<MyL1Trig> >::size_type' 0 - sz u 'MyL1Trig' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_590_0_11, 107, -1, G__defined_typename("vector<MyL1Trig,allocator<MyL1Trig> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_590_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_590_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyL1Trig), G__defined_typename("vector<MyL1Trig,allocator<MyL1Trig> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyL1Trig,allocator<MyL1Trig> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_590_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyL1Trig), G__defined_typename("vector<MyL1Trig,allocator<MyL1Trig> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyL1Trig,allocator<MyL1Trig> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyL1Trig,allocator<MyL1Trig> >",3398,G__eventdict_590_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyL1Trig,allocator<MyL1Trig> >",3398,G__eventdict_590_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyL1Trig,allocator<MyL1Trig> >::size_type' 0 - n u 'MyL1Trig' - 11 'MyL1Trig()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyL1Trig,allocator<MyL1Trig> >",3398,G__eventdict_590_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyL1Trig,allocator<MyL1Trig> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyL1Trig,allocator<MyL1Trig> >",3398,G__eventdict_590_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyL1Trig,allocator<MyL1Trig> >::iterator' 'vector<MyL1Trig,allocator<MyL1Trig> >::const_iterator' 10 - first u 'vector<MyL1Trig,allocator<MyL1Trig> >::iterator' 'vector<MyL1Trig,allocator<MyL1Trig> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_590_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyL1Trig,allocator<MyL1Trig> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_590_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyL1Trig,allocator<MyL1Trig> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_590_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyL1Trig), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_590_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyL1Trig), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_590_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyL1Trig' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_590_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyL1Trig,allocator<MyL1Trig> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_590_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyL1Trig,allocator<MyL1Trig> >::iterator' - 0 - position u 'MyL1Trig' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_590_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyL1Trig,allocator<MyL1Trig> >::iterator' - 0 - position u 'vector<MyL1Trig,allocator<MyL1Trig> >::iterator' 'vector<MyL1Trig,allocator<MyL1Trig> >::const_iterator' 10 - first "
"u 'vector<MyL1Trig,allocator<MyL1Trig> >::iterator' 'vector<MyL1Trig,allocator<MyL1Trig> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_590_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyL1Trig,allocator<MyL1Trig> >::iterator' - 0 - position k - 'vector<MyL1Trig,allocator<MyL1Trig> >::size_type' 0 - n "
"u 'MyL1Trig' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_590_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_590_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyL1Trig,allocator<MyL1Trig> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_590_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyL1Trig,allocator<MyL1Trig> >::iterator' - 0 - first u 'vector<MyL1Trig,allocator<MyL1Trig> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_590_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyL1Trig,allocator<MyL1Trig> >", 3524, G__eventdict_590_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR(void) {
   /* vector<MyL1TrigOld,allocator<MyL1TrigOld> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_594_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyL1TrigOld), G__defined_typename("vector<MyL1TrigOld,allocator<MyL1TrigOld> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyL1TrigOld,allocator<MyL1TrigOld> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_594_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyL1TrigOld), G__defined_typename("vector<MyL1TrigOld,allocator<MyL1TrigOld> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyL1TrigOld,allocator<MyL1TrigOld> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_594_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_594_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_594_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyL1TrigOld,allocator<MyL1TrigOld> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_594_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyL1TrigOld,allocator<MyL1TrigOld> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_594_0_7, 107, -1, G__defined_typename("vector<MyL1TrigOld,allocator<MyL1TrigOld> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_594_0_8, 107, -1, G__defined_typename("vector<MyL1TrigOld,allocator<MyL1TrigOld> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_594_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyL1TrigOld,allocator<MyL1TrigOld> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_594_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyL1TrigOld,allocator<MyL1TrigOld> >::size_type' 0 - sz u 'MyL1TrigOld' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_594_0_11, 107, -1, G__defined_typename("vector<MyL1TrigOld,allocator<MyL1TrigOld> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_594_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_594_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyL1TrigOld), G__defined_typename("vector<MyL1TrigOld,allocator<MyL1TrigOld> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyL1TrigOld,allocator<MyL1TrigOld> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_594_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyL1TrigOld), G__defined_typename("vector<MyL1TrigOld,allocator<MyL1TrigOld> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyL1TrigOld,allocator<MyL1TrigOld> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyL1TrigOld,allocator<MyL1TrigOld> >",3972,G__eventdict_594_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyL1TrigOld,allocator<MyL1TrigOld> >",3972,G__eventdict_594_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyL1TrigOld,allocator<MyL1TrigOld> >::size_type' 0 - n u 'MyL1TrigOld' - 11 'MyL1TrigOld()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyL1TrigOld,allocator<MyL1TrigOld> >",3972,G__eventdict_594_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyL1TrigOld,allocator<MyL1TrigOld> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyL1TrigOld,allocator<MyL1TrigOld> >",3972,G__eventdict_594_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator' 'vector<MyL1TrigOld,allocator<MyL1TrigOld> >::const_iterator' 10 - first u 'vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator' 'vector<MyL1TrigOld,allocator<MyL1TrigOld> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_594_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyL1TrigOld,allocator<MyL1TrigOld> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_594_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyL1TrigOld,allocator<MyL1TrigOld> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_594_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyL1TrigOld), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_594_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyL1TrigOld), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_594_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyL1TrigOld' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_594_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyL1TrigOld,allocator<MyL1TrigOld> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_594_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator' - 0 - position u 'MyL1TrigOld' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_594_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator' - 0 - position u 'vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator' 'vector<MyL1TrigOld,allocator<MyL1TrigOld> >::const_iterator' 10 - first "
"u 'vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator' 'vector<MyL1TrigOld,allocator<MyL1TrigOld> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_594_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator' - 0 - position k - 'vector<MyL1TrigOld,allocator<MyL1TrigOld> >::size_type' 0 - n "
"u 'MyL1TrigOld' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_594_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_594_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_594_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator' - 0 - first u 'vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_594_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyL1TrigOld,allocator<MyL1TrigOld> >", 4098, G__eventdict_594_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR(void) {
   /* vector<MyMITEvtSel,allocator<MyMITEvtSel> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_598_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyMITEvtSel), G__defined_typename("vector<MyMITEvtSel,allocator<MyMITEvtSel> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyMITEvtSel,allocator<MyMITEvtSel> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_598_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyMITEvtSel), G__defined_typename("vector<MyMITEvtSel,allocator<MyMITEvtSel> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyMITEvtSel,allocator<MyMITEvtSel> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_598_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_598_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_598_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyMITEvtSel,allocator<MyMITEvtSel> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_598_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyMITEvtSel,allocator<MyMITEvtSel> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_598_0_7, 107, -1, G__defined_typename("vector<MyMITEvtSel,allocator<MyMITEvtSel> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_598_0_8, 107, -1, G__defined_typename("vector<MyMITEvtSel,allocator<MyMITEvtSel> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_598_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyMITEvtSel,allocator<MyMITEvtSel> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_598_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyMITEvtSel,allocator<MyMITEvtSel> >::size_type' 0 - sz u 'MyMITEvtSel' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_598_0_11, 107, -1, G__defined_typename("vector<MyMITEvtSel,allocator<MyMITEvtSel> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_598_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_598_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyMITEvtSel), G__defined_typename("vector<MyMITEvtSel,allocator<MyMITEvtSel> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyMITEvtSel,allocator<MyMITEvtSel> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_598_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyMITEvtSel), G__defined_typename("vector<MyMITEvtSel,allocator<MyMITEvtSel> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyMITEvtSel,allocator<MyMITEvtSel> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMITEvtSel,allocator<MyMITEvtSel> >",3994,G__eventdict_598_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMITEvtSel,allocator<MyMITEvtSel> >",3994,G__eventdict_598_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyMITEvtSel,allocator<MyMITEvtSel> >::size_type' 0 - n u 'MyMITEvtSel' - 11 'MyMITEvtSel()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMITEvtSel,allocator<MyMITEvtSel> >",3994,G__eventdict_598_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyMITEvtSel,allocator<MyMITEvtSel> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMITEvtSel,allocator<MyMITEvtSel> >",3994,G__eventdict_598_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator' 'vector<MyMITEvtSel,allocator<MyMITEvtSel> >::const_iterator' 10 - first u 'vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator' 'vector<MyMITEvtSel,allocator<MyMITEvtSel> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_598_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyMITEvtSel,allocator<MyMITEvtSel> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_598_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyMITEvtSel,allocator<MyMITEvtSel> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_598_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyMITEvtSel), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_598_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyMITEvtSel), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_598_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyMITEvtSel' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_598_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyMITEvtSel,allocator<MyMITEvtSel> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_598_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator' - 0 - position u 'MyMITEvtSel' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_598_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator' - 0 - position u 'vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator' 'vector<MyMITEvtSel,allocator<MyMITEvtSel> >::const_iterator' 10 - first "
"u 'vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator' 'vector<MyMITEvtSel,allocator<MyMITEvtSel> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_598_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator' - 0 - position k - 'vector<MyMITEvtSel,allocator<MyMITEvtSel> >::size_type' 0 - n "
"u 'MyMITEvtSel' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_598_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_598_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_598_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator' - 0 - first u 'vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_598_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyMITEvtSel,allocator<MyMITEvtSel> >", 4120, G__eventdict_598_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyPartcOallocatorlEMyPartgRsPgR(void) {
   /* vector<MyPart,allocator<MyPart> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_602_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyPart), G__defined_typename("vector<MyPart,allocator<MyPart> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyPart,allocator<MyPart> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_602_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyPart), G__defined_typename("vector<MyPart,allocator<MyPart> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyPart,allocator<MyPart> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_602_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_602_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_602_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyPartcOallocatorlEMyPartgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyPart,allocator<MyPart> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_602_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyPartcOallocatorlEMyPartgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyPart,allocator<MyPart> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_602_0_7, 107, -1, G__defined_typename("vector<MyPart,allocator<MyPart> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_602_0_8, 107, -1, G__defined_typename("vector<MyPart,allocator<MyPart> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_602_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyPart,allocator<MyPart> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_602_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyPart,allocator<MyPart> >::size_type' 0 - sz u 'MyPart' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_602_0_11, 107, -1, G__defined_typename("vector<MyPart,allocator<MyPart> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_602_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_602_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyPart), G__defined_typename("vector<MyPart,allocator<MyPart> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyPart,allocator<MyPart> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_602_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyPart), G__defined_typename("vector<MyPart,allocator<MyPart> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyPart,allocator<MyPart> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyPart,allocator<MyPart> >",3150,G__eventdict_602_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyPart,allocator<MyPart> >",3150,G__eventdict_602_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyPart,allocator<MyPart> >::size_type' 0 - n u 'MyPart' - 11 'MyPart()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyPart,allocator<MyPart> >",3150,G__eventdict_602_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyPart,allocator<MyPart> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyPart,allocator<MyPart> >",3150,G__eventdict_602_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyPart,allocator<MyPart> >::iterator' 'vector<MyPart,allocator<MyPart> >::const_iterator' 10 - first u 'vector<MyPart,allocator<MyPart> >::iterator' 'vector<MyPart,allocator<MyPart> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_602_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyPart,allocator<MyPart> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_602_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyPart,allocator<MyPart> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_602_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyPart), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_602_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyPart), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_602_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyPart' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_602_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyPart,allocator<MyPart> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_602_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyPart,allocator<MyPart> >::iterator' - 0 - position u 'MyPart' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_602_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyPart,allocator<MyPart> >::iterator' - 0 - position u 'vector<MyPart,allocator<MyPart> >::iterator' 'vector<MyPart,allocator<MyPart> >::const_iterator' 10 - first "
"u 'vector<MyPart,allocator<MyPart> >::iterator' 'vector<MyPart,allocator<MyPart> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_602_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyPart,allocator<MyPart> >::iterator' - 0 - position k - 'vector<MyPart,allocator<MyPart> >::size_type' 0 - n "
"u 'MyPart' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_602_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_602_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyPart,allocator<MyPart> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_602_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyPart,allocator<MyPart> >::iterator' - 0 - first u 'vector<MyPart,allocator<MyPart> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_602_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyPart,allocator<MyPart> >", 3276, G__eventdict_602_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR(void) {
   /* vector<MySimVertex,allocator<MySimVertex> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_606_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MySimVertex), G__defined_typename("vector<MySimVertex,allocator<MySimVertex> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MySimVertex,allocator<MySimVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_606_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MySimVertex), G__defined_typename("vector<MySimVertex,allocator<MySimVertex> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MySimVertex,allocator<MySimVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_606_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_606_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_606_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMySimVertexcOallocatorlEMySimVertexgRsPgRcLcLiteratorgR), G__defined_typename("vector<MySimVertex,allocator<MySimVertex> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_606_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMySimVertexcOallocatorlEMySimVertexgRsPgRcLcLiteratorgR), G__defined_typename("vector<MySimVertex,allocator<MySimVertex> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_606_0_7, 107, -1, G__defined_typename("vector<MySimVertex,allocator<MySimVertex> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_606_0_8, 107, -1, G__defined_typename("vector<MySimVertex,allocator<MySimVertex> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_606_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MySimVertex,allocator<MySimVertex> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_606_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MySimVertex,allocator<MySimVertex> >::size_type' 0 - sz u 'MySimVertex' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_606_0_11, 107, -1, G__defined_typename("vector<MySimVertex,allocator<MySimVertex> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_606_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_606_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MySimVertex), G__defined_typename("vector<MySimVertex,allocator<MySimVertex> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MySimVertex,allocator<MySimVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_606_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MySimVertex), G__defined_typename("vector<MySimVertex,allocator<MySimVertex> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MySimVertex,allocator<MySimVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MySimVertex,allocator<MySimVertex> >",4206,G__eventdict_606_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MySimVertex,allocator<MySimVertex> >",4206,G__eventdict_606_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MySimVertex,allocator<MySimVertex> >::size_type' 0 - n u 'MySimVertex' - 11 'MySimVertex()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MySimVertex,allocator<MySimVertex> >",4206,G__eventdict_606_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MySimVertex,allocator<MySimVertex> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MySimVertex,allocator<MySimVertex> >",4206,G__eventdict_606_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MySimVertex,allocator<MySimVertex> >::iterator' 'vector<MySimVertex,allocator<MySimVertex> >::const_iterator' 10 - first u 'vector<MySimVertex,allocator<MySimVertex> >::iterator' 'vector<MySimVertex,allocator<MySimVertex> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_606_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MySimVertex,allocator<MySimVertex> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_606_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MySimVertex,allocator<MySimVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_606_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MySimVertex), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_606_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MySimVertex), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_606_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MySimVertex' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_606_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MySimVertex,allocator<MySimVertex> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_606_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MySimVertex,allocator<MySimVertex> >::iterator' - 0 - position u 'MySimVertex' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_606_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MySimVertex,allocator<MySimVertex> >::iterator' - 0 - position u 'vector<MySimVertex,allocator<MySimVertex> >::iterator' 'vector<MySimVertex,allocator<MySimVertex> >::const_iterator' 10 - first "
"u 'vector<MySimVertex,allocator<MySimVertex> >::iterator' 'vector<MySimVertex,allocator<MySimVertex> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_606_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MySimVertex,allocator<MySimVertex> >::iterator' - 0 - position k - 'vector<MySimVertex,allocator<MySimVertex> >::size_type' 0 - n "
"u 'MySimVertex' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_606_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_606_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MySimVertex,allocator<MySimVertex> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_606_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MySimVertex,allocator<MySimVertex> >::iterator' - 0 - first u 'vector<MySimVertex,allocator<MySimVertex> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_606_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MySimVertex,allocator<MySimVertex> >", 4332, G__eventdict_606_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyVertexcOallocatorlEMyVertexgRsPgR(void) {
   /* vector<MyVertex,allocator<MyVertex> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_610_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyVertex), G__defined_typename("vector<MyVertex,allocator<MyVertex> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_610_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyVertex), G__defined_typename("vector<MyVertex,allocator<MyVertex> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_610_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_610_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_610_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyVertex,allocator<MyVertex> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_610_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyVertex,allocator<MyVertex> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_610_0_7, 107, -1, G__defined_typename("vector<MyVertex,allocator<MyVertex> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_610_0_8, 107, -1, G__defined_typename("vector<MyVertex,allocator<MyVertex> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_610_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_610_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - sz u 'MyVertex' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_610_0_11, 107, -1, G__defined_typename("vector<MyVertex,allocator<MyVertex> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_610_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_610_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyVertex), G__defined_typename("vector<MyVertex,allocator<MyVertex> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_610_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyVertex), G__defined_typename("vector<MyVertex,allocator<MyVertex> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyVertex,allocator<MyVertex> >",3612,G__eventdict_610_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyVertex,allocator<MyVertex> >",3612,G__eventdict_610_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n u 'MyVertex' - 11 'MyVertex()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyVertex,allocator<MyVertex> >",3612,G__eventdict_610_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyVertex,allocator<MyVertex> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyVertex,allocator<MyVertex> >",3612,G__eventdict_610_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' 'vector<MyVertex,allocator<MyVertex> >::const_iterator' 10 - first u 'vector<MyVertex,allocator<MyVertex> >::iterator' 'vector<MyVertex,allocator<MyVertex> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_610_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyVertex,allocator<MyVertex> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_610_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_610_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_610_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_610_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyVertex' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_610_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyVertex,allocator<MyVertex> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_610_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - position u 'MyVertex' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_610_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - position u 'vector<MyVertex,allocator<MyVertex> >::iterator' 'vector<MyVertex,allocator<MyVertex> >::const_iterator' 10 - first "
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' 'vector<MyVertex,allocator<MyVertex> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_610_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - position k - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n "
"u 'MyVertex' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_610_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_610_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_610_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - first u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_610_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyVertex,allocator<MyVertex> >", 3738, G__eventdict_610_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyElectroncOallocatorlEMyElectrongRsPgR(void) {
   /* vector<MyElectron,allocator<MyElectron> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__memfunc_setup("at",213,G__eventdict_614_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyElectron), G__defined_typename("vector<MyElectron,allocator<MyElectron> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyElectron,allocator<MyElectron> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_614_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyElectron), G__defined_typename("vector<MyElectron,allocator<MyElectron> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyElectron,allocator<MyElectron> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_614_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_614_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_614_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR), G__defined_typename("vector<MyElectron,allocator<MyElectron> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_614_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR), G__defined_typename("vector<MyElectron,allocator<MyElectron> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_614_0_7, 107, -1, G__defined_typename("vector<MyElectron,allocator<MyElectron> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_614_0_8, 107, -1, G__defined_typename("vector<MyElectron,allocator<MyElectron> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_614_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyElectron,allocator<MyElectron> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_614_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyElectron,allocator<MyElectron> >::size_type' 0 - sz u 'MyElectron' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_614_0_11, 107, -1, G__defined_typename("vector<MyElectron,allocator<MyElectron> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_614_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_614_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyElectron), G__defined_typename("vector<MyElectron,allocator<MyElectron> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyElectron,allocator<MyElectron> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_614_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyElectron), G__defined_typename("vector<MyElectron,allocator<MyElectron> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyElectron,allocator<MyElectron> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyElectron,allocator<MyElectron> >",3992,G__eventdict_614_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyElectron,allocator<MyElectron> >",3992,G__eventdict_614_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyElectron,allocator<MyElectron> >::size_type' 0 - n u 'MyElectron' - 11 'MyElectron()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyElectron,allocator<MyElectron> >",3992,G__eventdict_614_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyElectron,allocator<MyElectron> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyElectron,allocator<MyElectron> >",3992,G__eventdict_614_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyElectron,allocator<MyElectron> >::iterator' 'vector<MyElectron,allocator<MyElectron> >::const_iterator' 10 - first u 'vector<MyElectron,allocator<MyElectron> >::iterator' 'vector<MyElectron,allocator<MyElectron> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_614_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyElectron,allocator<MyElectron> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_614_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyElectron,allocator<MyElectron> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_614_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyElectron), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_614_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyElectron), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_614_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyElectron' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_614_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyElectron,allocator<MyElectron> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_614_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyElectron,allocator<MyElectron> >::iterator' - 0 - position u 'MyElectron' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_614_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyElectron,allocator<MyElectron> >::iterator' - 0 - position u 'vector<MyElectron,allocator<MyElectron> >::iterator' 'vector<MyElectron,allocator<MyElectron> >::const_iterator' 10 - first "
"u 'vector<MyElectron,allocator<MyElectron> >::iterator' 'vector<MyElectron,allocator<MyElectron> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_614_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyElectron,allocator<MyElectron> >::iterator' - 0 - position k - 'vector<MyElectron,allocator<MyElectron> >::size_type' 0 - n "
"u 'MyElectron' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_614_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_614_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyElectron,allocator<MyElectron> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_614_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyElectron,allocator<MyElectron> >::iterator' - 0 - first u 'vector<MyElectron,allocator<MyElectron> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_614_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyElectron,allocator<MyElectron> >", 4118, G__eventdict_614_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyMuoncOallocatorlEMyMuongRsPgR(void) {
   /* vector<MyMuon,allocator<MyMuon> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__memfunc_setup("at",213,G__eventdict_618_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyMuon), G__defined_typename("vector<MyMuon,allocator<MyMuon> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyMuon,allocator<MyMuon> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_618_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyMuon), G__defined_typename("vector<MyMuon,allocator<MyMuon> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyMuon,allocator<MyMuon> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_618_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_618_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_618_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR), G__defined_typename("vector<MyMuon,allocator<MyMuon> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_618_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR), G__defined_typename("vector<MyMuon,allocator<MyMuon> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_618_0_7, 107, -1, G__defined_typename("vector<MyMuon,allocator<MyMuon> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_618_0_8, 107, -1, G__defined_typename("vector<MyMuon,allocator<MyMuon> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_618_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyMuon,allocator<MyMuon> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_618_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyMuon,allocator<MyMuon> >::size_type' 0 - sz u 'MyMuon' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_618_0_11, 107, -1, G__defined_typename("vector<MyMuon,allocator<MyMuon> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_618_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_618_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyMuon), G__defined_typename("vector<MyMuon,allocator<MyMuon> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyMuon,allocator<MyMuon> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_618_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyMuon), G__defined_typename("vector<MyMuon,allocator<MyMuon> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyMuon,allocator<MyMuon> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMuon,allocator<MyMuon> >",3166,G__eventdict_618_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMuon,allocator<MyMuon> >",3166,G__eventdict_618_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyMuon,allocator<MyMuon> >::size_type' 0 - n u 'MyMuon' - 11 'MyMuon()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMuon,allocator<MyMuon> >",3166,G__eventdict_618_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyMuon,allocator<MyMuon> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMuon,allocator<MyMuon> >",3166,G__eventdict_618_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyMuon,allocator<MyMuon> >::iterator' 'vector<MyMuon,allocator<MyMuon> >::const_iterator' 10 - first u 'vector<MyMuon,allocator<MyMuon> >::iterator' 'vector<MyMuon,allocator<MyMuon> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_618_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyMuon,allocator<MyMuon> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_618_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyMuon,allocator<MyMuon> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_618_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyMuon), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_618_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyMuon), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_618_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyMuon' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_618_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyMuon,allocator<MyMuon> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_618_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyMuon,allocator<MyMuon> >::iterator' - 0 - position u 'MyMuon' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_618_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyMuon,allocator<MyMuon> >::iterator' - 0 - position u 'vector<MyMuon,allocator<MyMuon> >::iterator' 'vector<MyMuon,allocator<MyMuon> >::const_iterator' 10 - first "
"u 'vector<MyMuon,allocator<MyMuon> >::iterator' 'vector<MyMuon,allocator<MyMuon> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_618_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyMuon,allocator<MyMuon> >::iterator' - 0 - position k - 'vector<MyMuon,allocator<MyMuon> >::size_type' 0 - n "
"u 'MyMuon' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_618_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_618_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyMuon,allocator<MyMuon> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_618_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyMuon,allocator<MyMuon> >::iterator' - 0 - first u 'vector<MyMuon,allocator<MyMuon> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_618_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyMuon,allocator<MyMuon> >", 3292, G__eventdict_618_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR(void) {
   /* vector<MyBaseJet,allocator<MyBaseJet> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_622_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyBaseJet), G__defined_typename("vector<MyBaseJet,allocator<MyBaseJet> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyBaseJet,allocator<MyBaseJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_622_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyBaseJet), G__defined_typename("vector<MyBaseJet,allocator<MyBaseJet> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyBaseJet,allocator<MyBaseJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_622_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_622_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_622_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyBaseJet,allocator<MyBaseJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_622_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyBaseJet,allocator<MyBaseJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_622_0_7, 107, -1, G__defined_typename("vector<MyBaseJet,allocator<MyBaseJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_622_0_8, 107, -1, G__defined_typename("vector<MyBaseJet,allocator<MyBaseJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_622_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyBaseJet,allocator<MyBaseJet> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_622_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyBaseJet,allocator<MyBaseJet> >::size_type' 0 - sz u 'MyBaseJet' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_622_0_11, 107, -1, G__defined_typename("vector<MyBaseJet,allocator<MyBaseJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_622_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_622_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyBaseJet), G__defined_typename("vector<MyBaseJet,allocator<MyBaseJet> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyBaseJet,allocator<MyBaseJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_622_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyBaseJet), G__defined_typename("vector<MyBaseJet,allocator<MyBaseJet> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyBaseJet,allocator<MyBaseJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyBaseJet,allocator<MyBaseJet> >",3676,G__eventdict_622_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyBaseJet,allocator<MyBaseJet> >",3676,G__eventdict_622_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyBaseJet,allocator<MyBaseJet> >::size_type' 0 - n u 'MyBaseJet' - 11 'MyBaseJet()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyBaseJet,allocator<MyBaseJet> >",3676,G__eventdict_622_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyBaseJet,allocator<MyBaseJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyBaseJet,allocator<MyBaseJet> >",3676,G__eventdict_622_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyBaseJet,allocator<MyBaseJet> >::iterator' 'vector<MyBaseJet,allocator<MyBaseJet> >::const_iterator' 10 - first u 'vector<MyBaseJet,allocator<MyBaseJet> >::iterator' 'vector<MyBaseJet,allocator<MyBaseJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_622_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyBaseJet,allocator<MyBaseJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_622_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyBaseJet,allocator<MyBaseJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_622_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyBaseJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_622_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyBaseJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_622_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyBaseJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_622_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyBaseJet,allocator<MyBaseJet> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_622_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyBaseJet,allocator<MyBaseJet> >::iterator' - 0 - position u 'MyBaseJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_622_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyBaseJet,allocator<MyBaseJet> >::iterator' - 0 - position u 'vector<MyBaseJet,allocator<MyBaseJet> >::iterator' 'vector<MyBaseJet,allocator<MyBaseJet> >::const_iterator' 10 - first "
"u 'vector<MyBaseJet,allocator<MyBaseJet> >::iterator' 'vector<MyBaseJet,allocator<MyBaseJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_622_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyBaseJet,allocator<MyBaseJet> >::iterator' - 0 - position k - 'vector<MyBaseJet,allocator<MyBaseJet> >::size_type' 0 - n "
"u 'MyBaseJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_622_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_622_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyBaseJet,allocator<MyBaseJet> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_622_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyBaseJet,allocator<MyBaseJet> >::iterator' - 0 - first u 'vector<MyBaseJet,allocator<MyBaseJet> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_622_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyBaseJet,allocator<MyBaseJet> >", 3802, G__eventdict_622_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyJetcOallocatorlEMyJetgRsPgR(void) {
   /* vector<MyJet,allocator<MyJet> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_626_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyJet), G__defined_typename("vector<MyJet,allocator<MyJet> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyJet,allocator<MyJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_626_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyJet), G__defined_typename("vector<MyJet,allocator<MyJet> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyJet,allocator<MyJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_626_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_626_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_626_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyJet,allocator<MyJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_626_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyJet,allocator<MyJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_626_0_7, 107, -1, G__defined_typename("vector<MyJet,allocator<MyJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_626_0_8, 107, -1, G__defined_typename("vector<MyJet,allocator<MyJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_626_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyJet,allocator<MyJet> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_626_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyJet,allocator<MyJet> >::size_type' 0 - sz u 'MyJet' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_626_0_11, 107, -1, G__defined_typename("vector<MyJet,allocator<MyJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_626_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_626_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyJet), G__defined_typename("vector<MyJet,allocator<MyJet> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyJet,allocator<MyJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_626_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyJet), G__defined_typename("vector<MyJet,allocator<MyJet> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyJet,allocator<MyJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyJet,allocator<MyJet> >",2918,G__eventdict_626_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyJet,allocator<MyJet> >",2918,G__eventdict_626_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyJet,allocator<MyJet> >::size_type' 0 - n u 'MyJet' - 11 'MyJet()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyJet,allocator<MyJet> >",2918,G__eventdict_626_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyJet,allocator<MyJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyJet,allocator<MyJet> >",2918,G__eventdict_626_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyJet,allocator<MyJet> >::iterator' 'vector<MyJet,allocator<MyJet> >::const_iterator' 10 - first u 'vector<MyJet,allocator<MyJet> >::iterator' 'vector<MyJet,allocator<MyJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_626_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyJet,allocator<MyJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_626_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyJet,allocator<MyJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_626_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_626_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_626_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_626_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyJet,allocator<MyJet> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_626_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyJet,allocator<MyJet> >::iterator' - 0 - position u 'MyJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_626_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyJet,allocator<MyJet> >::iterator' - 0 - position u 'vector<MyJet,allocator<MyJet> >::iterator' 'vector<MyJet,allocator<MyJet> >::const_iterator' 10 - first "
"u 'vector<MyJet,allocator<MyJet> >::iterator' 'vector<MyJet,allocator<MyJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_626_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyJet,allocator<MyJet> >::iterator' - 0 - position k - 'vector<MyJet,allocator<MyJet> >::size_type' 0 - n "
"u 'MyJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_626_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_626_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyJet,allocator<MyJet> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_626_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyJet,allocator<MyJet> >::iterator' - 0 - first u 'vector<MyJet,allocator<MyJet> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_626_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyJet,allocator<MyJet> >", 3044, G__eventdict_626_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR(void) {
   /* vector<MyCaloJet,allocator<MyCaloJet> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_630_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyCaloJet), G__defined_typename("vector<MyCaloJet,allocator<MyCaloJet> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyCaloJet,allocator<MyCaloJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_630_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyCaloJet), G__defined_typename("vector<MyCaloJet,allocator<MyCaloJet> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyCaloJet,allocator<MyCaloJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_630_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_630_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_630_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyCaloJet,allocator<MyCaloJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_630_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyCaloJet,allocator<MyCaloJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_630_0_7, 107, -1, G__defined_typename("vector<MyCaloJet,allocator<MyCaloJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_630_0_8, 107, -1, G__defined_typename("vector<MyCaloJet,allocator<MyCaloJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_630_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyCaloJet,allocator<MyCaloJet> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_630_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyCaloJet,allocator<MyCaloJet> >::size_type' 0 - sz u 'MyCaloJet' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_630_0_11, 107, -1, G__defined_typename("vector<MyCaloJet,allocator<MyCaloJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_630_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_630_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyCaloJet), G__defined_typename("vector<MyCaloJet,allocator<MyCaloJet> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyCaloJet,allocator<MyCaloJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_630_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyCaloJet), G__defined_typename("vector<MyCaloJet,allocator<MyCaloJet> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyCaloJet,allocator<MyCaloJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCaloJet,allocator<MyCaloJet> >",3684,G__eventdict_630_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCaloJet,allocator<MyCaloJet> >",3684,G__eventdict_630_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyCaloJet,allocator<MyCaloJet> >::size_type' 0 - n u 'MyCaloJet' - 11 'MyCaloJet()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCaloJet,allocator<MyCaloJet> >",3684,G__eventdict_630_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyCaloJet,allocator<MyCaloJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCaloJet,allocator<MyCaloJet> >",3684,G__eventdict_630_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCaloJet,allocator<MyCaloJet> >::iterator' 'vector<MyCaloJet,allocator<MyCaloJet> >::const_iterator' 10 - first u 'vector<MyCaloJet,allocator<MyCaloJet> >::iterator' 'vector<MyCaloJet,allocator<MyCaloJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_630_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyCaloJet,allocator<MyCaloJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_630_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyCaloJet,allocator<MyCaloJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_630_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyCaloJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_630_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyCaloJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_630_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyCaloJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_630_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyCaloJet,allocator<MyCaloJet> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_630_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCaloJet,allocator<MyCaloJet> >::iterator' - 0 - position u 'MyCaloJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_630_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyCaloJet,allocator<MyCaloJet> >::iterator' - 0 - position u 'vector<MyCaloJet,allocator<MyCaloJet> >::iterator' 'vector<MyCaloJet,allocator<MyCaloJet> >::const_iterator' 10 - first "
"u 'vector<MyCaloJet,allocator<MyCaloJet> >::iterator' 'vector<MyCaloJet,allocator<MyCaloJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_630_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyCaloJet,allocator<MyCaloJet> >::iterator' - 0 - position k - 'vector<MyCaloJet,allocator<MyCaloJet> >::size_type' 0 - n "
"u 'MyCaloJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_630_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_630_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyCaloJet,allocator<MyCaloJet> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_630_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCaloJet,allocator<MyCaloJet> >::iterator' - 0 - first u 'vector<MyCaloJet,allocator<MyCaloJet> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_630_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyCaloJet,allocator<MyCaloJet> >", 3810, G__eventdict_630_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR(void) {
   /* vector<MyTrackJet,allocator<MyTrackJet> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_634_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyTrackJet), G__defined_typename("vector<MyTrackJet,allocator<MyTrackJet> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyTrackJet,allocator<MyTrackJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_634_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyTrackJet), G__defined_typename("vector<MyTrackJet,allocator<MyTrackJet> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyTrackJet,allocator<MyTrackJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_634_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_634_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_634_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyTrackJet,allocator<MyTrackJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_634_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyTrackJet,allocator<MyTrackJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_634_0_7, 107, -1, G__defined_typename("vector<MyTrackJet,allocator<MyTrackJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_634_0_8, 107, -1, G__defined_typename("vector<MyTrackJet,allocator<MyTrackJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_634_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyTrackJet,allocator<MyTrackJet> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_634_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyTrackJet,allocator<MyTrackJet> >::size_type' 0 - sz u 'MyTrackJet' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_634_0_11, 107, -1, G__defined_typename("vector<MyTrackJet,allocator<MyTrackJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_634_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_634_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyTrackJet), G__defined_typename("vector<MyTrackJet,allocator<MyTrackJet> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyTrackJet,allocator<MyTrackJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_634_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyTrackJet), G__defined_typename("vector<MyTrackJet,allocator<MyTrackJet> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyTrackJet,allocator<MyTrackJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyTrackJet,allocator<MyTrackJet> >",3920,G__eventdict_634_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyTrackJet,allocator<MyTrackJet> >",3920,G__eventdict_634_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyTrackJet,allocator<MyTrackJet> >::size_type' 0 - n u 'MyTrackJet' - 11 'MyTrackJet()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyTrackJet,allocator<MyTrackJet> >",3920,G__eventdict_634_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyTrackJet,allocator<MyTrackJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyTrackJet,allocator<MyTrackJet> >",3920,G__eventdict_634_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyTrackJet,allocator<MyTrackJet> >::iterator' 'vector<MyTrackJet,allocator<MyTrackJet> >::const_iterator' 10 - first u 'vector<MyTrackJet,allocator<MyTrackJet> >::iterator' 'vector<MyTrackJet,allocator<MyTrackJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_634_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyTrackJet,allocator<MyTrackJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_634_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyTrackJet,allocator<MyTrackJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_634_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyTrackJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_634_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyTrackJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_634_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyTrackJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_634_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyTrackJet,allocator<MyTrackJet> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_634_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyTrackJet,allocator<MyTrackJet> >::iterator' - 0 - position u 'MyTrackJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_634_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyTrackJet,allocator<MyTrackJet> >::iterator' - 0 - position u 'vector<MyTrackJet,allocator<MyTrackJet> >::iterator' 'vector<MyTrackJet,allocator<MyTrackJet> >::const_iterator' 10 - first "
"u 'vector<MyTrackJet,allocator<MyTrackJet> >::iterator' 'vector<MyTrackJet,allocator<MyTrackJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_634_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyTrackJet,allocator<MyTrackJet> >::iterator' - 0 - position k - 'vector<MyTrackJet,allocator<MyTrackJet> >::size_type' 0 - n "
"u 'MyTrackJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_634_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_634_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyTrackJet,allocator<MyTrackJet> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_634_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyTrackJet,allocator<MyTrackJet> >::iterator' - 0 - first u 'vector<MyTrackJet,allocator<MyTrackJet> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_634_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyTrackJet,allocator<MyTrackJet> >", 4046, G__eventdict_634_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR(void) {
   /* vector<MyPFJet,allocator<MyPFJet> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_638_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyPFJet), G__defined_typename("vector<MyPFJet,allocator<MyPFJet> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyPFJet,allocator<MyPFJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_638_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyPFJet), G__defined_typename("vector<MyPFJet,allocator<MyPFJet> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyPFJet,allocator<MyPFJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_638_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_638_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_638_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyPFJetcOallocatorlEMyPFJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyPFJet,allocator<MyPFJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_638_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyPFJetcOallocatorlEMyPFJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyPFJet,allocator<MyPFJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_638_0_7, 107, -1, G__defined_typename("vector<MyPFJet,allocator<MyPFJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_638_0_8, 107, -1, G__defined_typename("vector<MyPFJet,allocator<MyPFJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_638_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyPFJet,allocator<MyPFJet> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_638_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyPFJet,allocator<MyPFJet> >::size_type' 0 - sz u 'MyPFJet' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_638_0_11, 107, -1, G__defined_typename("vector<MyPFJet,allocator<MyPFJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_638_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_638_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyPFJet), G__defined_typename("vector<MyPFJet,allocator<MyPFJet> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyPFJet,allocator<MyPFJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_638_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyPFJet), G__defined_typename("vector<MyPFJet,allocator<MyPFJet> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyPFJet,allocator<MyPFJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyPFJet,allocator<MyPFJet> >",3218,G__eventdict_638_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyPFJet,allocator<MyPFJet> >",3218,G__eventdict_638_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyPFJet,allocator<MyPFJet> >::size_type' 0 - n u 'MyPFJet' - 11 'MyPFJet()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyPFJet,allocator<MyPFJet> >",3218,G__eventdict_638_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyPFJet,allocator<MyPFJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyPFJet,allocator<MyPFJet> >",3218,G__eventdict_638_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyPFJet,allocator<MyPFJet> >::iterator' 'vector<MyPFJet,allocator<MyPFJet> >::const_iterator' 10 - first u 'vector<MyPFJet,allocator<MyPFJet> >::iterator' 'vector<MyPFJet,allocator<MyPFJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_638_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyPFJet,allocator<MyPFJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_638_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyPFJet,allocator<MyPFJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_638_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyPFJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_638_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyPFJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_638_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyPFJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_638_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyPFJet,allocator<MyPFJet> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_638_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyPFJet,allocator<MyPFJet> >::iterator' - 0 - position u 'MyPFJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_638_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyPFJet,allocator<MyPFJet> >::iterator' - 0 - position u 'vector<MyPFJet,allocator<MyPFJet> >::iterator' 'vector<MyPFJet,allocator<MyPFJet> >::const_iterator' 10 - first "
"u 'vector<MyPFJet,allocator<MyPFJet> >::iterator' 'vector<MyPFJet,allocator<MyPFJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_638_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyPFJet,allocator<MyPFJet> >::iterator' - 0 - position k - 'vector<MyPFJet,allocator<MyPFJet> >::size_type' 0 - n "
"u 'MyPFJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_638_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_638_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyPFJet,allocator<MyPFJet> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_638_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyPFJet,allocator<MyPFJet> >::iterator' - 0 - first u 'vector<MyPFJet,allocator<MyPFJet> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_638_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyPFJet,allocator<MyPFJet> >", 3344, G__eventdict_638_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR(void) {
   /* vector<MyPFCand,allocator<MyPFCand> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_642_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyPFCand), G__defined_typename("vector<MyPFCand,allocator<MyPFCand> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyPFCand,allocator<MyPFCand> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_642_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyPFCand), G__defined_typename("vector<MyPFCand,allocator<MyPFCand> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyPFCand,allocator<MyPFCand> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_642_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_642_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_642_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyPFCandcOallocatorlEMyPFCandgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyPFCand,allocator<MyPFCand> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_642_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyPFCandcOallocatorlEMyPFCandgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyPFCand,allocator<MyPFCand> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_642_0_7, 107, -1, G__defined_typename("vector<MyPFCand,allocator<MyPFCand> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_642_0_8, 107, -1, G__defined_typename("vector<MyPFCand,allocator<MyPFCand> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_642_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyPFCand,allocator<MyPFCand> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_642_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyPFCand,allocator<MyPFCand> >::size_type' 0 - sz u 'MyPFCand' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_642_0_11, 107, -1, G__defined_typename("vector<MyPFCand,allocator<MyPFCand> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_642_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_642_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyPFCand), G__defined_typename("vector<MyPFCand,allocator<MyPFCand> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyPFCand,allocator<MyPFCand> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_642_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyPFCand), G__defined_typename("vector<MyPFCand,allocator<MyPFCand> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyPFCand,allocator<MyPFCand> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyPFCand,allocator<MyPFCand> >",3384,G__eventdict_642_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyPFCand,allocator<MyPFCand> >",3384,G__eventdict_642_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyPFCand,allocator<MyPFCand> >::size_type' 0 - n u 'MyPFCand' - 11 'MyPFCand()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyPFCand,allocator<MyPFCand> >",3384,G__eventdict_642_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyPFCand,allocator<MyPFCand> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyPFCand,allocator<MyPFCand> >",3384,G__eventdict_642_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyPFCand,allocator<MyPFCand> >::iterator' 'vector<MyPFCand,allocator<MyPFCand> >::const_iterator' 10 - first u 'vector<MyPFCand,allocator<MyPFCand> >::iterator' 'vector<MyPFCand,allocator<MyPFCand> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_642_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyPFCand,allocator<MyPFCand> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_642_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyPFCand,allocator<MyPFCand> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_642_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyPFCand), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_642_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyPFCand), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_642_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyPFCand' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_642_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyPFCand,allocator<MyPFCand> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_642_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyPFCand,allocator<MyPFCand> >::iterator' - 0 - position u 'MyPFCand' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_642_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyPFCand,allocator<MyPFCand> >::iterator' - 0 - position u 'vector<MyPFCand,allocator<MyPFCand> >::iterator' 'vector<MyPFCand,allocator<MyPFCand> >::const_iterator' 10 - first "
"u 'vector<MyPFCand,allocator<MyPFCand> >::iterator' 'vector<MyPFCand,allocator<MyPFCand> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_642_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyPFCand,allocator<MyPFCand> >::iterator' - 0 - position k - 'vector<MyPFCand,allocator<MyPFCand> >::size_type' 0 - n "
"u 'MyPFCand' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_642_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_642_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyPFCand,allocator<MyPFCand> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_642_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyPFCand,allocator<MyPFCand> >::iterator' - 0 - first u 'vector<MyPFCand,allocator<MyPFCand> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_642_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyPFCand,allocator<MyPFCand> >", 3510, G__eventdict_642_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR(void) {
   /* vector<MyCaloTower,allocator<MyCaloTower> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR));
   G__memfunc_setup("at",213,G__eventdict_646_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyCaloTower), G__defined_typename("vector<MyCaloTower,allocator<MyCaloTower> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyCaloTower,allocator<MyCaloTower> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_646_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyCaloTower), G__defined_typename("vector<MyCaloTower,allocator<MyCaloTower> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyCaloTower,allocator<MyCaloTower> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_646_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_646_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_646_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiteratorgR), G__defined_typename("vector<MyCaloTower,allocator<MyCaloTower> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_646_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiteratorgR), G__defined_typename("vector<MyCaloTower,allocator<MyCaloTower> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_646_0_7, 107, -1, G__defined_typename("vector<MyCaloTower,allocator<MyCaloTower> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_646_0_8, 107, -1, G__defined_typename("vector<MyCaloTower,allocator<MyCaloTower> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_646_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyCaloTower,allocator<MyCaloTower> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_646_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyCaloTower,allocator<MyCaloTower> >::size_type' 0 - sz u 'MyCaloTower' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_646_0_11, 107, -1, G__defined_typename("vector<MyCaloTower,allocator<MyCaloTower> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_646_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_646_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyCaloTower), G__defined_typename("vector<MyCaloTower,allocator<MyCaloTower> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyCaloTower,allocator<MyCaloTower> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_646_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyCaloTower), G__defined_typename("vector<MyCaloTower,allocator<MyCaloTower> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyCaloTower,allocator<MyCaloTower> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCaloTower,allocator<MyCaloTower> >",4160,G__eventdict_646_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCaloTower,allocator<MyCaloTower> >",4160,G__eventdict_646_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyCaloTower,allocator<MyCaloTower> >::size_type' 0 - n u 'MyCaloTower' - 11 'MyCaloTower()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCaloTower,allocator<MyCaloTower> >",4160,G__eventdict_646_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyCaloTower,allocator<MyCaloTower> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyCaloTower,allocator<MyCaloTower> >",4160,G__eventdict_646_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCaloTower,allocator<MyCaloTower> >::iterator' 'vector<MyCaloTower,allocator<MyCaloTower> >::const_iterator' 10 - first u 'vector<MyCaloTower,allocator<MyCaloTower> >::iterator' 'vector<MyCaloTower,allocator<MyCaloTower> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_646_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyCaloTower,allocator<MyCaloTower> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_646_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyCaloTower,allocator<MyCaloTower> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_646_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyCaloTower), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_646_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyCaloTower), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_646_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyCaloTower' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_646_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyCaloTower,allocator<MyCaloTower> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_646_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCaloTower,allocator<MyCaloTower> >::iterator' - 0 - position u 'MyCaloTower' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_646_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyCaloTower,allocator<MyCaloTower> >::iterator' - 0 - position u 'vector<MyCaloTower,allocator<MyCaloTower> >::iterator' 'vector<MyCaloTower,allocator<MyCaloTower> >::const_iterator' 10 - first "
"u 'vector<MyCaloTower,allocator<MyCaloTower> >::iterator' 'vector<MyCaloTower,allocator<MyCaloTower> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_646_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyCaloTower,allocator<MyCaloTower> >::iterator' - 0 - position k - 'vector<MyCaloTower,allocator<MyCaloTower> >::size_type' 0 - n "
"u 'MyCaloTower' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_646_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_646_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyCaloTower,allocator<MyCaloTower> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_646_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyCaloTower,allocator<MyCaloTower> >::iterator' - 0 - first u 'vector<MyCaloTower,allocator<MyCaloTower> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_646_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyCaloTower,allocator<MyCaloTower> >", 4286, G__eventdict_646_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR(void) {
   /* vector<MyZDCHit,allocator<MyZDCHit> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_650_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyZDCHit), G__defined_typename("vector<MyZDCHit,allocator<MyZDCHit> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyZDCHit,allocator<MyZDCHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_650_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyZDCHit), G__defined_typename("vector<MyZDCHit,allocator<MyZDCHit> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyZDCHit,allocator<MyZDCHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_650_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_650_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_650_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyZDCHit,allocator<MyZDCHit> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_650_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyZDCHit,allocator<MyZDCHit> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_650_0_7, 107, -1, G__defined_typename("vector<MyZDCHit,allocator<MyZDCHit> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_650_0_8, 107, -1, G__defined_typename("vector<MyZDCHit,allocator<MyZDCHit> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_650_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyZDCHit,allocator<MyZDCHit> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_650_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyZDCHit,allocator<MyZDCHit> >::size_type' 0 - sz u 'MyZDCHit' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_650_0_11, 107, -1, G__defined_typename("vector<MyZDCHit,allocator<MyZDCHit> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_650_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_650_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyZDCHit), G__defined_typename("vector<MyZDCHit,allocator<MyZDCHit> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyZDCHit,allocator<MyZDCHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_650_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyZDCHit), G__defined_typename("vector<MyZDCHit,allocator<MyZDCHit> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyZDCHit,allocator<MyZDCHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyZDCHit,allocator<MyZDCHit> >",3372,G__eventdict_650_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyZDCHit,allocator<MyZDCHit> >",3372,G__eventdict_650_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyZDCHit,allocator<MyZDCHit> >::size_type' 0 - n u 'MyZDCHit' - 11 'MyZDCHit()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyZDCHit,allocator<MyZDCHit> >",3372,G__eventdict_650_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyZDCHit,allocator<MyZDCHit> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyZDCHit,allocator<MyZDCHit> >",3372,G__eventdict_650_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyZDCHit,allocator<MyZDCHit> >::iterator' 'vector<MyZDCHit,allocator<MyZDCHit> >::const_iterator' 10 - first u 'vector<MyZDCHit,allocator<MyZDCHit> >::iterator' 'vector<MyZDCHit,allocator<MyZDCHit> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_650_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyZDCHit,allocator<MyZDCHit> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_650_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyZDCHit,allocator<MyZDCHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_650_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyZDCHit), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_650_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyZDCHit), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_650_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyZDCHit' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_650_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyZDCHit,allocator<MyZDCHit> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_650_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyZDCHit,allocator<MyZDCHit> >::iterator' - 0 - position u 'MyZDCHit' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_650_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyZDCHit,allocator<MyZDCHit> >::iterator' - 0 - position u 'vector<MyZDCHit,allocator<MyZDCHit> >::iterator' 'vector<MyZDCHit,allocator<MyZDCHit> >::const_iterator' 10 - first "
"u 'vector<MyZDCHit,allocator<MyZDCHit> >::iterator' 'vector<MyZDCHit,allocator<MyZDCHit> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_650_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyZDCHit,allocator<MyZDCHit> >::iterator' - 0 - position k - 'vector<MyZDCHit,allocator<MyZDCHit> >::size_type' 0 - n "
"u 'MyZDCHit' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_650_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_650_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyZDCHit,allocator<MyZDCHit> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_650_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyZDCHit,allocator<MyZDCHit> >::iterator' - 0 - first u 'vector<MyZDCHit,allocator<MyZDCHit> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_650_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyZDCHit,allocator<MyZDCHit> >", 3498, G__eventdict_650_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR(void) {
   /* vector<MyZDCDigi,allocator<MyZDCDigi> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR));
   G__memfunc_setup("at",213,G__eventdict_654_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyZDCDigi), G__defined_typename("vector<MyZDCDigi,allocator<MyZDCDigi> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyZDCDigi,allocator<MyZDCDigi> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_654_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyZDCDigi), G__defined_typename("vector<MyZDCDigi,allocator<MyZDCDigi> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyZDCDigi,allocator<MyZDCDigi> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_654_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_654_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_654_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgRcLcLiteratorgR), G__defined_typename("vector<MyZDCDigi,allocator<MyZDCDigi> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_654_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgRcLcLiteratorgR), G__defined_typename("vector<MyZDCDigi,allocator<MyZDCDigi> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_654_0_7, 107, -1, G__defined_typename("vector<MyZDCDigi,allocator<MyZDCDigi> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_654_0_8, 107, -1, G__defined_typename("vector<MyZDCDigi,allocator<MyZDCDigi> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_654_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyZDCDigi,allocator<MyZDCDigi> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_654_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyZDCDigi,allocator<MyZDCDigi> >::size_type' 0 - sz u 'MyZDCDigi' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_654_0_11, 107, -1, G__defined_typename("vector<MyZDCDigi,allocator<MyZDCDigi> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_654_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_654_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyZDCDigi), G__defined_typename("vector<MyZDCDigi,allocator<MyZDCDigi> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyZDCDigi,allocator<MyZDCDigi> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_654_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyZDCDigi), G__defined_typename("vector<MyZDCDigi,allocator<MyZDCDigi> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyZDCDigi,allocator<MyZDCDigi> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyZDCDigi,allocator<MyZDCDigi> >",3548,G__eventdict_654_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyZDCDigi,allocator<MyZDCDigi> >",3548,G__eventdict_654_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyZDCDigi,allocator<MyZDCDigi> >::size_type' 0 - n u 'MyZDCDigi' - 11 'MyZDCDigi()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyZDCDigi,allocator<MyZDCDigi> >",3548,G__eventdict_654_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyZDCDigi,allocator<MyZDCDigi> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyZDCDigi,allocator<MyZDCDigi> >",3548,G__eventdict_654_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator' 'vector<MyZDCDigi,allocator<MyZDCDigi> >::const_iterator' 10 - first u 'vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator' 'vector<MyZDCDigi,allocator<MyZDCDigi> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_654_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyZDCDigi,allocator<MyZDCDigi> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_654_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyZDCDigi,allocator<MyZDCDigi> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_654_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyZDCDigi), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_654_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyZDCDigi), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_654_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyZDCDigi' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_654_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyZDCDigi,allocator<MyZDCDigi> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_654_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator' - 0 - position u 'MyZDCDigi' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_654_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator' - 0 - position u 'vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator' 'vector<MyZDCDigi,allocator<MyZDCDigi> >::const_iterator' 10 - first "
"u 'vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator' 'vector<MyZDCDigi,allocator<MyZDCDigi> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_654_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator' - 0 - position k - 'vector<MyZDCDigi,allocator<MyZDCDigi> >::size_type' 0 - n "
"u 'MyZDCDigi' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_654_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_654_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_654_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator' - 0 - first u 'vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_654_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyZDCDigi,allocator<MyZDCDigi> >", 3674, G__eventdict_654_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR(void) {
   /* vector<MyZDCInfo,allocator<MyZDCInfo> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR));
   G__memfunc_setup("at",213,G__eventdict_658_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyZDCInfo), G__defined_typename("vector<MyZDCInfo,allocator<MyZDCInfo> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyZDCInfo,allocator<MyZDCInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_658_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyZDCInfo), G__defined_typename("vector<MyZDCInfo,allocator<MyZDCInfo> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyZDCInfo,allocator<MyZDCInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_658_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_658_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_658_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgRcLcLiteratorgR), G__defined_typename("vector<MyZDCInfo,allocator<MyZDCInfo> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_658_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgRcLcLiteratorgR), G__defined_typename("vector<MyZDCInfo,allocator<MyZDCInfo> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_658_0_7, 107, -1, G__defined_typename("vector<MyZDCInfo,allocator<MyZDCInfo> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_658_0_8, 107, -1, G__defined_typename("vector<MyZDCInfo,allocator<MyZDCInfo> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_658_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyZDCInfo,allocator<MyZDCInfo> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_658_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyZDCInfo,allocator<MyZDCInfo> >::size_type' 0 - sz u 'MyZDCInfo' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_658_0_11, 107, -1, G__defined_typename("vector<MyZDCInfo,allocator<MyZDCInfo> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_658_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_658_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyZDCInfo), G__defined_typename("vector<MyZDCInfo,allocator<MyZDCInfo> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyZDCInfo,allocator<MyZDCInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_658_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyZDCInfo), G__defined_typename("vector<MyZDCInfo,allocator<MyZDCInfo> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyZDCInfo,allocator<MyZDCInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyZDCInfo,allocator<MyZDCInfo> >",3578,G__eventdict_658_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyZDCInfo,allocator<MyZDCInfo> >",3578,G__eventdict_658_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyZDCInfo,allocator<MyZDCInfo> >::size_type' 0 - n u 'MyZDCInfo' - 11 'MyZDCInfo()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyZDCInfo,allocator<MyZDCInfo> >",3578,G__eventdict_658_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyZDCInfo,allocator<MyZDCInfo> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyZDCInfo,allocator<MyZDCInfo> >",3578,G__eventdict_658_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator' 'vector<MyZDCInfo,allocator<MyZDCInfo> >::const_iterator' 10 - first u 'vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator' 'vector<MyZDCInfo,allocator<MyZDCInfo> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_658_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyZDCInfo,allocator<MyZDCInfo> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_658_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyZDCInfo,allocator<MyZDCInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_658_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyZDCInfo), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_658_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyZDCInfo), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_658_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyZDCInfo' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_658_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyZDCInfo,allocator<MyZDCInfo> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_658_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator' - 0 - position u 'MyZDCInfo' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_658_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator' - 0 - position u 'vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator' 'vector<MyZDCInfo,allocator<MyZDCInfo> >::const_iterator' 10 - first "
"u 'vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator' 'vector<MyZDCInfo,allocator<MyZDCInfo> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_658_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator' - 0 - position k - 'vector<MyZDCInfo,allocator<MyZDCInfo> >::size_type' 0 - n "
"u 'MyZDCInfo' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_658_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_658_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_658_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator' - 0 - first u 'vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_658_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyZDCInfo,allocator<MyZDCInfo> >", 3704, G__eventdict_658_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR(void) {
   /* vector<MyFSCHit,allocator<MyFSCHit> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_662_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyFSCHit), G__defined_typename("vector<MyFSCHit,allocator<MyFSCHit> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyFSCHit,allocator<MyFSCHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_662_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyFSCHit), G__defined_typename("vector<MyFSCHit,allocator<MyFSCHit> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyFSCHit,allocator<MyFSCHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_662_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_662_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_662_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyFSCHit,allocator<MyFSCHit> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_662_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyFSCHit,allocator<MyFSCHit> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_662_0_7, 107, -1, G__defined_typename("vector<MyFSCHit,allocator<MyFSCHit> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_662_0_8, 107, -1, G__defined_typename("vector<MyFSCHit,allocator<MyFSCHit> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_662_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyFSCHit,allocator<MyFSCHit> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_662_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyFSCHit,allocator<MyFSCHit> >::size_type' 0 - sz u 'MyFSCHit' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_662_0_11, 107, -1, G__defined_typename("vector<MyFSCHit,allocator<MyFSCHit> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_662_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_662_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyFSCHit), G__defined_typename("vector<MyFSCHit,allocator<MyFSCHit> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyFSCHit,allocator<MyFSCHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_662_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyFSCHit), G__defined_typename("vector<MyFSCHit,allocator<MyFSCHit> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyFSCHit,allocator<MyFSCHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyFSCHit,allocator<MyFSCHit> >",3362,G__eventdict_662_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyFSCHit,allocator<MyFSCHit> >",3362,G__eventdict_662_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyFSCHit,allocator<MyFSCHit> >::size_type' 0 - n u 'MyFSCHit' - 11 'MyFSCHit()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyFSCHit,allocator<MyFSCHit> >",3362,G__eventdict_662_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyFSCHit,allocator<MyFSCHit> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyFSCHit,allocator<MyFSCHit> >",3362,G__eventdict_662_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyFSCHit,allocator<MyFSCHit> >::iterator' 'vector<MyFSCHit,allocator<MyFSCHit> >::const_iterator' 10 - first u 'vector<MyFSCHit,allocator<MyFSCHit> >::iterator' 'vector<MyFSCHit,allocator<MyFSCHit> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_662_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyFSCHit,allocator<MyFSCHit> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_662_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyFSCHit,allocator<MyFSCHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_662_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyFSCHit), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_662_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyFSCHit), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_662_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyFSCHit' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_662_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyFSCHit,allocator<MyFSCHit> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_662_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyFSCHit,allocator<MyFSCHit> >::iterator' - 0 - position u 'MyFSCHit' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_662_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyFSCHit,allocator<MyFSCHit> >::iterator' - 0 - position u 'vector<MyFSCHit,allocator<MyFSCHit> >::iterator' 'vector<MyFSCHit,allocator<MyFSCHit> >::const_iterator' 10 - first "
"u 'vector<MyFSCHit,allocator<MyFSCHit> >::iterator' 'vector<MyFSCHit,allocator<MyFSCHit> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_662_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyFSCHit,allocator<MyFSCHit> >::iterator' - 0 - position k - 'vector<MyFSCHit,allocator<MyFSCHit> >::size_type' 0 - n "
"u 'MyFSCHit' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_662_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_662_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyFSCHit,allocator<MyFSCHit> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_662_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyFSCHit,allocator<MyFSCHit> >::iterator' - 0 - first u 'vector<MyFSCHit,allocator<MyFSCHit> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_662_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyFSCHit,allocator<MyFSCHit> >", 3488, G__eventdict_662_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR(void) {
   /* vector<MyFSCDigi,allocator<MyFSCDigi> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR));
   G__memfunc_setup("at",213,G__eventdict_666_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyFSCDigi), G__defined_typename("vector<MyFSCDigi,allocator<MyFSCDigi> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyFSCDigi,allocator<MyFSCDigi> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_666_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyFSCDigi), G__defined_typename("vector<MyFSCDigi,allocator<MyFSCDigi> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyFSCDigi,allocator<MyFSCDigi> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_666_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_666_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_666_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgRcLcLiteratorgR), G__defined_typename("vector<MyFSCDigi,allocator<MyFSCDigi> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_666_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgRcLcLiteratorgR), G__defined_typename("vector<MyFSCDigi,allocator<MyFSCDigi> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_666_0_7, 107, -1, G__defined_typename("vector<MyFSCDigi,allocator<MyFSCDigi> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_666_0_8, 107, -1, G__defined_typename("vector<MyFSCDigi,allocator<MyFSCDigi> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_666_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyFSCDigi,allocator<MyFSCDigi> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_666_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyFSCDigi,allocator<MyFSCDigi> >::size_type' 0 - sz u 'MyFSCDigi' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_666_0_11, 107, -1, G__defined_typename("vector<MyFSCDigi,allocator<MyFSCDigi> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_666_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_666_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyFSCDigi), G__defined_typename("vector<MyFSCDigi,allocator<MyFSCDigi> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyFSCDigi,allocator<MyFSCDigi> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_666_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyFSCDigi), G__defined_typename("vector<MyFSCDigi,allocator<MyFSCDigi> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyFSCDigi,allocator<MyFSCDigi> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyFSCDigi,allocator<MyFSCDigi> >",3538,G__eventdict_666_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyFSCDigi,allocator<MyFSCDigi> >",3538,G__eventdict_666_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyFSCDigi,allocator<MyFSCDigi> >::size_type' 0 - n u 'MyFSCDigi' - 11 'MyFSCDigi()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyFSCDigi,allocator<MyFSCDigi> >",3538,G__eventdict_666_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyFSCDigi,allocator<MyFSCDigi> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyFSCDigi,allocator<MyFSCDigi> >",3538,G__eventdict_666_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator' 'vector<MyFSCDigi,allocator<MyFSCDigi> >::const_iterator' 10 - first u 'vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator' 'vector<MyFSCDigi,allocator<MyFSCDigi> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_666_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyFSCDigi,allocator<MyFSCDigi> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_666_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyFSCDigi,allocator<MyFSCDigi> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_666_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyFSCDigi), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_666_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyFSCDigi), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_666_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyFSCDigi' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_666_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyFSCDigi,allocator<MyFSCDigi> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_666_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator' - 0 - position u 'MyFSCDigi' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_666_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator' - 0 - position u 'vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator' 'vector<MyFSCDigi,allocator<MyFSCDigi> >::const_iterator' 10 - first "
"u 'vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator' 'vector<MyFSCDigi,allocator<MyFSCDigi> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_666_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator' - 0 - position k - 'vector<MyFSCDigi,allocator<MyFSCDigi> >::size_type' 0 - n "
"u 'MyFSCDigi' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_666_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_666_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_666_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator' - 0 - first u 'vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_666_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyFSCDigi,allocator<MyFSCDigi> >", 3664, G__eventdict_666_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR(void) {
   /* vector<MyFSCInfo,allocator<MyFSCInfo> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR));
   G__memfunc_setup("at",213,G__eventdict_670_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyFSCInfo), G__defined_typename("vector<MyFSCInfo,allocator<MyFSCInfo> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyFSCInfo,allocator<MyFSCInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__eventdict_670_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_MyFSCInfo), G__defined_typename("vector<MyFSCInfo,allocator<MyFSCInfo> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyFSCInfo,allocator<MyFSCInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_670_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_670_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_670_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgRcLcLiteratorgR), G__defined_typename("vector<MyFSCInfo,allocator<MyFSCInfo> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_670_0_6, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgRcLcLiteratorgR), G__defined_typename("vector<MyFSCInfo,allocator<MyFSCInfo> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_670_0_7, 107, -1, G__defined_typename("vector<MyFSCInfo,allocator<MyFSCInfo> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_670_0_8, 107, -1, G__defined_typename("vector<MyFSCInfo,allocator<MyFSCInfo> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_670_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyFSCInfo,allocator<MyFSCInfo> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_670_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyFSCInfo,allocator<MyFSCInfo> >::size_type' 0 - sz u 'MyFSCInfo' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_670_0_11, 107, -1, G__defined_typename("vector<MyFSCInfo,allocator<MyFSCInfo> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_670_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_670_0_13, 117, G__get_linked_tagnum(&G__eventdictLN_MyFSCInfo), G__defined_typename("vector<MyFSCInfo,allocator<MyFSCInfo> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MyFSCInfo,allocator<MyFSCInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_670_0_14, 117, G__get_linked_tagnum(&G__eventdictLN_MyFSCInfo), G__defined_typename("vector<MyFSCInfo,allocator<MyFSCInfo> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MyFSCInfo,allocator<MyFSCInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyFSCInfo,allocator<MyFSCInfo> >",3568,G__eventdict_670_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyFSCInfo,allocator<MyFSCInfo> >",3568,G__eventdict_670_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MyFSCInfo,allocator<MyFSCInfo> >::size_type' 0 - n u 'MyFSCInfo' - 11 'MyFSCInfo()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyFSCInfo,allocator<MyFSCInfo> >",3568,G__eventdict_670_0_17, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyFSCInfo,allocator<MyFSCInfo> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyFSCInfo,allocator<MyFSCInfo> >",3568,G__eventdict_670_0_18, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator' 'vector<MyFSCInfo,allocator<MyFSCInfo> >::const_iterator' 10 - first u 'vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator' 'vector<MyFSCInfo,allocator<MyFSCInfo> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_670_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyFSCInfo,allocator<MyFSCInfo> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_670_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MyFSCInfo,allocator<MyFSCInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_670_0_21, 117, G__get_linked_tagnum(&G__eventdictLN_MyFSCInfo), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_670_0_22, 117, G__get_linked_tagnum(&G__eventdictLN_MyFSCInfo), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_670_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyFSCInfo' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_670_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyFSCInfo,allocator<MyFSCInfo> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_670_0_25, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator' - 0 - position u 'MyFSCInfo' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_670_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator' - 0 - position u 'vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator' 'vector<MyFSCInfo,allocator<MyFSCInfo> >::const_iterator' 10 - first "
"u 'vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator' 'vector<MyFSCInfo,allocator<MyFSCInfo> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_670_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator' - 0 - position k - 'vector<MyFSCInfo,allocator<MyFSCInfo> >::size_type' 0 - n "
"u 'MyFSCInfo' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_670_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_670_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_670_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator' - 0 - first u 'vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_670_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyFSCInfo,allocator<MyFSCInfo> >", 3694, G__eventdict_670_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunceventdict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globaleventdict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {
}

static void G__cpp_setup_func30() {
}

static void G__cpp_setup_func31() {
}

static void G__cpp_setup_func32() {
}

static void G__cpp_setup_func33() {
}

static void G__cpp_setup_func34() {
}

static void G__cpp_setup_func35() {
}

static void G__cpp_setup_func36() {
}

static void G__cpp_setup_func37() {
}

static void G__cpp_setup_func38() {
}

static void G__cpp_setup_func39() {
}

static void G__cpp_setup_func40() {
}

static void G__cpp_setup_func41() {
}

static void G__cpp_setup_func42() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funceventdict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
  G__cpp_setup_func30();
  G__cpp_setup_func31();
  G__cpp_setup_func32();
  G__cpp_setup_func33();
  G__cpp_setup_func34();
  G__cpp_setup_func35();
  G__cpp_setup_func36();
  G__cpp_setup_func37();
  G__cpp_setup_func38();
  G__cpp_setup_func39();
  G__cpp_setup_func40();
  G__cpp_setup_func41();
  G__cpp_setup_func42();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__eventdictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyBeamSpot = { "MyBeamSpot" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyCastorDigi = { "MyCastorDigi" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyCastorJet = { "MyCastorJet" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyCastorRecHit = { "MyCastorRecHit" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyDiJet = { "MyDiJet" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyEvtId = { "MyEvtId" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyFwdGap = { "MyFwdGap" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TLorentzVector = { "TLorentzVector" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyPart = { "MyPart" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyMet = { "MyMet" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyGenMet = { "MyGenMet" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyGenKin = { "MyGenKin" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyGenPart = { "MyGenPart" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyGenJet = { "MyGenJet" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR = { "vector<MyGenPart,allocator<MyGenPart> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator = { "vector<MyGenPart,allocator<MyGenPart> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyGenPart,allocator<MyGenPart> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyPUSumInfo = { "MyPUSumInfo" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR = { "map<string,double,less<string>,allocator<pair<const string,double> > >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR = { "map<int,int,less<int>,allocator<pair<const int,int> > >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyHLTrig = { "MyHLTrig" , 99 , -1 };
G__linked_taginfo G__eventdictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR = { "map<string,bool,less<string>,allocator<pair<const string,bool> > >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_pairlEstringcOboolgR = { "pair<string,bool>" , 115 , -1 };
G__linked_taginfo G__eventdictLN_MyL1Trig = { "MyL1Trig" , 99 , -1 };
G__linked_taginfo G__eventdictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR = { "map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyL1TrigOld = { "MyL1TrigOld" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyMITEvtSel = { "MyMITEvtSel" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MySimVertex = { "MySimVertex" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyVertex = { "MyVertex" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyTracks = { "MyTracks" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyElectron = { "MyElectron" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyMuon = { "MyMuon" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyBaseJet = { "MyBaseJet" , 99 , -1 };
G__linked_taginfo G__eventdictLN_maplEstringcOMyBaseJetcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOMyBaseJetgRsPgRsPgR = { "map<string,MyBaseJet,less<string>,allocator<pair<const string,MyBaseJet> > >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyJet = { "MyJet" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyCaloJet = { "MyCaloJet" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyTrackJet = { "MyTrackJet" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR = { "vector<MyTracks,allocator<MyTracks> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiterator = { "vector<MyTracks,allocator<MyTracks> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyTracks,allocator<MyTracks> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyPFJet = { "MyPFJet" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyPFCand = { "MyPFCand" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyPFCandcLcLParticleType = { "MyPFCand::ParticleType" , 101 , -1 };
G__linked_taginfo G__eventdictLN_MyCaloTower = { "MyCaloTower" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyZDCHit = { "MyZDCHit" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyZDCDigi = { "MyZDCDigi" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyZDCInfo = { "MyZDCInfo" , 99 , -1 };
G__linked_taginfo G__eventdictLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR = { "map<int,double,less<int>,allocator<pair<const int,double> > >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyFSCHit = { "MyFSCHit" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyFSCDigi = { "MyFSCDigi" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyFSCInfo = { "MyFSCInfo" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR = { "vector<MyBeamSpot,allocator<MyBeamSpot> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgRcLcLiterator = { "vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyBeamSpot,allocator<MyBeamSpot> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR = { "vector<MyCastorDigi,allocator<MyCastorDigi> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiterator = { "vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyCastorDigi,allocator<MyCastorDigi> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR = { "vector<MyCastorJet,allocator<MyCastorJet> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiterator = { "vector<MyCastorJet,allocator<MyCastorJet> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyCastorJet,allocator<MyCastorJet> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR = { "vector<MyCastorRecHit,allocator<MyCastorRecHit> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiterator = { "vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyCastorRecHit,allocator<MyCastorRecHit> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR = { "vector<MyDiJet,allocator<MyDiJet> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgRcLcLiterator = { "vector<MyDiJet,allocator<MyDiJet> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyDiJetcOallocatorlEMyDiJetgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyDiJet,allocator<MyDiJet> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR = { "vector<MyEvtId,allocator<MyEvtId> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgRcLcLiterator = { "vector<MyEvtId,allocator<MyEvtId> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyEvtId,allocator<MyEvtId> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR = { "vector<MyFwdGap,allocator<MyFwdGap> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgRcLcLiterator = { "vector<MyFwdGap,allocator<MyFwdGap> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyFwdGap,allocator<MyFwdGap> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR = { "vector<MyGenKin,allocator<MyGenKin> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgRcLcLiterator = { "vector<MyGenKin,allocator<MyGenKin> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyGenKincOallocatorlEMyGenKingRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyGenKin,allocator<MyGenKin> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR = { "vector<MyPUSumInfo,allocator<MyPUSumInfo> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgRcLcLiterator = { "vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyPUSumInfo,allocator<MyPUSumInfo> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR = { "vector<MyMet,allocator<MyMet> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgRcLcLiterator = { "vector<MyMet,allocator<MyMet> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyMetcOallocatorlEMyMetgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyMet,allocator<MyMet> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR = { "vector<MyGenMet,allocator<MyGenMet> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgRcLcLiterator = { "vector<MyGenMet,allocator<MyGenMet> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyGenMetcOallocatorlEMyGenMetgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyGenMet,allocator<MyGenMet> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR = { "vector<MyGenJet,allocator<MyGenJet> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiterator = { "vector<MyGenJet,allocator<MyGenJet> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyGenJet,allocator<MyGenJet> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR = { "vector<MyHLTrig,allocator<MyHLTrig> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgRcLcLiterator = { "vector<MyHLTrig,allocator<MyHLTrig> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyHLTrig,allocator<MyHLTrig> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR = { "vector<MyL1Trig,allocator<MyL1Trig> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgRcLcLiterator = { "vector<MyL1Trig,allocator<MyL1Trig> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyL1Trig,allocator<MyL1Trig> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR = { "vector<MyL1TrigOld,allocator<MyL1TrigOld> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgRcLcLiterator = { "vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyL1TrigOld,allocator<MyL1TrigOld> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR = { "vector<MyMITEvtSel,allocator<MyMITEvtSel> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgRcLcLiterator = { "vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyMITEvtSel,allocator<MyMITEvtSel> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR = { "vector<MyPart,allocator<MyPart> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgRcLcLiterator = { "vector<MyPart,allocator<MyPart> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyPartcOallocatorlEMyPartgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyPart,allocator<MyPart> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR = { "vector<MySimVertex,allocator<MySimVertex> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgRcLcLiterator = { "vector<MySimVertex,allocator<MySimVertex> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMySimVertexcOallocatorlEMySimVertexgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MySimVertex,allocator<MySimVertex> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR = { "vector<MyVertex,allocator<MyVertex> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator = { "vector<MyVertex,allocator<MyVertex> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyVertex,allocator<MyVertex> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR = { "vector<MyElectron,allocator<MyElectron> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiterator = { "vector<MyElectron,allocator<MyElectron> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyElectron,allocator<MyElectron> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR = { "vector<MyMuon,allocator<MyMuon> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiterator = { "vector<MyMuon,allocator<MyMuon> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyMuon,allocator<MyMuon> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR = { "vector<MyBaseJet,allocator<MyBaseJet> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgRcLcLiterator = { "vector<MyBaseJet,allocator<MyBaseJet> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyBaseJet,allocator<MyBaseJet> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR = { "vector<MyJet,allocator<MyJet> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiterator = { "vector<MyJet,allocator<MyJet> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyJet,allocator<MyJet> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR = { "vector<MyCaloJet,allocator<MyCaloJet> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgRcLcLiterator = { "vector<MyCaloJet,allocator<MyCaloJet> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyCaloJet,allocator<MyCaloJet> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR = { "vector<MyTrackJet,allocator<MyTrackJet> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiterator = { "vector<MyTrackJet,allocator<MyTrackJet> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyTrackJet,allocator<MyTrackJet> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR = { "vector<MyPFJet,allocator<MyPFJet> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgRcLcLiterator = { "vector<MyPFJet,allocator<MyPFJet> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyPFJetcOallocatorlEMyPFJetgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyPFJet,allocator<MyPFJet> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR = { "vector<MyPFCand,allocator<MyPFCand> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgRcLcLiterator = { "vector<MyPFCand,allocator<MyPFCand> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyPFCandcOallocatorlEMyPFCandgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyPFCand,allocator<MyPFCand> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR = { "vector<MyCaloTower,allocator<MyCaloTower> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiterator = { "vector<MyCaloTower,allocator<MyCaloTower> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyCaloTower,allocator<MyCaloTower> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR = { "vector<MyZDCHit,allocator<MyZDCHit> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgRcLcLiterator = { "vector<MyZDCHit,allocator<MyZDCHit> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyZDCHit,allocator<MyZDCHit> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR = { "vector<MyZDCDigi,allocator<MyZDCDigi> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgRcLcLiterator = { "vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyZDCDigi,allocator<MyZDCDigi> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR = { "vector<MyZDCInfo,allocator<MyZDCInfo> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgRcLcLiterator = { "vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyZDCInfo,allocator<MyZDCInfo> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR = { "vector<MyFSCHit,allocator<MyFSCHit> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgRcLcLiterator = { "vector<MyFSCHit,allocator<MyFSCHit> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyFSCHit,allocator<MyFSCHit> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR = { "vector<MyFSCDigi,allocator<MyFSCDigi> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgRcLcLiterator = { "vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyFSCDigi,allocator<MyFSCDigi> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR = { "vector<MyFSCInfo,allocator<MyFSCInfo> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgRcLcLiterator = { "vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyFSCInfo,allocator<MyFSCInfo> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableeventdict() {
  G__eventdictLN_TClass.tagnum = -1 ;
  G__eventdictLN_TBuffer.tagnum = -1 ;
  G__eventdictLN_TMemberInspector.tagnum = -1 ;
  G__eventdictLN_TObject.tagnum = -1 ;
  G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__eventdictLN_string.tagnum = -1 ;
  G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_MyBeamSpot.tagnum = -1 ;
  G__eventdictLN_MyCastorDigi.tagnum = -1 ;
  G__eventdictLN_MyCastorJet.tagnum = -1 ;
  G__eventdictLN_MyCastorRecHit.tagnum = -1 ;
  G__eventdictLN_MyDiJet.tagnum = -1 ;
  G__eventdictLN_MyEvtId.tagnum = -1 ;
  G__eventdictLN_MyFwdGap.tagnum = -1 ;
  G__eventdictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__eventdictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__eventdictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__eventdictLN_TLorentzVector.tagnum = -1 ;
  G__eventdictLN_MyPart.tagnum = -1 ;
  G__eventdictLN_MyMet.tagnum = -1 ;
  G__eventdictLN_MyGenMet.tagnum = -1 ;
  G__eventdictLN_MyGenKin.tagnum = -1 ;
  G__eventdictLN_MyGenPart.tagnum = -1 ;
  G__eventdictLN_MyGenJet.tagnum = -1 ;
  G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_MyPUSumInfo.tagnum = -1 ;
  G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR.tagnum = -1 ;
  G__eventdictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__eventdictLN_MyHLTrig.tagnum = -1 ;
  G__eventdictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR.tagnum = -1 ;
  G__eventdictLN_pairlEstringcOboolgR.tagnum = -1 ;
  G__eventdictLN_MyL1Trig.tagnum = -1 ;
  G__eventdictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR.tagnum = -1 ;
  G__eventdictLN_MyL1TrigOld.tagnum = -1 ;
  G__eventdictLN_MyMITEvtSel.tagnum = -1 ;
  G__eventdictLN_MySimVertex.tagnum = -1 ;
  G__eventdictLN_MyVertex.tagnum = -1 ;
  G__eventdictLN_MyTracks.tagnum = -1 ;
  G__eventdictLN_MyElectron.tagnum = -1 ;
  G__eventdictLN_MyMuon.tagnum = -1 ;
  G__eventdictLN_MyBaseJet.tagnum = -1 ;
  G__eventdictLN_maplEstringcOMyBaseJetcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOMyBaseJetgRsPgRsPgR.tagnum = -1 ;
  G__eventdictLN_MyJet.tagnum = -1 ;
  G__eventdictLN_MyCaloJet.tagnum = -1 ;
  G__eventdictLN_MyTrackJet.tagnum = -1 ;
  G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_MyPFJet.tagnum = -1 ;
  G__eventdictLN_MyPFCand.tagnum = -1 ;
  G__eventdictLN_MyPFCandcLcLParticleType.tagnum = -1 ;
  G__eventdictLN_MyCaloTower.tagnum = -1 ;
  G__eventdictLN_MyZDCHit.tagnum = -1 ;
  G__eventdictLN_MyZDCDigi.tagnum = -1 ;
  G__eventdictLN_MyZDCInfo.tagnum = -1 ;
  G__eventdictLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR.tagnum = -1 ;
  G__eventdictLN_MyFSCHit.tagnum = -1 ;
  G__eventdictLN_MyFSCDigi.tagnum = -1 ;
  G__eventdictLN_MyFSCInfo.tagnum = -1 ;
  G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyDiJetcOallocatorlEMyDiJetgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyGenKincOallocatorlEMyGenKingRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyMetcOallocatorlEMyMetgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyGenMetcOallocatorlEMyGenMetgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyPartcOallocatorlEMyPartgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMySimVertexcOallocatorlEMySimVertexgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyPFJetcOallocatorlEMyPFJetgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyPFCandcOallocatorlEMyPFCandgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableeventdict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__eventdictLN_TClass);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TObject);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_string);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyBeamSpot),sizeof(MyBeamSpot),-1,292096,(char*)NULL,G__setup_memvarMyBeamSpot,G__setup_memfuncMyBeamSpot);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyCastorDigi),sizeof(MyCastorDigi),-1,292096,(char*)NULL,G__setup_memvarMyCastorDigi,G__setup_memfuncMyCastorDigi);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyCastorJet),sizeof(MyCastorJet),-1,292096,(char*)NULL,G__setup_memvarMyCastorJet,G__setup_memfuncMyCastorJet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyCastorRecHit),sizeof(MyCastorRecHit),-1,292096,(char*)NULL,G__setup_memvarMyCastorRecHit,G__setup_memfuncMyCastorRecHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyDiJet),sizeof(MyDiJet),-1,292096,(char*)NULL,G__setup_memvarMyDiJet,G__setup_memfuncMyDiJet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyEvtId),sizeof(MyEvtId),-1,292096,(char*)NULL,G__setup_memvarMyEvtId,G__setup_memfuncMyEvtId);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyFwdGap),sizeof(MyFwdGap),-1,292096,(char*)NULL,G__setup_memvarMyFwdGap,G__setup_memfuncMyFwdGap);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TLorentzVector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyPart),sizeof(MyPart),-1,324864,(char*)NULL,G__setup_memvarMyPart,G__setup_memfuncMyPart);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyMet),sizeof(MyMet),-1,324864,(char*)NULL,G__setup_memvarMyMet,G__setup_memfuncMyMet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyGenMet),sizeof(MyGenMet),-1,292096,(char*)NULL,G__setup_memvarMyGenMet,G__setup_memfuncMyGenMet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyGenKin),sizeof(MyGenKin),-1,292096,(char*)NULL,G__setup_memvarMyGenKin,G__setup_memfuncMyGenKin);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyGenPart),sizeof(MyGenPart),-1,324864,(char*)NULL,G__setup_memvarMyGenPart,G__setup_memfuncMyGenPart);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyGenJet),sizeof(MyGenJet),-1,324864,(char*)NULL,G__setup_memvarMyGenJet,G__setup_memfuncMyGenJet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR),sizeof(vector<MyGenPart,allocator<MyGenPart> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR,G__setup_memfuncvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyPUSumInfo),sizeof(MyPUSumInfo),-1,292096,(char*)NULL,G__setup_memvarMyPUSumInfo,G__setup_memfuncMyPUSumInfo);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyHLTrig),sizeof(MyHLTrig),-1,292096,(char*)NULL,G__setup_memvarMyHLTrig,G__setup_memfuncMyHLTrig);
   G__get_linked_tagnum_fwd(&G__eventdictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_pairlEstringcOboolgR),sizeof(pair<string,bool>),-1,297216,(char*)NULL,G__setup_memvarpairlEstringcOboolgR,G__setup_memfuncpairlEstringcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyL1Trig),sizeof(MyL1Trig),-1,292096,(char*)NULL,G__setup_memvarMyL1Trig,G__setup_memfuncMyL1Trig);
   G__get_linked_tagnum_fwd(&G__eventdictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyL1TrigOld),sizeof(MyL1TrigOld),-1,292096,(char*)NULL,G__setup_memvarMyL1TrigOld,G__setup_memfuncMyL1TrigOld);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyMITEvtSel),sizeof(MyMITEvtSel),-1,292096,(char*)NULL,G__setup_memvarMyMITEvtSel,G__setup_memfuncMyMITEvtSel);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MySimVertex),sizeof(MySimVertex),-1,292096,(char*)NULL,G__setup_memvarMySimVertex,G__setup_memfuncMySimVertex);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyVertex),sizeof(MyVertex),-1,292096,(char*)NULL,G__setup_memvarMyVertex,G__setup_memfuncMyVertex);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyTracks),sizeof(MyTracks),-1,324864,(char*)NULL,G__setup_memvarMyTracks,G__setup_memfuncMyTracks);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyElectron),sizeof(MyElectron),-1,324864,(char*)NULL,G__setup_memvarMyElectron,G__setup_memfuncMyElectron);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyMuon),sizeof(MyMuon),-1,324864,(char*)NULL,G__setup_memvarMyMuon,G__setup_memfuncMyMuon);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyBaseJet),sizeof(MyBaseJet),-1,324864,(char*)NULL,G__setup_memvarMyBaseJet,G__setup_memfuncMyBaseJet);
   G__get_linked_tagnum_fwd(&G__eventdictLN_maplEstringcOMyBaseJetcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOMyBaseJetgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyJet),sizeof(MyJet),-1,292096,(char*)NULL,G__setup_memvarMyJet,G__setup_memfuncMyJet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyCaloJet),sizeof(MyCaloJet),-1,292096,(char*)NULL,G__setup_memvarMyCaloJet,G__setup_memfuncMyCaloJet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyTrackJet),sizeof(MyTrackJet),-1,324864,(char*)NULL,G__setup_memvarMyTrackJet,G__setup_memfuncMyTrackJet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR),sizeof(vector<MyTracks,allocator<MyTracks> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyTrackscOallocatorlEMyTracksgRsPgR,G__setup_memfuncvectorlEMyTrackscOallocatorlEMyTracksgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyPFJet),sizeof(MyPFJet),-1,292096,(char*)NULL,G__setup_memvarMyPFJet,G__setup_memfuncMyPFJet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyPFCand),sizeof(MyPFCand),-1,324864,(char*)NULL,G__setup_memvarMyPFCand,G__setup_memfuncMyPFCand);
   G__get_linked_tagnum_fwd(&G__eventdictLN_MyPFCandcLcLParticleType);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyCaloTower),sizeof(MyCaloTower),-1,324864,(char*)NULL,G__setup_memvarMyCaloTower,G__setup_memfuncMyCaloTower);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyZDCHit),sizeof(MyZDCHit),-1,292096,(char*)NULL,G__setup_memvarMyZDCHit,G__setup_memfuncMyZDCHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyZDCDigi),sizeof(MyZDCDigi),-1,292096,(char*)NULL,G__setup_memvarMyZDCDigi,G__setup_memfuncMyZDCDigi);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyZDCInfo),sizeof(MyZDCInfo),-1,292096,(char*)NULL,G__setup_memvarMyZDCInfo,G__setup_memfuncMyZDCInfo);
   G__get_linked_tagnum_fwd(&G__eventdictLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyFSCHit),sizeof(MyFSCHit),-1,292096,(char*)NULL,G__setup_memvarMyFSCHit,G__setup_memfuncMyFSCHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyFSCDigi),sizeof(MyFSCDigi),-1,292096,(char*)NULL,G__setup_memvarMyFSCDigi,G__setup_memfuncMyFSCDigi);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_MyFSCInfo),sizeof(MyFSCInfo),-1,292096,(char*)NULL,G__setup_memvarMyFSCInfo,G__setup_memfuncMyFSCInfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR),sizeof(vector<MyBeamSpot,allocator<MyBeamSpot> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR,G__setup_memfuncvectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyBeamSpotcOallocatorlEMyBeamSpotgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR),sizeof(vector<MyCastorDigi,allocator<MyCastorDigi> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR,G__setup_memfuncvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorDigicOallocatorlEMyCastorDigigRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR),sizeof(vector<MyCastorJet,allocator<MyCastorJet> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR,G__setup_memfuncvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorJetcOallocatorlEMyCastorJetgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR),sizeof(vector<MyCastorRecHit,allocator<MyCastorRecHit> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR,G__setup_memfuncvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyCastorRecHitcOallocatorlEMyCastorRecHitgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR),sizeof(vector<MyDiJet,allocator<MyDiJet> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR,G__setup_memfuncvectorlEMyDiJetcOallocatorlEMyDiJetgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyDiJetcOallocatorlEMyDiJetgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyDiJetcOallocatorlEMyDiJetgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR),sizeof(vector<MyEvtId,allocator<MyEvtId> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR,G__setup_memfuncvectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyEvtIdcOallocatorlEMyEvtIdgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR),sizeof(vector<MyFwdGap,allocator<MyFwdGap> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR,G__setup_memfuncvectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyFwdGapcOallocatorlEMyFwdGapgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgR),sizeof(vector<MyGenKin,allocator<MyGenKin> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyGenKincOallocatorlEMyGenKingRsPgR,G__setup_memfuncvectorlEMyGenKincOallocatorlEMyGenKingRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyGenKincOallocatorlEMyGenKingRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenKincOallocatorlEMyGenKingRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR),sizeof(vector<MyPUSumInfo,allocator<MyPUSumInfo> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR,G__setup_memfuncvectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyPUSumInfocOallocatorlEMyPUSumInfogRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgR),sizeof(vector<MyMet,allocator<MyMet> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyMetcOallocatorlEMyMetgRsPgR,G__setup_memfuncvectorlEMyMetcOallocatorlEMyMetgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyMetcOallocatorlEMyMetgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyMetcOallocatorlEMyMetgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR),sizeof(vector<MyGenMet,allocator<MyGenMet> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR,G__setup_memfuncvectorlEMyGenMetcOallocatorlEMyGenMetgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyGenMetcOallocatorlEMyGenMetgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenMetcOallocatorlEMyGenMetgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR),sizeof(vector<MyGenJet,allocator<MyGenJet> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR,G__setup_memfuncvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR),sizeof(vector<MyHLTrig,allocator<MyHLTrig> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR,G__setup_memfuncvectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyHLTrigcOallocatorlEMyHLTriggRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR),sizeof(vector<MyL1Trig,allocator<MyL1Trig> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR,G__setup_memfuncvectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyL1TrigcOallocatorlEMyL1TriggRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR),sizeof(vector<MyL1TrigOld,allocator<MyL1TrigOld> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR,G__setup_memfuncvectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyL1TrigOldcOallocatorlEMyL1TrigOldgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR),sizeof(vector<MyMITEvtSel,allocator<MyMITEvtSel> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR,G__setup_memfuncvectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyMITEvtSelcOallocatorlEMyMITEvtSelgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgR),sizeof(vector<MyPart,allocator<MyPart> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyPartcOallocatorlEMyPartgRsPgR,G__setup_memfuncvectorlEMyPartcOallocatorlEMyPartgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyPartcOallocatorlEMyPartgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyPartcOallocatorlEMyPartgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR),sizeof(vector<MySimVertex,allocator<MySimVertex> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR,G__setup_memfuncvectorlEMySimVertexcOallocatorlEMySimVertexgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMySimVertexcOallocatorlEMySimVertexgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMySimVertexcOallocatorlEMySimVertexgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR),sizeof(vector<MyVertex,allocator<MyVertex> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyVertexcOallocatorlEMyVertexgRsPgR,G__setup_memfuncvectorlEMyVertexcOallocatorlEMyVertexgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR),sizeof(vector<MyElectron,allocator<MyElectron> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyElectroncOallocatorlEMyElectrongRsPgR,G__setup_memfuncvectorlEMyElectroncOallocatorlEMyElectrongRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR),sizeof(vector<MyMuon,allocator<MyMuon> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyMuoncOallocatorlEMyMuongRsPgR,G__setup_memfuncvectorlEMyMuoncOallocatorlEMyMuongRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR),sizeof(vector<MyBaseJet,allocator<MyBaseJet> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR,G__setup_memfuncvectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyBaseJetcOallocatorlEMyBaseJetgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgR),sizeof(vector<MyJet,allocator<MyJet> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyJetcOallocatorlEMyJetgRsPgR,G__setup_memfuncvectorlEMyJetcOallocatorlEMyJetgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyJetcOallocatorlEMyJetgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR),sizeof(vector<MyCaloJet,allocator<MyCaloJet> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR,G__setup_memfuncvectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyCaloJetcOallocatorlEMyCaloJetgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR),sizeof(vector<MyTrackJet,allocator<MyTrackJet> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR,G__setup_memfuncvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackJetcOallocatorlEMyTrackJetgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR),sizeof(vector<MyPFJet,allocator<MyPFJet> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR,G__setup_memfuncvectorlEMyPFJetcOallocatorlEMyPFJetgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyPFJetcOallocatorlEMyPFJetgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyPFJetcOallocatorlEMyPFJetgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR),sizeof(vector<MyPFCand,allocator<MyPFCand> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR,G__setup_memfuncvectorlEMyPFCandcOallocatorlEMyPFCandgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyPFCandcOallocatorlEMyPFCandgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyPFCandcOallocatorlEMyPFCandgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR),sizeof(vector<MyCaloTower,allocator<MyCaloTower> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR,G__setup_memfuncvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyCaloTowercOallocatorlEMyCaloTowergRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR),sizeof(vector<MyZDCHit,allocator<MyZDCHit> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR,G__setup_memfuncvectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyZDCHitcOallocatorlEMyZDCHitgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR),sizeof(vector<MyZDCDigi,allocator<MyZDCDigi> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR,G__setup_memfuncvectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyZDCDigicOallocatorlEMyZDCDigigRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR),sizeof(vector<MyZDCInfo,allocator<MyZDCInfo> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR,G__setup_memfuncvectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyZDCInfocOallocatorlEMyZDCInfogRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR),sizeof(vector<MyFSCHit,allocator<MyFSCHit> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR,G__setup_memfuncvectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyFSCHitcOallocatorlEMyFSCHitgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR),sizeof(vector<MyFSCDigi,allocator<MyFSCDigi> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR,G__setup_memfuncvectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyFSCDigicOallocatorlEMyFSCDigigRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR),sizeof(vector<MyFSCInfo,allocator<MyFSCInfo> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR,G__setup_memfuncvectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyFSCInfocOallocatorlEMyFSCInfogRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupeventdict(void) {
  G__check_setup_version(30051515,"G__cpp_setupeventdict()");
  G__set_cpp_environmenteventdict();
  G__cpp_setup_tagtableeventdict();

  G__cpp_setup_inheritanceeventdict();

  G__cpp_setup_typetableeventdict();

  G__cpp_setup_memvareventdict();

  G__cpp_setup_memfunceventdict();
  G__cpp_setup_globaleventdict();
  G__cpp_setup_funceventdict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunceventdict();
  return;
}
class G__cpp_setup_initeventdict {
  public:
    G__cpp_setup_initeventdict() { G__add_setup_func("eventdict",(G__incsetup)(&G__cpp_setupeventdict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initeventdict() { G__remove_setup_func("eventdict"); }
};
G__cpp_setup_initeventdict G__cpp_setup_initializereventdict;

