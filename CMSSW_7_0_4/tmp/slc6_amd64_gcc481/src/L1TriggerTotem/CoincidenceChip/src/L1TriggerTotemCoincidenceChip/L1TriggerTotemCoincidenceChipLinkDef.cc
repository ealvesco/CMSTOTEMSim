#include <vector>

#include "TH1D.h"
#include "TH2D.h"



#include "L1TriggerTotem/CoincidenceChip/interface/PreTriggerStat.h"
#include "L1TriggerTotem/CoincidenceChip/interface/TriggerStat.h"
#include "L1TriggerTotem/CoincidenceChip/interface/TriggerStat2.h"
#include "L1TriggerTotem/CoincidenceChip/interface/TriggerStatCollection.h"
#include "L1TriggerTotem/CoincidenceChip/interface/TwoHalfPot.h"
#include "L1TriggerTotem/CoincidenceChip/interface/RawVsSimuPotComparator.h"
#include "L1TriggerTotem/CoincidenceChip/interface/PotCollection.h"
#include "L1TriggerTotem/CoincidenceChip/interface/RPTriggerAnalyzerInfoCollector.h"



// #include <boost/ptr_container/ptr_vector.hpp>

#ifdef __CINT__
#ifndef L1TriggerTotemCoincidenceChip_LINKDEF
#define L1TriggerTotemCoincidenceChip_LINKDEF


#pragma link off all globals;
#pragma link off all classes;
#pragma link off all functions;

#pragma link C++ nestedclasses;
#pragma link C++ nestedtypedefs; 
// #pragma link C++ class std::vector<double>+;
// #pragma link C++ class std::vector< std::vector<double> >+;
// #pragma link C++ class std::vector< std::vector< std::vector<double> > >+;
// #pragma link C++ class std::vector< std::vector< std::vector< std::vector<double> > > >+;
#pragma link C++ enum ERawOrSimu+;
#pragma link C++ enum EDetOrientation+;
#pragma link C++ class PreTriggerStat+;
#pragma link C++ class TriggerStat+;
#pragma link C++ class TriggerStat2+;
#pragma link C++ class std::vector< TriggerStat*>+;
#pragma link C++ class TriggerStatCollection<TriggerStat>+;
#pragma link C++ class std::vector<TriggerStat2*>+;
#pragma link C++ class TriggerStatCollection<TriggerStat2>+;
#pragma link C++ class TwoHalfPot+;
#pragma link C++ class std::vector<TH1D*>+;
#pragma link C++ class std::vector<TH2D*>+;

#pragma link C++ class RawVsSimuPotComparator+;
// #pragma link C++ class boost::ptr_vector<RawVsSimuPotComparator>+;
#pragma link C++ class std::vector<RawVsSimuPotComparator*>+;
#pragma link C++ class PotCollection+;
#pragma link C++ class RPTriggerAnalyzerInfoCollector+;

#endif
#endif
//
// File generated by /afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/bin/rootcint at Mon Jul 11 23:34:43 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME tmpdIslc6_amd64_gcc481dIsrcdIL1TriggerTotemdICoincidenceChipdIsrcdIL1TriggerTotemCoincidenceChipdIL1TriggerTotemCoincidenceChipLinkDef
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "L1TriggerTotemCoincidenceChipLinkDef.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::TwoHalfPot TwoHalfPot;
      #else
      class TwoHalfPot  {
         public:
         //friend XX;
         ::ERawOrSimu fType; //
         ::TriggerStatCollection< ::TriggerStat > fConditionalTriggerStat; //
         :: edm::ParameterSet* fConfig; //!
         unsigned int verbosity; //
         ::HalfPot* fOddHalfPot; //!
         ::HalfPot* fEvenHalfPot; //!
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::TriggerStatCollection< ::TriggerStat > TriggerStatCollectionlETriggerStatgR;
      #else
      class TriggerStatCollectionlETriggerStatgR  :  public ::TObject,  public vector< ::TriggerStat*, allocator< ::TriggerStat* >  > {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~TriggerStatCollectionlETriggerStatgR() throw() {};
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::TriggerStatCollection< ::TriggerStat2 > TriggerStatCollectionlETriggerStat2gR;
      #else
      class TriggerStatCollectionlETriggerStat2gR  :  public ::TObject,  public vector< ::TriggerStat2*, allocator< ::TriggerStat2* >  > {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~TriggerStatCollectionlETriggerStat2gR() throw() {};
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void PreTriggerStat_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_PreTriggerStat(void *p = 0);
   static void *newArray_PreTriggerStat(Long_t size, void *p);
   static void delete_PreTriggerStat(void *p);
   static void deleteArray_PreTriggerStat(void *p);
   static void destruct_PreTriggerStat(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::PreTriggerStat*)
   {
      ::PreTriggerStat *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::PreTriggerStat >(0);
      static ::ROOT::TGenericClassInfo 
         instance("PreTriggerStat", ::PreTriggerStat::Class_Version(), "/afs/cern.ch/user/e/eliza/private/TOTEM_JPSI/RPSIM/CMSSW_7_0_4/src/L1TriggerTotem/CoincidenceChip/interface/PreTriggerStat.h", 12,
                  typeid(::PreTriggerStat), DefineBehavior(ptr, ptr),
                  &::PreTriggerStat::Dictionary, isa_proxy, 4,
                  sizeof(::PreTriggerStat) );
      instance.SetNew(&new_PreTriggerStat);
      instance.SetNewArray(&newArray_PreTriggerStat);
      instance.SetDelete(&delete_PreTriggerStat);
      instance.SetDeleteArray(&deleteArray_PreTriggerStat);
      instance.SetDestructor(&destruct_PreTriggerStat);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::PreTriggerStat*)
   {
      return GenerateInitInstanceLocal((::PreTriggerStat*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::PreTriggerStat*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TriggerStat_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TriggerStat(void *p = 0);
   static void *newArray_TriggerStat(Long_t size, void *p);
   static void delete_TriggerStat(void *p);
   static void deleteArray_TriggerStat(void *p);
   static void destruct_TriggerStat(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TriggerStat*)
   {
      ::TriggerStat *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TriggerStat >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TriggerStat", ::TriggerStat::Class_Version(), "/afs/cern.ch/user/e/eliza/private/TOTEM_JPSI/RPSIM/CMSSW_7_0_4/src/L1TriggerTotem/CoincidenceChip/interface/TriggerStat.h", 7,
                  typeid(::TriggerStat), DefineBehavior(ptr, ptr),
                  &::TriggerStat::Dictionary, isa_proxy, 4,
                  sizeof(::TriggerStat) );
      instance.SetNew(&new_TriggerStat);
      instance.SetNewArray(&newArray_TriggerStat);
      instance.SetDelete(&delete_TriggerStat);
      instance.SetDeleteArray(&deleteArray_TriggerStat);
      instance.SetDestructor(&destruct_TriggerStat);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TriggerStat*)
   {
      return GenerateInitInstanceLocal((::TriggerStat*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TriggerStat*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TriggerStat2_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TriggerStat2(void *p = 0);
   static void *newArray_TriggerStat2(Long_t size, void *p);
   static void delete_TriggerStat2(void *p);
   static void deleteArray_TriggerStat2(void *p);
   static void destruct_TriggerStat2(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TriggerStat2*)
   {
      ::TriggerStat2 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TriggerStat2 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TriggerStat2", ::TriggerStat2::Class_Version(), "/afs/cern.ch/user/e/eliza/private/TOTEM_JPSI/RPSIM/CMSSW_7_0_4/src/L1TriggerTotem/CoincidenceChip/interface/TriggerStat2.h", 7,
                  typeid(::TriggerStat2), DefineBehavior(ptr, ptr),
                  &::TriggerStat2::Dictionary, isa_proxy, 4,
                  sizeof(::TriggerStat2) );
      instance.SetNew(&new_TriggerStat2);
      instance.SetNewArray(&newArray_TriggerStat2);
      instance.SetDelete(&delete_TriggerStat2);
      instance.SetDeleteArray(&deleteArray_TriggerStat2);
      instance.SetDestructor(&destruct_TriggerStat2);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TriggerStat2*)
   {
      return GenerateInitInstanceLocal((::TriggerStat2*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TriggerStat2*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TwoHalfPot_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void TwoHalfPot_Dictionary();
   static void delete_TwoHalfPot(void *p);
   static void deleteArray_TwoHalfPot(void *p);
   static void destruct_TwoHalfPot(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TwoHalfPot*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::TwoHalfPot) == sizeof(::ROOT::Shadow::TwoHalfPot));
      ::TwoHalfPot *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::TwoHalfPot),0);
      static ::ROOT::TGenericClassInfo 
         instance("TwoHalfPot", "/afs/cern.ch/user/e/eliza/private/TOTEM_JPSI/RPSIM/CMSSW_7_0_4/src/L1TriggerTotem/CoincidenceChip/interface/TwoHalfPot.h", 32,
                  typeid(::TwoHalfPot), DefineBehavior(ptr, ptr),
                  &TwoHalfPot_ShowMembers, &TwoHalfPot_Dictionary, isa_proxy, 4,
                  sizeof(::TwoHalfPot) );
      instance.SetDelete(&delete_TwoHalfPot);
      instance.SetDeleteArray(&deleteArray_TwoHalfPot);
      instance.SetDestructor(&destruct_TwoHalfPot);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TwoHalfPot*)
   {
      return GenerateInitInstanceLocal((::TwoHalfPot*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TwoHalfPot*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void TwoHalfPot_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::TwoHalfPot*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void TriggerStatCollectionlETriggerStatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void TriggerStatCollectionlETriggerStatgR_Dictionary();
   static void *new_TriggerStatCollectionlETriggerStatgR(void *p = 0);
   static void *newArray_TriggerStatCollectionlETriggerStatgR(Long_t size, void *p);
   static void delete_TriggerStatCollectionlETriggerStatgR(void *p);
   static void deleteArray_TriggerStatCollectionlETriggerStatgR(void *p);
   static void destruct_TriggerStatCollectionlETriggerStatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TriggerStatCollection<TriggerStat>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::TriggerStatCollection<TriggerStat>) == sizeof(::ROOT::Shadow::TriggerStatCollectionlETriggerStatgR));
      ::TriggerStatCollection<TriggerStat> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TriggerStatCollection<TriggerStat> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TriggerStatCollection<TriggerStat>", ::TriggerStatCollection<TriggerStat>::Class_Version(), "/afs/cern.ch/user/e/eliza/private/TOTEM_JPSI/RPSIM/CMSSW_7_0_4/src/L1TriggerTotem/CoincidenceChip/interface/TriggerStatCollection.h", 25,
                  typeid(::TriggerStatCollection<TriggerStat>), DefineBehavior(ptr, ptr),
                  &TriggerStatCollectionlETriggerStatgR_Dictionary, isa_proxy, 4,
                  sizeof(::TriggerStatCollection<TriggerStat>) );
      instance.SetNew(&new_TriggerStatCollectionlETriggerStatgR);
      instance.SetNewArray(&newArray_TriggerStatCollectionlETriggerStatgR);
      instance.SetDelete(&delete_TriggerStatCollectionlETriggerStatgR);
      instance.SetDeleteArray(&deleteArray_TriggerStatCollectionlETriggerStatgR);
      instance.SetDestructor(&destruct_TriggerStatCollectionlETriggerStatgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TriggerStatCollection<TriggerStat>*)
   {
      return GenerateInitInstanceLocal((::TriggerStatCollection<TriggerStat>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TriggerStatCollection<TriggerStat>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void TriggerStatCollectionlETriggerStatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::TriggerStatCollection<TriggerStat>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void RawVsSimuPotComparator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_RawVsSimuPotComparator(void *p = 0);
   static void *newArray_RawVsSimuPotComparator(Long_t size, void *p);
   static void delete_RawVsSimuPotComparator(void *p);
   static void deleteArray_RawVsSimuPotComparator(void *p);
   static void destruct_RawVsSimuPotComparator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::RawVsSimuPotComparator*)
   {
      ::RawVsSimuPotComparator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::RawVsSimuPotComparator >(0);
      static ::ROOT::TGenericClassInfo 
         instance("RawVsSimuPotComparator", ::RawVsSimuPotComparator::Class_Version(), "/afs/cern.ch/user/e/eliza/private/TOTEM_JPSI/RPSIM/CMSSW_7_0_4/src/L1TriggerTotem/CoincidenceChip/interface/RawVsSimuPotComparator.h", 36,
                  typeid(::RawVsSimuPotComparator), DefineBehavior(ptr, ptr),
                  &::RawVsSimuPotComparator::Dictionary, isa_proxy, 4,
                  sizeof(::RawVsSimuPotComparator) );
      instance.SetNew(&new_RawVsSimuPotComparator);
      instance.SetNewArray(&newArray_RawVsSimuPotComparator);
      instance.SetDelete(&delete_RawVsSimuPotComparator);
      instance.SetDeleteArray(&deleteArray_RawVsSimuPotComparator);
      instance.SetDestructor(&destruct_RawVsSimuPotComparator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::RawVsSimuPotComparator*)
   {
      return GenerateInitInstanceLocal((::RawVsSimuPotComparator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RawVsSimuPotComparator*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TriggerStatCollectionlETriggerStat2gR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void TriggerStatCollectionlETriggerStat2gR_Dictionary();
   static void *new_TriggerStatCollectionlETriggerStat2gR(void *p = 0);
   static void *newArray_TriggerStatCollectionlETriggerStat2gR(Long_t size, void *p);
   static void delete_TriggerStatCollectionlETriggerStat2gR(void *p);
   static void deleteArray_TriggerStatCollectionlETriggerStat2gR(void *p);
   static void destruct_TriggerStatCollectionlETriggerStat2gR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TriggerStatCollection<TriggerStat2>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::TriggerStatCollection<TriggerStat2>) == sizeof(::ROOT::Shadow::TriggerStatCollectionlETriggerStat2gR));
      ::TriggerStatCollection<TriggerStat2> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TriggerStatCollection<TriggerStat2> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TriggerStatCollection<TriggerStat2>", ::TriggerStatCollection<TriggerStat2>::Class_Version(), "/afs/cern.ch/user/e/eliza/private/TOTEM_JPSI/RPSIM/CMSSW_7_0_4/src/L1TriggerTotem/CoincidenceChip/interface/TriggerStatCollection.h", 25,
                  typeid(::TriggerStatCollection<TriggerStat2>), DefineBehavior(ptr, ptr),
                  &TriggerStatCollectionlETriggerStat2gR_Dictionary, isa_proxy, 4,
                  sizeof(::TriggerStatCollection<TriggerStat2>) );
      instance.SetNew(&new_TriggerStatCollectionlETriggerStat2gR);
      instance.SetNewArray(&newArray_TriggerStatCollectionlETriggerStat2gR);
      instance.SetDelete(&delete_TriggerStatCollectionlETriggerStat2gR);
      instance.SetDeleteArray(&deleteArray_TriggerStatCollectionlETriggerStat2gR);
      instance.SetDestructor(&destruct_TriggerStatCollectionlETriggerStat2gR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TriggerStatCollection<TriggerStat2>*)
   {
      return GenerateInitInstanceLocal((::TriggerStatCollection<TriggerStat2>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TriggerStatCollection<TriggerStat2>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void TriggerStatCollectionlETriggerStat2gR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::TriggerStatCollection<TriggerStat2>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void PotCollection_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_PotCollection(void *p = 0);
   static void *newArray_PotCollection(Long_t size, void *p);
   static void delete_PotCollection(void *p);
   static void deleteArray_PotCollection(void *p);
   static void destruct_PotCollection(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::PotCollection*)
   {
      ::PotCollection *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::PotCollection >(0);
      static ::ROOT::TGenericClassInfo 
         instance("PotCollection", ::PotCollection::Class_Version(), "/afs/cern.ch/user/e/eliza/private/TOTEM_JPSI/RPSIM/CMSSW_7_0_4/src/L1TriggerTotem/CoincidenceChip/interface/PotCollection.h", 13,
                  typeid(::PotCollection), DefineBehavior(ptr, ptr),
                  &::PotCollection::Dictionary, isa_proxy, 4,
                  sizeof(::PotCollection) );
      instance.SetNew(&new_PotCollection);
      instance.SetNewArray(&newArray_PotCollection);
      instance.SetDelete(&delete_PotCollection);
      instance.SetDeleteArray(&deleteArray_PotCollection);
      instance.SetDestructor(&destruct_PotCollection);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::PotCollection*)
   {
      return GenerateInitInstanceLocal((::PotCollection*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::PotCollection*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void RPTriggerAnalyzerInfoCollector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_RPTriggerAnalyzerInfoCollector(void *p = 0);
   static void *newArray_RPTriggerAnalyzerInfoCollector(Long_t size, void *p);
   static void delete_RPTriggerAnalyzerInfoCollector(void *p);
   static void deleteArray_RPTriggerAnalyzerInfoCollector(void *p);
   static void destruct_RPTriggerAnalyzerInfoCollector(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::RPTriggerAnalyzerInfoCollector*)
   {
      ::RPTriggerAnalyzerInfoCollector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::RPTriggerAnalyzerInfoCollector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("RPTriggerAnalyzerInfoCollector", ::RPTriggerAnalyzerInfoCollector::Class_Version(), "/afs/cern.ch/user/e/eliza/private/TOTEM_JPSI/RPSIM/CMSSW_7_0_4/src/L1TriggerTotem/CoincidenceChip/interface/RPTriggerAnalyzerInfoCollector.h", 13,
                  typeid(::RPTriggerAnalyzerInfoCollector), DefineBehavior(ptr, ptr),
                  &::RPTriggerAnalyzerInfoCollector::Dictionary, isa_proxy, 4,
                  sizeof(::RPTriggerAnalyzerInfoCollector) );
      instance.SetNew(&new_RPTriggerAnalyzerInfoCollector);
      instance.SetNewArray(&newArray_RPTriggerAnalyzerInfoCollector);
      instance.SetDelete(&delete_RPTriggerAnalyzerInfoCollector);
      instance.SetDeleteArray(&deleteArray_RPTriggerAnalyzerInfoCollector);
      instance.SetDestructor(&destruct_RPTriggerAnalyzerInfoCollector);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::RPTriggerAnalyzerInfoCollector*)
   {
      return GenerateInitInstanceLocal((::RPTriggerAnalyzerInfoCollector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RPTriggerAnalyzerInfoCollector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *PreTriggerStat::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *PreTriggerStat::Class_Name()
{
   return "PreTriggerStat";
}

//______________________________________________________________________________
const char *PreTriggerStat::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::PreTriggerStat*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int PreTriggerStat::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::PreTriggerStat*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void PreTriggerStat::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::PreTriggerStat*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *PreTriggerStat::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::PreTriggerStat*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TriggerStat::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TriggerStat::Class_Name()
{
   return "TriggerStat";
}

//______________________________________________________________________________
const char *TriggerStat::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TriggerStat*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TriggerStat::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TriggerStat*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TriggerStat::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TriggerStat*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TriggerStat::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TriggerStat*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TriggerStat2::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TriggerStat2::Class_Name()
{
   return "TriggerStat2";
}

//______________________________________________________________________________
const char *TriggerStat2::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TriggerStat2*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TriggerStat2::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TriggerStat2*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TriggerStat2::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TriggerStat2*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TriggerStat2::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TriggerStat2*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *TriggerStatCollection<TriggerStat>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *TriggerStatCollection<TriggerStat>::Class_Name()
{
   return "TriggerStatCollection<TriggerStat>";
}

//______________________________________________________________________________
template <> const char *TriggerStatCollection<TriggerStat>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TriggerStatCollection<TriggerStat>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int TriggerStatCollection<TriggerStat>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TriggerStatCollection<TriggerStat>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void TriggerStatCollection<TriggerStat>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TriggerStatCollection<TriggerStat>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *TriggerStatCollection<TriggerStat>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TriggerStatCollection<TriggerStat>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *RawVsSimuPotComparator::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *RawVsSimuPotComparator::Class_Name()
{
   return "RawVsSimuPotComparator";
}

//______________________________________________________________________________
const char *RawVsSimuPotComparator::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::RawVsSimuPotComparator*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int RawVsSimuPotComparator::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::RawVsSimuPotComparator*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void RawVsSimuPotComparator::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::RawVsSimuPotComparator*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *RawVsSimuPotComparator::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::RawVsSimuPotComparator*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *TriggerStatCollection<TriggerStat2>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *TriggerStatCollection<TriggerStat2>::Class_Name()
{
   return "TriggerStatCollection<TriggerStat2>";
}

//______________________________________________________________________________
template <> const char *TriggerStatCollection<TriggerStat2>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TriggerStatCollection<TriggerStat2>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int TriggerStatCollection<TriggerStat2>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TriggerStatCollection<TriggerStat2>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void TriggerStatCollection<TriggerStat2>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TriggerStatCollection<TriggerStat2>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *TriggerStatCollection<TriggerStat2>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TriggerStatCollection<TriggerStat2>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *PotCollection::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *PotCollection::Class_Name()
{
   return "PotCollection";
}

//______________________________________________________________________________
const char *PotCollection::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::PotCollection*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int PotCollection::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::PotCollection*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void PotCollection::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::PotCollection*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *PotCollection::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::PotCollection*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *RPTriggerAnalyzerInfoCollector::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *RPTriggerAnalyzerInfoCollector::Class_Name()
{
   return "RPTriggerAnalyzerInfoCollector";
}

//______________________________________________________________________________
const char *RPTriggerAnalyzerInfoCollector::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::RPTriggerAnalyzerInfoCollector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int RPTriggerAnalyzerInfoCollector::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::RPTriggerAnalyzerInfoCollector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void RPTriggerAnalyzerInfoCollector::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::RPTriggerAnalyzerInfoCollector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *RPTriggerAnalyzerInfoCollector::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::RPTriggerAnalyzerInfoCollector*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void PreTriggerStat::Streamer(TBuffer &R__b)
{
   // Stream an object of class PreTriggerStat.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(PreTriggerStat::Class(),this);
   } else {
      R__b.WriteClassBuffer(PreTriggerStat::Class(),this);
   }
}

//______________________________________________________________________________
void PreTriggerStat::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class PreTriggerStat.
      TClass *R__cl = ::PreTriggerStat::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConditions", &fConditions);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_PreTriggerStat(void *p) {
      return  p ? new(p) ::PreTriggerStat : new ::PreTriggerStat;
   }
   static void *newArray_PreTriggerStat(Long_t nElements, void *p) {
      return p ? new(p) ::PreTriggerStat[nElements] : new ::PreTriggerStat[nElements];
   }
   // Wrapper around operator delete
   static void delete_PreTriggerStat(void *p) {
      delete ((::PreTriggerStat*)p);
   }
   static void deleteArray_PreTriggerStat(void *p) {
      delete [] ((::PreTriggerStat*)p);
   }
   static void destruct_PreTriggerStat(void *p) {
      typedef ::PreTriggerStat current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::PreTriggerStat

//______________________________________________________________________________
void TriggerStat::Streamer(TBuffer &R__b)
{
   // Stream an object of class TriggerStat.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TriggerStat::Class(),this);
   } else {
      R__b.WriteClassBuffer(TriggerStat::Class(),this);
   }
}

//______________________________________________________________________________
void TriggerStat::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TriggerStat.
      TClass *R__cl = ::TriggerStat::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConditionANDTrigger", &fConditionANDTrigger);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConditionANDNoTrigger", &fConditionANDNoTrigger);
      PreTriggerStat::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TriggerStat(void *p) {
      return  p ? new(p) ::TriggerStat : new ::TriggerStat;
   }
   static void *newArray_TriggerStat(Long_t nElements, void *p) {
      return p ? new(p) ::TriggerStat[nElements] : new ::TriggerStat[nElements];
   }
   // Wrapper around operator delete
   static void delete_TriggerStat(void *p) {
      delete ((::TriggerStat*)p);
   }
   static void deleteArray_TriggerStat(void *p) {
      delete [] ((::TriggerStat*)p);
   }
   static void destruct_TriggerStat(void *p) {
      typedef ::TriggerStat current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TriggerStat

//______________________________________________________________________________
void TriggerStat2::Streamer(TBuffer &R__b)
{
   // Stream an object of class TriggerStat2.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TriggerStat2::Class(),this);
   } else {
      R__b.WriteClassBuffer(TriggerStat2::Class(),this);
   }
}

//______________________________________________________________________________
void TriggerStat2::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TriggerStat2.
      TClass *R__cl = ::TriggerStat2::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConditionANDRawSimuCCoutputTheSame", &fConditionANDRawSimuCCoutputTheSame);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConditionANDRawSimuCCoutputNotTheSame", &fConditionANDRawSimuCCoutputNotTheSame);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConditionANDRawSimuCCoutputNotTheSameOdd", &fConditionANDRawSimuCCoutputNotTheSameOdd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConditionANDRawSimuCCoutputNotTheSameEven", &fConditionANDRawSimuCCoutputNotTheSameEven);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConditionANDRawSimuCCoutputNotTheSameEvenOdd", &fConditionANDRawSimuCCoutputNotTheSameEvenOdd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConditionANDTriggerRaw0Simu0", &fConditionANDTriggerRaw0Simu0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConditionANDTriggerRaw1Simu0", &fConditionANDTriggerRaw1Simu0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConditionANDTriggerRaw0Simu1", &fConditionANDTriggerRaw0Simu1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConditionANDTriggerRaw1Simu1", &fConditionANDTriggerRaw1Simu1);
      PreTriggerStat::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TriggerStat2(void *p) {
      return  p ? new(p) ::TriggerStat2 : new ::TriggerStat2;
   }
   static void *newArray_TriggerStat2(Long_t nElements, void *p) {
      return p ? new(p) ::TriggerStat2[nElements] : new ::TriggerStat2[nElements];
   }
   // Wrapper around operator delete
   static void delete_TriggerStat2(void *p) {
      delete ((::TriggerStat2*)p);
   }
   static void deleteArray_TriggerStat2(void *p) {
      delete [] ((::TriggerStat2*)p);
   }
   static void destruct_TriggerStat2(void *p) {
      typedef ::TriggerStat2 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TriggerStat2

//______________________________________________________________________________
template <> void TriggerStatCollection<TriggerStat>::Streamer(TBuffer &R__b)
{
   // Stream an object of class TriggerStatCollection<TriggerStat>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TriggerStatCollection<TriggerStat>::Class(),this);
   } else {
      R__b.WriteClassBuffer(TriggerStatCollection<TriggerStat>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void TriggerStatCollectionlETriggerStatgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class TriggerStatCollection<TriggerStat>.
      typedef ::ROOT::Shadow::TriggerStatCollectionlETriggerStatgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::TriggerStatCollection<TriggerStat>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      sobj->TObject::ShowMembers(R__insp);
      R__insp.GenericShowMembers("vector<TriggerStat*,allocator<TriggerStat*> >", ( ::vector<TriggerStat*,allocator<TriggerStat*> > * )( (::TriggerStatCollection<TriggerStat>*) obj ), false);
   }

}

template <> void TriggerStatCollection<TriggerStat>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::TriggerStatCollectionlETriggerStatgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TriggerStatCollectionlETriggerStatgR(void *p) {
      return  p ? new(p) ::TriggerStatCollection<TriggerStat> : new ::TriggerStatCollection<TriggerStat>;
   }
   static void *newArray_TriggerStatCollectionlETriggerStatgR(Long_t nElements, void *p) {
      return p ? new(p) ::TriggerStatCollection<TriggerStat>[nElements] : new ::TriggerStatCollection<TriggerStat>[nElements];
   }
   // Wrapper around operator delete
   static void delete_TriggerStatCollectionlETriggerStatgR(void *p) {
      delete ((::TriggerStatCollection<TriggerStat>*)p);
   }
   static void deleteArray_TriggerStatCollectionlETriggerStatgR(void *p) {
      delete [] ((::TriggerStatCollection<TriggerStat>*)p);
   }
   static void destruct_TriggerStatCollectionlETriggerStatgR(void *p) {
      typedef ::TriggerStatCollection<TriggerStat> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TriggerStatCollection<TriggerStat>

//______________________________________________________________________________
template <> void TriggerStatCollection<TriggerStat2>::Streamer(TBuffer &R__b)
{
   // Stream an object of class TriggerStatCollection<TriggerStat2>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TriggerStatCollection<TriggerStat2>::Class(),this);
   } else {
      R__b.WriteClassBuffer(TriggerStatCollection<TriggerStat2>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void TriggerStatCollectionlETriggerStat2gR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class TriggerStatCollection<TriggerStat2>.
      typedef ::ROOT::Shadow::TriggerStatCollectionlETriggerStat2gR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::TriggerStatCollection<TriggerStat2>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      sobj->TObject::ShowMembers(R__insp);
      R__insp.GenericShowMembers("vector<TriggerStat2*,allocator<TriggerStat2*> >", ( ::vector<TriggerStat2*,allocator<TriggerStat2*> > * )( (::TriggerStatCollection<TriggerStat2>*) obj ), false);
   }

}

template <> void TriggerStatCollection<TriggerStat2>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::TriggerStatCollectionlETriggerStat2gR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TriggerStatCollectionlETriggerStat2gR(void *p) {
      return  p ? new(p) ::TriggerStatCollection<TriggerStat2> : new ::TriggerStatCollection<TriggerStat2>;
   }
   static void *newArray_TriggerStatCollectionlETriggerStat2gR(Long_t nElements, void *p) {
      return p ? new(p) ::TriggerStatCollection<TriggerStat2>[nElements] : new ::TriggerStatCollection<TriggerStat2>[nElements];
   }
   // Wrapper around operator delete
   static void delete_TriggerStatCollectionlETriggerStat2gR(void *p) {
      delete ((::TriggerStatCollection<TriggerStat2>*)p);
   }
   static void deleteArray_TriggerStatCollectionlETriggerStat2gR(void *p) {
      delete [] ((::TriggerStatCollection<TriggerStat2>*)p);
   }
   static void destruct_TriggerStatCollectionlETriggerStat2gR(void *p) {
      typedef ::TriggerStatCollection<TriggerStat2> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TriggerStatCollection<TriggerStat2>

//______________________________________________________________________________
namespace ROOT {
   void TwoHalfPot_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class TwoHalfPot.
      typedef ::ROOT::Shadow::TwoHalfPot ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::TwoHalfPot*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fType", &sobj->fType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConditionalTriggerStat", &sobj->fConditionalTriggerStat);
      R__insp.InspectMember(sobj->fConditionalTriggerStat, "fConditionalTriggerStat.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "verbosity", &sobj->verbosity);
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TwoHalfPot(void *p) {
      delete ((::TwoHalfPot*)p);
   }
   static void deleteArray_TwoHalfPot(void *p) {
      delete [] ((::TwoHalfPot*)p);
   }
   static void destruct_TwoHalfPot(void *p) {
      typedef ::TwoHalfPot current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TwoHalfPot

//______________________________________________________________________________
void RawVsSimuPotComparator::Streamer(TBuffer &R__b)
{
   // Stream an object of class RawVsSimuPotComparator.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(RawVsSimuPotComparator::Class(),this);
   } else {
      R__b.WriteClassBuffer(RawVsSimuPotComparator::Class(),this);
   }
}

//______________________________________________________________________________
void RawVsSimuPotComparator::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class RawVsSimuPotComparator.
      TClass *R__cl = ::RawVsSimuPotComparator::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConditionalTriggerStat", &fConditionalTriggerStat);
      R__insp.InspectMember(fConditionalTriggerStat, "fConditionalTriggerStat.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPotRaw", (void*)&fPotRaw);
      R__insp.InspectMember("TwoHalfPot", (void*)&fPotRaw, "fPotRaw.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPotSimu", (void*)&fPotSimu);
      R__insp.InspectMember("TwoHalfPot", (void*)&fPotSimu, "fPotSimu.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "verbosity", &verbosity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "detTriggerLabel", (void*)&detTriggerLabel);
      R__insp.InspectMember("string", (void*)&detTriggerLabel, "detTriggerLabel.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fittedTrackCollectionLabel", (void*)&fittedTrackCollectionLabel);
      R__insp.InspectMember("string", (void*)&fittedTrackCollectionLabel, "fittedTrackCollectionLabel.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stripDigiLabel", (void*)&stripDigiLabel);
      R__insp.InspectMember("string", (void*)&stripDigiLabel, "stripDigiLabel.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNEmptyEvents", &fNEmptyEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHist1D", (void*)&fHist1D);
      R__insp.InspectMember("vector<TH1D*>", (void*)&fHist1D, "fHist1D.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHist2D", (void*)&fHist2D);
      R__insp.InspectMember("vector<TH2D*>", (void*)&fHist2D, "fHist2D.", false);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_RawVsSimuPotComparator(void *p) {
      return  p ? new(p) ::RawVsSimuPotComparator : new ::RawVsSimuPotComparator;
   }
   static void *newArray_RawVsSimuPotComparator(Long_t nElements, void *p) {
      return p ? new(p) ::RawVsSimuPotComparator[nElements] : new ::RawVsSimuPotComparator[nElements];
   }
   // Wrapper around operator delete
   static void delete_RawVsSimuPotComparator(void *p) {
      delete ((::RawVsSimuPotComparator*)p);
   }
   static void deleteArray_RawVsSimuPotComparator(void *p) {
      delete [] ((::RawVsSimuPotComparator*)p);
   }
   static void destruct_RawVsSimuPotComparator(void *p) {
      typedef ::RawVsSimuPotComparator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::RawVsSimuPotComparator

//______________________________________________________________________________
void PotCollection::Streamer(TBuffer &R__b)
{
   // Stream an object of class PotCollection.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(PotCollection::Class(),this);
   } else {
      R__b.WriteClassBuffer(PotCollection::Class(),this);
   }
}

//______________________________________________________________________________
void PotCollection::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class PotCollection.
      TClass *R__cl = ::PotCollection::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
      R__insp.GenericShowMembers("vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >", ( ::vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> > *) (this ), false);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_PotCollection(void *p) {
      return  p ? new(p) ::PotCollection : new ::PotCollection;
   }
   static void *newArray_PotCollection(Long_t nElements, void *p) {
      return p ? new(p) ::PotCollection[nElements] : new ::PotCollection[nElements];
   }
   // Wrapper around operator delete
   static void delete_PotCollection(void *p) {
      delete ((::PotCollection*)p);
   }
   static void deleteArray_PotCollection(void *p) {
      delete [] ((::PotCollection*)p);
   }
   static void destruct_PotCollection(void *p) {
      typedef ::PotCollection current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::PotCollection

//______________________________________________________________________________
void RPTriggerAnalyzerInfoCollector::Streamer(TBuffer &R__b)
{
   // Stream an object of class RPTriggerAnalyzerInfoCollector.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(RPTriggerAnalyzerInfoCollector::Class(),this);
   } else {
      R__b.WriteClassBuffer(RPTriggerAnalyzerInfoCollector::Class(),this);
   }
}

//______________________________________________________________________________
void RPTriggerAnalyzerInfoCollector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class RPTriggerAnalyzerInfoCollector.
      TClass *R__cl = ::RPTriggerAnalyzerInfoCollector::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNEvents", &fNEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNEmptyEvents", &fNEmptyEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "runName", &runName);
      R__insp.InspectMember(runName, "runName.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_RPTriggerAnalyzerInfoCollector(void *p) {
      return  p ? new(p) ::RPTriggerAnalyzerInfoCollector : new ::RPTriggerAnalyzerInfoCollector;
   }
   static void *newArray_RPTriggerAnalyzerInfoCollector(Long_t nElements, void *p) {
      return p ? new(p) ::RPTriggerAnalyzerInfoCollector[nElements] : new ::RPTriggerAnalyzerInfoCollector[nElements];
   }
   // Wrapper around operator delete
   static void delete_RPTriggerAnalyzerInfoCollector(void *p) {
      delete ((::RPTriggerAnalyzerInfoCollector*)p);
   }
   static void deleteArray_RPTriggerAnalyzerInfoCollector(void *p) {
      delete [] ((::RPTriggerAnalyzerInfoCollector*)p);
   }
   static void destruct_RPTriggerAnalyzerInfoCollector(void *p) {
      typedef ::RPTriggerAnalyzerInfoCollector current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::RPTriggerAnalyzerInfoCollector

namespace ROOT {
   void vectorlERawVsSimuPotComparatormUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlERawVsSimuPotComparatormUgR_Dictionary();
   static void *new_vectorlERawVsSimuPotComparatormUgR(void *p = 0);
   static void *newArray_vectorlERawVsSimuPotComparatormUgR(Long_t size, void *p);
   static void delete_vectorlERawVsSimuPotComparatormUgR(void *p);
   static void deleteArray_vectorlERawVsSimuPotComparatormUgR(void *p);
   static void destruct_vectorlERawVsSimuPotComparatormUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<RawVsSimuPotComparator*>*)
   {
      vector<RawVsSimuPotComparator*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<RawVsSimuPotComparator*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<RawVsSimuPotComparator*>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<RawVsSimuPotComparator*>), DefineBehavior(ptr, ptr),
                  0, &vectorlERawVsSimuPotComparatormUgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<RawVsSimuPotComparator*>) );
      instance.SetNew(&new_vectorlERawVsSimuPotComparatormUgR);
      instance.SetNewArray(&newArray_vectorlERawVsSimuPotComparatormUgR);
      instance.SetDelete(&delete_vectorlERawVsSimuPotComparatormUgR);
      instance.SetDeleteArray(&deleteArray_vectorlERawVsSimuPotComparatormUgR);
      instance.SetDestructor(&destruct_vectorlERawVsSimuPotComparatormUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<RawVsSimuPotComparator*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<RawVsSimuPotComparator*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlERawVsSimuPotComparatormUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<RawVsSimuPotComparator*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlERawVsSimuPotComparatormUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<RawVsSimuPotComparator*> : new vector<RawVsSimuPotComparator*>;
   }
   static void *newArray_vectorlERawVsSimuPotComparatormUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<RawVsSimuPotComparator*>[nElements] : new vector<RawVsSimuPotComparator*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlERawVsSimuPotComparatormUgR(void *p) {
      delete ((vector<RawVsSimuPotComparator*>*)p);
   }
   static void deleteArray_vectorlERawVsSimuPotComparatormUgR(void *p) {
      delete [] ((vector<RawVsSimuPotComparator*>*)p);
   }
   static void destruct_vectorlERawVsSimuPotComparatormUgR(void *p) {
      typedef vector<RawVsSimuPotComparator*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<RawVsSimuPotComparator*>

namespace ROOT {
   void vectorlETH1DmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETH1DmUgR_Dictionary();
   static void *new_vectorlETH1DmUgR(void *p = 0);
   static void *newArray_vectorlETH1DmUgR(Long_t size, void *p);
   static void delete_vectorlETH1DmUgR(void *p);
   static void deleteArray_vectorlETH1DmUgR(void *p);
   static void destruct_vectorlETH1DmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TH1D*>*)
   {
      vector<TH1D*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TH1D*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TH1D*>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<TH1D*>), DefineBehavior(ptr, ptr),
                  0, &vectorlETH1DmUgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<TH1D*>) );
      instance.SetNew(&new_vectorlETH1DmUgR);
      instance.SetNewArray(&newArray_vectorlETH1DmUgR);
      instance.SetDelete(&delete_vectorlETH1DmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETH1DmUgR);
      instance.SetDestructor(&destruct_vectorlETH1DmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TH1D*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TH1D*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETH1DmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TH1D*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETH1DmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TH1D*> : new vector<TH1D*>;
   }
   static void *newArray_vectorlETH1DmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TH1D*>[nElements] : new vector<TH1D*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETH1DmUgR(void *p) {
      delete ((vector<TH1D*>*)p);
   }
   static void deleteArray_vectorlETH1DmUgR(void *p) {
      delete [] ((vector<TH1D*>*)p);
   }
   static void destruct_vectorlETH1DmUgR(void *p) {
      typedef vector<TH1D*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TH1D*>

namespace ROOT {
   void vectorlETH2DmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETH2DmUgR_Dictionary();
   static void *new_vectorlETH2DmUgR(void *p = 0);
   static void *newArray_vectorlETH2DmUgR(Long_t size, void *p);
   static void delete_vectorlETH2DmUgR(void *p);
   static void deleteArray_vectorlETH2DmUgR(void *p);
   static void destruct_vectorlETH2DmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TH2D*>*)
   {
      vector<TH2D*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TH2D*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TH2D*>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<TH2D*>), DefineBehavior(ptr, ptr),
                  0, &vectorlETH2DmUgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<TH2D*>) );
      instance.SetNew(&new_vectorlETH2DmUgR);
      instance.SetNewArray(&newArray_vectorlETH2DmUgR);
      instance.SetDelete(&delete_vectorlETH2DmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETH2DmUgR);
      instance.SetDestructor(&destruct_vectorlETH2DmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TH2D*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TH2D*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETH2DmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TH2D*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETH2DmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TH2D*> : new vector<TH2D*>;
   }
   static void *newArray_vectorlETH2DmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TH2D*>[nElements] : new vector<TH2D*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETH2DmUgR(void *p) {
      delete ((vector<TH2D*>*)p);
   }
   static void deleteArray_vectorlETH2DmUgR(void *p) {
      delete [] ((vector<TH2D*>*)p);
   }
   static void destruct_vectorlETH2DmUgR(void *p) {
      typedef vector<TH2D*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TH2D*>

namespace ROOT {
   void vectorlETriggerStatmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETriggerStatmUgR_Dictionary();
   static void *new_vectorlETriggerStatmUgR(void *p = 0);
   static void *newArray_vectorlETriggerStatmUgR(Long_t size, void *p);
   static void delete_vectorlETriggerStatmUgR(void *p);
   static void deleteArray_vectorlETriggerStatmUgR(void *p);
   static void destruct_vectorlETriggerStatmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TriggerStat*>*)
   {
      vector<TriggerStat*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TriggerStat*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TriggerStat*>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<TriggerStat*>), DefineBehavior(ptr, ptr),
                  0, &vectorlETriggerStatmUgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<TriggerStat*>) );
      instance.SetNew(&new_vectorlETriggerStatmUgR);
      instance.SetNewArray(&newArray_vectorlETriggerStatmUgR);
      instance.SetDelete(&delete_vectorlETriggerStatmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETriggerStatmUgR);
      instance.SetDestructor(&destruct_vectorlETriggerStatmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TriggerStat*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TriggerStat*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETriggerStatmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TriggerStat*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETriggerStatmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TriggerStat*> : new vector<TriggerStat*>;
   }
   static void *newArray_vectorlETriggerStatmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TriggerStat*>[nElements] : new vector<TriggerStat*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETriggerStatmUgR(void *p) {
      delete ((vector<TriggerStat*>*)p);
   }
   static void deleteArray_vectorlETriggerStatmUgR(void *p) {
      delete [] ((vector<TriggerStat*>*)p);
   }
   static void destruct_vectorlETriggerStatmUgR(void *p) {
      typedef vector<TriggerStat*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TriggerStat*>

namespace ROOT {
   void vectorlETriggerStat2mUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETriggerStat2mUgR_Dictionary();
   static void *new_vectorlETriggerStat2mUgR(void *p = 0);
   static void *newArray_vectorlETriggerStat2mUgR(Long_t size, void *p);
   static void delete_vectorlETriggerStat2mUgR(void *p);
   static void deleteArray_vectorlETriggerStat2mUgR(void *p);
   static void destruct_vectorlETriggerStat2mUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TriggerStat2*>*)
   {
      vector<TriggerStat2*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TriggerStat2*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TriggerStat2*>", -2, "/afs/cern.ch/cms/slc6_amd64_gcc481/lcg/root/5.34.10-cms/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<TriggerStat2*>), DefineBehavior(ptr, ptr),
                  0, &vectorlETriggerStat2mUgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<TriggerStat2*>) );
      instance.SetNew(&new_vectorlETriggerStat2mUgR);
      instance.SetNewArray(&newArray_vectorlETriggerStat2mUgR);
      instance.SetDelete(&delete_vectorlETriggerStat2mUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETriggerStat2mUgR);
      instance.SetDestructor(&destruct_vectorlETriggerStat2mUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TriggerStat2*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TriggerStat2*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETriggerStat2mUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TriggerStat2*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETriggerStat2mUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TriggerStat2*> : new vector<TriggerStat2*>;
   }
   static void *newArray_vectorlETriggerStat2mUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TriggerStat2*>[nElements] : new vector<TriggerStat2*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETriggerStat2mUgR(void *p) {
      delete ((vector<TriggerStat2*>*)p);
   }
   static void deleteArray_vectorlETriggerStat2mUgR(void *p) {
      delete [] ((vector<TriggerStat2*>*)p);
   }
   static void destruct_vectorlETriggerStat2mUgR(void *p) {
      typedef vector<TriggerStat2*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TriggerStat2*>

/********************************************************
* tmp/slc6_amd64_gcc481/src/L1TriggerTotem/CoincidenceChip/src/L1TriggerTotemCoincidenceChip/L1TriggerTotemCoincidenceChipLinkDef.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableL1TriggerTotemCoincidenceChipLinkDef();

extern "C" void G__set_cpp_environmentL1TriggerTotemCoincidenceChipLinkDef() {
  G__cpp_reset_tagtableL1TriggerTotemCoincidenceChipLinkDef();
}
#include <new>
extern "C" int G__cpp_dllrevL1TriggerTotemCoincidenceChipLinkDef() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* PreTriggerStat */
static int G__L1TriggerTotemCoincidenceChipLinkDef_226_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PreTriggerStat* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PreTriggerStat(*(TString*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) PreTriggerStat(*(TString*) libp->para[0].ref);
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new PreTriggerStat[n];
       } else {
         p = new((void*) gvp) PreTriggerStat[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new PreTriggerStat;
       } else {
         p = new((void*) gvp) PreTriggerStat;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_PreTriggerStat));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_226_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const PreTriggerStat*) G__getstructoffset())->GetConditionNEvents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_226_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = PreTriggerStat::RawOrSimuString((ERawOrSimu) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_226_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) PreTriggerStat::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_226_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PreTriggerStat::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_226_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) PreTriggerStat::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_226_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      PreTriggerStat::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_226_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((PreTriggerStat*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_226_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PreTriggerStat::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_226_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) PreTriggerStat::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_226_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PreTriggerStat::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_226_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) PreTriggerStat::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__L1TriggerTotemCoincidenceChipLinkDef_226_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   PreTriggerStat* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new PreTriggerStat(*(PreTriggerStat*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_PreTriggerStat));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef PreTriggerStat G__TPreTriggerStat;
static int G__L1TriggerTotemCoincidenceChipLinkDef_226_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (PreTriggerStat*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((PreTriggerStat*) (soff+(sizeof(PreTriggerStat)*i)))->~G__TPreTriggerStat();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (PreTriggerStat*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((PreTriggerStat*) (soff))->~G__TPreTriggerStat();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__L1TriggerTotemCoincidenceChipLinkDef_226_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PreTriggerStat* dest = (PreTriggerStat*) G__getstructoffset();
   *dest = *(PreTriggerStat*) libp->para[0].ref;
   const PreTriggerStat& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TriggerStat */
static int G__L1TriggerTotemCoincidenceChipLinkDef_227_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TriggerStat* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TriggerStat(*(TString*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) TriggerStat(*(TString*) libp->para[0].ref);
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TriggerStat[n];
       } else {
         p = new((void*) gvp) TriggerStat[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TriggerStat;
       } else {
         p = new((void*) gvp) TriggerStat;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_227_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TriggerStat*) G__getstructoffset())->GetConditionNEvents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_227_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TriggerStat::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_227_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TriggerStat::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_227_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TriggerStat::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_227_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TriggerStat::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_227_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TriggerStat*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_227_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TriggerStat::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_227_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TriggerStat::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_227_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TriggerStat::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_227_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TriggerStat::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__L1TriggerTotemCoincidenceChipLinkDef_227_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TriggerStat* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TriggerStat(*(TriggerStat*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TriggerStat G__TTriggerStat;
static int G__L1TriggerTotemCoincidenceChipLinkDef_227_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TriggerStat*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TriggerStat*) (soff+(sizeof(TriggerStat)*i)))->~G__TTriggerStat();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TriggerStat*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TriggerStat*) (soff))->~G__TTriggerStat();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__L1TriggerTotemCoincidenceChipLinkDef_227_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TriggerStat* dest = (TriggerStat*) G__getstructoffset();
   *dest = *(TriggerStat*) libp->para[0].ref;
   const TriggerStat& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TriggerStat2 */
static int G__L1TriggerTotemCoincidenceChipLinkDef_228_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TriggerStat2* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TriggerStat2(*(TString*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) TriggerStat2(*(TString*) libp->para[0].ref);
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TriggerStat2[n];
       } else {
         p = new((void*) gvp) TriggerStat2[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TriggerStat2;
       } else {
         p = new((void*) gvp) TriggerStat2;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_228_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TriggerStat2::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_228_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TriggerStat2::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_228_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TriggerStat2::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_228_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TriggerStat2::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_228_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TriggerStat2*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_228_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TriggerStat2::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_228_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TriggerStat2::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_228_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TriggerStat2::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_228_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TriggerStat2::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__L1TriggerTotemCoincidenceChipLinkDef_228_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TriggerStat2* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TriggerStat2(*(TriggerStat2*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TriggerStat2 G__TTriggerStat2;
static int G__L1TriggerTotemCoincidenceChipLinkDef_228_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TriggerStat2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TriggerStat2*) (soff+(sizeof(TriggerStat2)*i)))->~G__TTriggerStat2();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TriggerStat2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TriggerStat2*) (soff))->~G__TTriggerStat2();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__L1TriggerTotemCoincidenceChipLinkDef_228_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TriggerStat2* dest = (TriggerStat2*) G__getstructoffset();
   *dest = *(TriggerStat2*) libp->para[0].ref;
   const TriggerStat2& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TwoHalfPot */
static int G__L1TriggerTotemCoincidenceChipLinkDef_234_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TwoHalfPot* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TwoHalfPot(
(unsigned int) G__int(libp->para[0]), (ERawOrSimu) G__int(libp->para[1])
, *(edm::ParameterSet*) libp->para[2].ref, (unsigned int) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TwoHalfPot(
(unsigned int) G__int(libp->para[0]), (ERawOrSimu) G__int(libp->para[1])
, *(edm::ParameterSet*) libp->para[2].ref, (unsigned int) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TwoHalfPot(
(unsigned int) G__int(libp->para[0]), (ERawOrSimu) G__int(libp->para[1])
, *(edm::ParameterSet*) libp->para[2].ref);
     } else {
       p = new((void*) gvp) TwoHalfPot(
(unsigned int) G__int(libp->para[0]), (ERawOrSimu) G__int(libp->para[1])
, *(edm::ParameterSet*) libp->para[2].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TwoHalfPot));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_234_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TwoHalfPot*) G__getstructoffset())->GetDecRPIdFull());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_234_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HalfPot& obj = ((TwoHalfPot*) G__getstructoffset())->GetHalfPot((EDetOrientation) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_234_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HalfPot& obj = ((const TwoHalfPot*) G__getstructoffset())->GetHalfPot((EDetOrientation) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_234_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TwoHalfPot*) G__getstructoffset())->GetType();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_234_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TwoHalfPot*) G__getstructoffset())->TriggerSignal_UandV());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_234_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TwoHalfPot*) G__getstructoffset())->TriggerSignal_UorV());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_234_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TwoHalfPot*) G__getstructoffset())->TriggerSignal_UorV1sectorOnly());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_234_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TwoHalfPot*) G__getstructoffset())->TriggerSignal_UandV1sectorOnly());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_234_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TwoHalfPot*) G__getstructoffset())->TriggerSignal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_234_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TwoHalfPot*) G__getstructoffset())->beginJob();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_234_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TwoHalfPot*) G__getstructoffset())->analyze(*(edm::Event*) libp->para[0].ref, *(edm::EventSetup*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_234_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TwoHalfPot*) G__getstructoffset())->endJob();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_234_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TwoHalfPot*) G__getstructoffset())->analyzePotUnderCondition(*(TString*) libp->para[0].ref, (bool) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__L1TriggerTotemCoincidenceChipLinkDef_234_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TwoHalfPot* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TwoHalfPot(*(TwoHalfPot*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TwoHalfPot));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TwoHalfPot G__TTwoHalfPot;
static int G__L1TriggerTotemCoincidenceChipLinkDef_234_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TwoHalfPot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TwoHalfPot*) (soff+(sizeof(TwoHalfPot)*i)))->~G__TTwoHalfPot();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TwoHalfPot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TwoHalfPot*) (soff))->~G__TTwoHalfPot();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TriggerStatCollection<TriggerStat> */
static int G__L1TriggerTotemCoincidenceChipLinkDef_235_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TriggerStatCollection<TriggerStat>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TriggerStatCollection<TriggerStat>[n];
     } else {
       p = new((void*) gvp) TriggerStatCollection<TriggerStat>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TriggerStatCollection<TriggerStat>;
     } else {
       p = new((void*) gvp) TriggerStatCollection<TriggerStat>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_235_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TriggerStatCollection<TriggerStat>*) G__getstructoffset())->AddIfNotExists(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_235_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TriggerStatCollection<TriggerStat>*) G__getstructoffset())->AddIfNotExists((TriggerStat*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_235_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TriggerStatCollection<TriggerStat>*) G__getstructoffset())->Find(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_235_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TriggerStatCollection<TriggerStat>*) G__getstructoffset())->AssertFind(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_235_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TriggerStatCollection<TriggerStat>*) G__getstructoffset())->AssertFind(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_235_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TriggerStatCollection<TriggerStat>*) G__getstructoffset())->Find(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_235_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TriggerStatCollection<TriggerStat>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_235_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TriggerStatCollection<TriggerStat>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_235_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TriggerStatCollection<TriggerStat>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_235_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TriggerStatCollection<TriggerStat>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_235_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TriggerStatCollection<TriggerStat>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_235_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TriggerStatCollection<TriggerStat>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_235_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TriggerStatCollection<TriggerStat>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_235_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TriggerStatCollection<TriggerStat>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_235_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TriggerStatCollection<TriggerStat>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__L1TriggerTotemCoincidenceChipLinkDef_235_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TriggerStatCollection<TriggerStat>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TriggerStatCollection<TriggerStat>(*(TriggerStatCollection<TriggerStat>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TriggerStatCollection<TriggerStat> G__TTriggerStatCollectionlETriggerStatgR;
static int G__L1TriggerTotemCoincidenceChipLinkDef_235_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TriggerStatCollection<TriggerStat>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TriggerStatCollection<TriggerStat>*) (soff+(sizeof(TriggerStatCollection<TriggerStat>)*i)))->~G__TTriggerStatCollectionlETriggerStatgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TriggerStatCollection<TriggerStat>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TriggerStatCollection<TriggerStat>*) (soff))->~G__TTriggerStatCollectionlETriggerStatgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__L1TriggerTotemCoincidenceChipLinkDef_235_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TriggerStatCollection<TriggerStat>* dest = (TriggerStatCollection<TriggerStat>*) G__getstructoffset();
   *dest = *(TriggerStatCollection<TriggerStat>*) libp->para[0].ref;
   const TriggerStatCollection<TriggerStat>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<TriggerStat*,allocator<TriggerStat*> > */
static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TriggerStat*,allocator<TriggerStat*> >::reference obj = ((vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->at((vector<TriggerStat*,allocator<TriggerStat*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TriggerStat*,allocator<TriggerStat*> >::const_reference obj = ((const vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->at((vector<TriggerStat*,allocator<TriggerStat*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TriggerStat*,allocator<TriggerStat*> >::iterator* pobj;
         vector<TriggerStat*,allocator<TriggerStat*> >::iterator xobj = ((vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->begin();
         pobj = new vector<TriggerStat*,allocator<TriggerStat*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TriggerStat*,allocator<TriggerStat*> >::iterator* pobj;
         vector<TriggerStat*,allocator<TriggerStat*> >::iterator xobj = ((vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->end();
         pobj = new vector<TriggerStat*,allocator<TriggerStat*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TriggerStat*,allocator<TriggerStat*> >::reverse_iterator* pobj;
         vector<TriggerStat*,allocator<TriggerStat*> >::reverse_iterator xobj = ((vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->rbegin();
         pobj = new vector<TriggerStat*,allocator<TriggerStat*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TriggerStat*,allocator<TriggerStat*> >::reverse_iterator* pobj;
         vector<TriggerStat*,allocator<TriggerStat*> >::reverse_iterator xobj = ((vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->rend();
         pobj = new vector<TriggerStat*,allocator<TriggerStat*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->resize((vector<TriggerStat*,allocator<TriggerStat*> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->resize((vector<TriggerStat*,allocator<TriggerStat*> >::size_type) G__int(libp->para[0]), (TriggerStat*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TriggerStat*,allocator<TriggerStat*> >::reference obj = ((vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->operator[]((vector<TriggerStat*,allocator<TriggerStat*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TriggerStat*,allocator<TriggerStat*> >::const_reference obj = ((const vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->operator[]((vector<TriggerStat*,allocator<TriggerStat*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TriggerStat*,allocator<TriggerStat*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TriggerStat*,allocator<TriggerStat*> >[n];
     } else {
       p = new((void*) gvp) vector<TriggerStat*,allocator<TriggerStat*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TriggerStat*,allocator<TriggerStat*> >;
     } else {
       p = new((void*) gvp) vector<TriggerStat*,allocator<TriggerStat*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TriggerStat*,allocator<TriggerStat*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TriggerStat*,allocator<TriggerStat*> >((vector<TriggerStat*,allocator<TriggerStat*> >::size_type) G__int(libp->para[0]), libp->para[1].ref ? *(TriggerStat**) libp->para[1].ref : *(TriggerStat**) (void*) (&G__Mlong(libp->para[1])));
     } else {
       p = new((void*) gvp) vector<TriggerStat*,allocator<TriggerStat*> >((vector<TriggerStat*,allocator<TriggerStat*> >::size_type) G__int(libp->para[0]), libp->para[1].ref ? *(TriggerStat**) libp->para[1].ref : *(TriggerStat**) (void*) (&G__Mlong(libp->para[1])));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TriggerStat*,allocator<TriggerStat*> >((vector<TriggerStat*,allocator<TriggerStat*> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<TriggerStat*,allocator<TriggerStat*> >((vector<TriggerStat*,allocator<TriggerStat*> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TriggerStat*,allocator<TriggerStat*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<TriggerStat*,allocator<TriggerStat*> >(*(vector<TriggerStat*,allocator<TriggerStat*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<TriggerStat*,allocator<TriggerStat*> >(*(vector<TriggerStat*,allocator<TriggerStat*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TriggerStat*,allocator<TriggerStat*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<TriggerStat*,allocator<TriggerStat*> >(*((vector<TriggerStat*,allocator<TriggerStat*> >::const_iterator*) G__int(libp->para[0])), *((vector<TriggerStat*,allocator<TriggerStat*> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<TriggerStat*,allocator<TriggerStat*> >(*((vector<TriggerStat*,allocator<TriggerStat*> >::const_iterator*) G__int(libp->para[0])), *((vector<TriggerStat*,allocator<TriggerStat*> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TriggerStat*,allocator<TriggerStat*> >& obj = ((vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->operator=(*(vector<TriggerStat*,allocator<TriggerStat*> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->reserve((vector<TriggerStat*,allocator<TriggerStat*> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TriggerStat*& obj = ((vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TriggerStat*& obj = ((vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->push_back(libp->para[0].ref ? *(TriggerStat**) libp->para[0].ref : *(TriggerStat**) (void*) (&G__Mlong(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->swap(*(vector<TriggerStat*,allocator<TriggerStat*> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TriggerStat*,allocator<TriggerStat*> >::iterator* pobj;
         vector<TriggerStat*,allocator<TriggerStat*> >::iterator xobj = ((vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->insert(*((vector<TriggerStat*,allocator<TriggerStat*> >::iterator*) G__int(libp->para[0])), libp->para[1].ref ? *(TriggerStat**) libp->para[1].ref : *(TriggerStat**) (void*) (&G__Mlong(libp->para[1])));
         pobj = new vector<TriggerStat*,allocator<TriggerStat*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->insert(*((vector<TriggerStat*,allocator<TriggerStat*> >::iterator*) G__int(libp->para[0])), *((vector<TriggerStat*,allocator<TriggerStat*> >::const_iterator*) G__int(libp->para[1]))
, *((vector<TriggerStat*,allocator<TriggerStat*> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->insert(*((vector<TriggerStat*,allocator<TriggerStat*> >::iterator*) G__int(libp->para[0])), (vector<TriggerStat*,allocator<TriggerStat*> >::size_type) G__int(libp->para[1])
, libp->para[2].ref ? *(TriggerStat**) libp->para[2].ref : *(TriggerStat**) (void*) (&G__Mlong(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->erase(*((vector<TriggerStat*,allocator<TriggerStat*> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->erase(*((vector<TriggerStat*,allocator<TriggerStat*> >::iterator*) G__int(libp->para[0])), *((vector<TriggerStat*,allocator<TriggerStat*> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TriggerStat*,allocator<TriggerStat*> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<TriggerStat*,allocator<TriggerStat*> > G__TvectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR;
static int G__L1TriggerTotemCoincidenceChipLinkDef_237_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<TriggerStat*,allocator<TriggerStat*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<TriggerStat*,allocator<TriggerStat*> >*) (soff+(sizeof(vector<TriggerStat*,allocator<TriggerStat*> >)*i)))->~G__TvectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<TriggerStat*,allocator<TriggerStat*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<TriggerStat*,allocator<TriggerStat*> >*) (soff))->~G__TvectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RawVsSimuPotComparator */
static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RawVsSimuPotComparator* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RawVsSimuPotComparator(
(unsigned int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (edm::ParameterSet*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) RawVsSimuPotComparator(
(unsigned int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (edm::ParameterSet*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RawVsSimuPotComparator((unsigned int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) RawVsSimuPotComparator((unsigned int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RawVsSimuPotComparator((unsigned int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) RawVsSimuPotComparator((unsigned int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new RawVsSimuPotComparator[n];
       } else {
         p = new((void*) gvp) RawVsSimuPotComparator[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new RawVsSimuPotComparator;
       } else {
         p = new((void*) gvp) RawVsSimuPotComparator;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RawVsSimuPotComparator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TwoHalfPot& obj = ((RawVsSimuPotComparator*) G__getstructoffset())->GetPot((ERawOrSimu) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TwoHalfPot& obj = ((const RawVsSimuPotComparator*) G__getstructoffset())->GetPot((ERawOrSimu) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RawVsSimuPotComparator*) G__getstructoffset())->beginJob();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RawVsSimuPotComparator*) G__getstructoffset())->analyze(*(edm::Event*) libp->para[0].ref, *(edm::EventSetup*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RawVsSimuPotComparator*) G__getstructoffset())->endJob();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RawVsSimuPotComparator*) G__getstructoffset())->endJob2();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((RawVsSimuPotComparator*) G__getstructoffset())->FillHist2D(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref
, *(edm::Event*) libp->para[2].ref, (EDetOrientation) G__int(libp->para[3]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const RawVsSimuPotComparator*) G__getstructoffset())->PrintEventTwoHalfPot();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RawVsSimuPotComparator*) G__getstructoffset())->analyzePotUnderCondition(*(TString*) libp->para[0].ref, (bool) G__int(libp->para[1])
, *(edm::Event*) libp->para[2].ref, (EDetOrientation) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RawVsSimuPotComparator*) G__getstructoffset())->FailingSectors();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RawVsSimuPotComparator*) G__getstructoffset())->StripsOnDistrib(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref
, *(edm::Event*) libp->para[2].ref, (EDetOrientation) G__int(libp->para[3])
, (unsigned int) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RawVsSimuPotComparator*) G__getstructoffset())->SectorsOnDistrib(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref
, *(edm::Event*) libp->para[2].ref, (EDetOrientation) G__int(libp->para[3])
, (unsigned int) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RawVsSimuPotComparator*) G__getstructoffset())->AddHist2D((TH2D*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RawVsSimuPotComparator*) G__getstructoffset())->AddHist1D((TH1D*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((RawVsSimuPotComparator*) G__getstructoffset())->FindHist2D(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((RawVsSimuPotComparator*) G__getstructoffset())->FindHist1D(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const RawVsSimuPotComparator*) G__getstructoffset())->GetDecRPIdFull());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const RawVsSimuPotComparator*) G__getstructoffset())->RPNameToId(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const RawVsSimuPotComparator*) G__getstructoffset())->GetRPNPlanesDividedByTwo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const RawVsSimuPotComparator*) G__getstructoffset())->GetRPPlanes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const RawVsSimuPotComparator*) G__getstructoffset())->GetNSectors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const RawVsSimuPotComparator*) G__getstructoffset())->GetNStrips());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const RawVsSimuPotComparator*) G__getstructoffset())->hasTheSameRawSimuCCoutputPattern());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const RawVsSimuPotComparator*) G__getstructoffset())->hasTheSameRawSimuCCoutputPattern((EDetOrientation) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) RawVsSimuPotComparator::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RawVsSimuPotComparator::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) RawVsSimuPotComparator::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      RawVsSimuPotComparator::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RawVsSimuPotComparator*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RawVsSimuPotComparator::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RawVsSimuPotComparator::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RawVsSimuPotComparator::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RawVsSimuPotComparator::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   RawVsSimuPotComparator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new RawVsSimuPotComparator(*(RawVsSimuPotComparator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RawVsSimuPotComparator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RawVsSimuPotComparator G__TRawVsSimuPotComparator;
static int G__L1TriggerTotemCoincidenceChipLinkDef_240_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RawVsSimuPotComparator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RawVsSimuPotComparator*) (soff+(sizeof(RawVsSimuPotComparator)*i)))->~G__TRawVsSimuPotComparator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RawVsSimuPotComparator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RawVsSimuPotComparator*) (soff))->~G__TRawVsSimuPotComparator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TriggerStatCollection<TriggerStat2> */
static int G__L1TriggerTotemCoincidenceChipLinkDef_241_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TriggerStatCollection<TriggerStat2>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TriggerStatCollection<TriggerStat2>[n];
     } else {
       p = new((void*) gvp) TriggerStatCollection<TriggerStat2>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TriggerStatCollection<TriggerStat2>;
     } else {
       p = new((void*) gvp) TriggerStatCollection<TriggerStat2>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStat2gR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_241_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TriggerStatCollection<TriggerStat2>*) G__getstructoffset())->AddIfNotExists(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_241_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TriggerStatCollection<TriggerStat2>*) G__getstructoffset())->AddIfNotExists((TriggerStat2*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_241_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TriggerStatCollection<TriggerStat2>*) G__getstructoffset())->Find(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_241_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TriggerStatCollection<TriggerStat2>*) G__getstructoffset())->AssertFind(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_241_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TriggerStatCollection<TriggerStat2>*) G__getstructoffset())->AssertFind(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_241_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TriggerStatCollection<TriggerStat2>*) G__getstructoffset())->Find(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_241_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TriggerStatCollection<TriggerStat2>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_241_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TriggerStatCollection<TriggerStat2>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_241_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TriggerStatCollection<TriggerStat2>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_241_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TriggerStatCollection<TriggerStat2>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_241_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TriggerStatCollection<TriggerStat2>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_241_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TriggerStatCollection<TriggerStat2>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_241_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TriggerStatCollection<TriggerStat2>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_241_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TriggerStatCollection<TriggerStat2>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_241_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TriggerStatCollection<TriggerStat2>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__L1TriggerTotemCoincidenceChipLinkDef_241_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TriggerStatCollection<TriggerStat2>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TriggerStatCollection<TriggerStat2>(*(TriggerStatCollection<TriggerStat2>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStat2gR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TriggerStatCollection<TriggerStat2> G__TTriggerStatCollectionlETriggerStat2gR;
static int G__L1TriggerTotemCoincidenceChipLinkDef_241_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TriggerStatCollection<TriggerStat2>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TriggerStatCollection<TriggerStat2>*) (soff+(sizeof(TriggerStatCollection<TriggerStat2>)*i)))->~G__TTriggerStatCollectionlETriggerStat2gR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TriggerStatCollection<TriggerStat2>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TriggerStatCollection<TriggerStat2>*) (soff))->~G__TTriggerStatCollectionlETriggerStat2gR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__L1TriggerTotemCoincidenceChipLinkDef_241_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TriggerStatCollection<TriggerStat2>* dest = (TriggerStatCollection<TriggerStat2>*) G__getstructoffset();
   *dest = *(TriggerStatCollection<TriggerStat2>*) libp->para[0].ref;
   const TriggerStatCollection<TriggerStat2>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<TriggerStat2*,allocator<TriggerStat2*> > */
static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TriggerStat2*,allocator<TriggerStat2*> >::reference obj = ((vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->at((vector<TriggerStat2*,allocator<TriggerStat2*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TriggerStat2*,allocator<TriggerStat2*> >::const_reference obj = ((const vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->at((vector<TriggerStat2*,allocator<TriggerStat2*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator* pobj;
         vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator xobj = ((vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->begin();
         pobj = new vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator* pobj;
         vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator xobj = ((vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->end();
         pobj = new vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TriggerStat2*,allocator<TriggerStat2*> >::reverse_iterator* pobj;
         vector<TriggerStat2*,allocator<TriggerStat2*> >::reverse_iterator xobj = ((vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->rbegin();
         pobj = new vector<TriggerStat2*,allocator<TriggerStat2*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TriggerStat2*,allocator<TriggerStat2*> >::reverse_iterator* pobj;
         vector<TriggerStat2*,allocator<TriggerStat2*> >::reverse_iterator xobj = ((vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->rend();
         pobj = new vector<TriggerStat2*,allocator<TriggerStat2*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->resize((vector<TriggerStat2*,allocator<TriggerStat2*> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->resize((vector<TriggerStat2*,allocator<TriggerStat2*> >::size_type) G__int(libp->para[0]), (TriggerStat2*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TriggerStat2*,allocator<TriggerStat2*> >::reference obj = ((vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->operator[]((vector<TriggerStat2*,allocator<TriggerStat2*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TriggerStat2*,allocator<TriggerStat2*> >::const_reference obj = ((const vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->operator[]((vector<TriggerStat2*,allocator<TriggerStat2*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TriggerStat2*,allocator<TriggerStat2*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TriggerStat2*,allocator<TriggerStat2*> >[n];
     } else {
       p = new((void*) gvp) vector<TriggerStat2*,allocator<TriggerStat2*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TriggerStat2*,allocator<TriggerStat2*> >;
     } else {
       p = new((void*) gvp) vector<TriggerStat2*,allocator<TriggerStat2*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TriggerStat2*,allocator<TriggerStat2*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TriggerStat2*,allocator<TriggerStat2*> >((vector<TriggerStat2*,allocator<TriggerStat2*> >::size_type) G__int(libp->para[0]), libp->para[1].ref ? *(TriggerStat2**) libp->para[1].ref : *(TriggerStat2**) (void*) (&G__Mlong(libp->para[1])));
     } else {
       p = new((void*) gvp) vector<TriggerStat2*,allocator<TriggerStat2*> >((vector<TriggerStat2*,allocator<TriggerStat2*> >::size_type) G__int(libp->para[0]), libp->para[1].ref ? *(TriggerStat2**) libp->para[1].ref : *(TriggerStat2**) (void*) (&G__Mlong(libp->para[1])));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TriggerStat2*,allocator<TriggerStat2*> >((vector<TriggerStat2*,allocator<TriggerStat2*> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<TriggerStat2*,allocator<TriggerStat2*> >((vector<TriggerStat2*,allocator<TriggerStat2*> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TriggerStat2*,allocator<TriggerStat2*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<TriggerStat2*,allocator<TriggerStat2*> >(*(vector<TriggerStat2*,allocator<TriggerStat2*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<TriggerStat2*,allocator<TriggerStat2*> >(*(vector<TriggerStat2*,allocator<TriggerStat2*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TriggerStat2*,allocator<TriggerStat2*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<TriggerStat2*,allocator<TriggerStat2*> >(*((vector<TriggerStat2*,allocator<TriggerStat2*> >::const_iterator*) G__int(libp->para[0])), *((vector<TriggerStat2*,allocator<TriggerStat2*> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<TriggerStat2*,allocator<TriggerStat2*> >(*((vector<TriggerStat2*,allocator<TriggerStat2*> >::const_iterator*) G__int(libp->para[0])), *((vector<TriggerStat2*,allocator<TriggerStat2*> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TriggerStat2*,allocator<TriggerStat2*> >& obj = ((vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->operator=(*(vector<TriggerStat2*,allocator<TriggerStat2*> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->reserve((vector<TriggerStat2*,allocator<TriggerStat2*> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TriggerStat2*& obj = ((vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TriggerStat2*& obj = ((vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->push_back(libp->para[0].ref ? *(TriggerStat2**) libp->para[0].ref : *(TriggerStat2**) (void*) (&G__Mlong(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->swap(*(vector<TriggerStat2*,allocator<TriggerStat2*> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator* pobj;
         vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator xobj = ((vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->insert(*((vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator*) G__int(libp->para[0])), libp->para[1].ref ? *(TriggerStat2**) libp->para[1].ref : *(TriggerStat2**) (void*) (&G__Mlong(libp->para[1])));
         pobj = new vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->insert(*((vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator*) G__int(libp->para[0])), *((vector<TriggerStat2*,allocator<TriggerStat2*> >::const_iterator*) G__int(libp->para[1]))
, *((vector<TriggerStat2*,allocator<TriggerStat2*> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->insert(*((vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator*) G__int(libp->para[0])), (vector<TriggerStat2*,allocator<TriggerStat2*> >::size_type) G__int(libp->para[1])
, libp->para[2].ref ? *(TriggerStat2**) libp->para[2].ref : *(TriggerStat2**) (void*) (&G__Mlong(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->erase(*((vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->erase(*((vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator*) G__int(libp->para[0])), *((vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TriggerStat2*,allocator<TriggerStat2*> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<TriggerStat2*,allocator<TriggerStat2*> > G__TvectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR;
static int G__L1TriggerTotemCoincidenceChipLinkDef_243_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<TriggerStat2*,allocator<TriggerStat2*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<TriggerStat2*,allocator<TriggerStat2*> >*) (soff+(sizeof(vector<TriggerStat2*,allocator<TriggerStat2*> >)*i)))->~G__TvectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<TriggerStat2*,allocator<TriggerStat2*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<TriggerStat2*,allocator<TriggerStat2*> >*) (soff))->~G__TvectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<TH1D*,allocator<TH1D*> > */
static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TH1D*,allocator<TH1D*> >::reference obj = ((vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->at((vector<TH1D*,allocator<TH1D*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TH1D*,allocator<TH1D*> >::const_reference obj = ((const vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->at((vector<TH1D*,allocator<TH1D*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TH1D*,allocator<TH1D*> >::iterator* pobj;
         vector<TH1D*,allocator<TH1D*> >::iterator xobj = ((vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->begin();
         pobj = new vector<TH1D*,allocator<TH1D*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TH1D*,allocator<TH1D*> >::iterator* pobj;
         vector<TH1D*,allocator<TH1D*> >::iterator xobj = ((vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->end();
         pobj = new vector<TH1D*,allocator<TH1D*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TH1D*,allocator<TH1D*> >::reverse_iterator* pobj;
         vector<TH1D*,allocator<TH1D*> >::reverse_iterator xobj = ((vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->rbegin();
         pobj = new vector<TH1D*,allocator<TH1D*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TH1D*,allocator<TH1D*> >::reverse_iterator* pobj;
         vector<TH1D*,allocator<TH1D*> >::reverse_iterator xobj = ((vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->rend();
         pobj = new vector<TH1D*,allocator<TH1D*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->resize((vector<TH1D*,allocator<TH1D*> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->resize((vector<TH1D*,allocator<TH1D*> >::size_type) G__int(libp->para[0]), (TH1D*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TH1D*,allocator<TH1D*> >::reference obj = ((vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->operator[]((vector<TH1D*,allocator<TH1D*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TH1D*,allocator<TH1D*> >::const_reference obj = ((const vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->operator[]((vector<TH1D*,allocator<TH1D*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TH1D*,allocator<TH1D*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TH1D*,allocator<TH1D*> >[n];
     } else {
       p = new((void*) gvp) vector<TH1D*,allocator<TH1D*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TH1D*,allocator<TH1D*> >;
     } else {
       p = new((void*) gvp) vector<TH1D*,allocator<TH1D*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TH1D*,allocator<TH1D*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TH1D*,allocator<TH1D*> >((vector<TH1D*,allocator<TH1D*> >::size_type) G__int(libp->para[0]), libp->para[1].ref ? *(TH1D**) libp->para[1].ref : *(TH1D**) (void*) (&G__Mlong(libp->para[1])));
     } else {
       p = new((void*) gvp) vector<TH1D*,allocator<TH1D*> >((vector<TH1D*,allocator<TH1D*> >::size_type) G__int(libp->para[0]), libp->para[1].ref ? *(TH1D**) libp->para[1].ref : *(TH1D**) (void*) (&G__Mlong(libp->para[1])));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TH1D*,allocator<TH1D*> >((vector<TH1D*,allocator<TH1D*> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<TH1D*,allocator<TH1D*> >((vector<TH1D*,allocator<TH1D*> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TH1D*,allocator<TH1D*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<TH1D*,allocator<TH1D*> >(*(vector<TH1D*,allocator<TH1D*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<TH1D*,allocator<TH1D*> >(*(vector<TH1D*,allocator<TH1D*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TH1D*,allocator<TH1D*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<TH1D*,allocator<TH1D*> >(*((vector<TH1D*,allocator<TH1D*> >::const_iterator*) G__int(libp->para[0])), *((vector<TH1D*,allocator<TH1D*> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<TH1D*,allocator<TH1D*> >(*((vector<TH1D*,allocator<TH1D*> >::const_iterator*) G__int(libp->para[0])), *((vector<TH1D*,allocator<TH1D*> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TH1D*,allocator<TH1D*> >& obj = ((vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->operator=(*(vector<TH1D*,allocator<TH1D*> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->reserve((vector<TH1D*,allocator<TH1D*> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TH1D*& obj = ((vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TH1D*& obj = ((vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->push_back(libp->para[0].ref ? *(TH1D**) libp->para[0].ref : *(TH1D**) (void*) (&G__Mlong(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->swap(*(vector<TH1D*,allocator<TH1D*> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TH1D*,allocator<TH1D*> >::iterator* pobj;
         vector<TH1D*,allocator<TH1D*> >::iterator xobj = ((vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->insert(*((vector<TH1D*,allocator<TH1D*> >::iterator*) G__int(libp->para[0])), libp->para[1].ref ? *(TH1D**) libp->para[1].ref : *(TH1D**) (void*) (&G__Mlong(libp->para[1])));
         pobj = new vector<TH1D*,allocator<TH1D*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->insert(*((vector<TH1D*,allocator<TH1D*> >::iterator*) G__int(libp->para[0])), *((vector<TH1D*,allocator<TH1D*> >::const_iterator*) G__int(libp->para[1]))
, *((vector<TH1D*,allocator<TH1D*> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->insert(*((vector<TH1D*,allocator<TH1D*> >::iterator*) G__int(libp->para[0])), (vector<TH1D*,allocator<TH1D*> >::size_type) G__int(libp->para[1])
, libp->para[2].ref ? *(TH1D**) libp->para[2].ref : *(TH1D**) (void*) (&G__Mlong(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->erase(*((vector<TH1D*,allocator<TH1D*> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->erase(*((vector<TH1D*,allocator<TH1D*> >::iterator*) G__int(libp->para[0])), *((vector<TH1D*,allocator<TH1D*> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TH1D*,allocator<TH1D*> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<TH1D*,allocator<TH1D*> > G__TvectorlETH1DmUcOallocatorlETH1DmUgRsPgR;
static int G__L1TriggerTotemCoincidenceChipLinkDef_247_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<TH1D*,allocator<TH1D*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<TH1D*,allocator<TH1D*> >*) (soff+(sizeof(vector<TH1D*,allocator<TH1D*> >)*i)))->~G__TvectorlETH1DmUcOallocatorlETH1DmUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<TH1D*,allocator<TH1D*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<TH1D*,allocator<TH1D*> >*) (soff))->~G__TvectorlETH1DmUcOallocatorlETH1DmUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<TH2D*,allocator<TH2D*> > */
static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TH2D*,allocator<TH2D*> >::reference obj = ((vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->at((vector<TH2D*,allocator<TH2D*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TH2D*,allocator<TH2D*> >::const_reference obj = ((const vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->at((vector<TH2D*,allocator<TH2D*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TH2D*,allocator<TH2D*> >::iterator* pobj;
         vector<TH2D*,allocator<TH2D*> >::iterator xobj = ((vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->begin();
         pobj = new vector<TH2D*,allocator<TH2D*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TH2D*,allocator<TH2D*> >::iterator* pobj;
         vector<TH2D*,allocator<TH2D*> >::iterator xobj = ((vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->end();
         pobj = new vector<TH2D*,allocator<TH2D*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TH2D*,allocator<TH2D*> >::reverse_iterator* pobj;
         vector<TH2D*,allocator<TH2D*> >::reverse_iterator xobj = ((vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->rbegin();
         pobj = new vector<TH2D*,allocator<TH2D*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TH2D*,allocator<TH2D*> >::reverse_iterator* pobj;
         vector<TH2D*,allocator<TH2D*> >::reverse_iterator xobj = ((vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->rend();
         pobj = new vector<TH2D*,allocator<TH2D*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->resize((vector<TH2D*,allocator<TH2D*> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->resize((vector<TH2D*,allocator<TH2D*> >::size_type) G__int(libp->para[0]), (TH2D*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TH2D*,allocator<TH2D*> >::reference obj = ((vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->operator[]((vector<TH2D*,allocator<TH2D*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TH2D*,allocator<TH2D*> >::const_reference obj = ((const vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->operator[]((vector<TH2D*,allocator<TH2D*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TH2D*,allocator<TH2D*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TH2D*,allocator<TH2D*> >[n];
     } else {
       p = new((void*) gvp) vector<TH2D*,allocator<TH2D*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TH2D*,allocator<TH2D*> >;
     } else {
       p = new((void*) gvp) vector<TH2D*,allocator<TH2D*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TH2D*,allocator<TH2D*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TH2D*,allocator<TH2D*> >((vector<TH2D*,allocator<TH2D*> >::size_type) G__int(libp->para[0]), libp->para[1].ref ? *(TH2D**) libp->para[1].ref : *(TH2D**) (void*) (&G__Mlong(libp->para[1])));
     } else {
       p = new((void*) gvp) vector<TH2D*,allocator<TH2D*> >((vector<TH2D*,allocator<TH2D*> >::size_type) G__int(libp->para[0]), libp->para[1].ref ? *(TH2D**) libp->para[1].ref : *(TH2D**) (void*) (&G__Mlong(libp->para[1])));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TH2D*,allocator<TH2D*> >((vector<TH2D*,allocator<TH2D*> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<TH2D*,allocator<TH2D*> >((vector<TH2D*,allocator<TH2D*> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TH2D*,allocator<TH2D*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<TH2D*,allocator<TH2D*> >(*(vector<TH2D*,allocator<TH2D*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<TH2D*,allocator<TH2D*> >(*(vector<TH2D*,allocator<TH2D*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TH2D*,allocator<TH2D*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<TH2D*,allocator<TH2D*> >(*((vector<TH2D*,allocator<TH2D*> >::const_iterator*) G__int(libp->para[0])), *((vector<TH2D*,allocator<TH2D*> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<TH2D*,allocator<TH2D*> >(*((vector<TH2D*,allocator<TH2D*> >::const_iterator*) G__int(libp->para[0])), *((vector<TH2D*,allocator<TH2D*> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TH2D*,allocator<TH2D*> >& obj = ((vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->operator=(*(vector<TH2D*,allocator<TH2D*> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->reserve((vector<TH2D*,allocator<TH2D*> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TH2D*& obj = ((vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TH2D*& obj = ((vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->push_back(libp->para[0].ref ? *(TH2D**) libp->para[0].ref : *(TH2D**) (void*) (&G__Mlong(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->swap(*(vector<TH2D*,allocator<TH2D*> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TH2D*,allocator<TH2D*> >::iterator* pobj;
         vector<TH2D*,allocator<TH2D*> >::iterator xobj = ((vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->insert(*((vector<TH2D*,allocator<TH2D*> >::iterator*) G__int(libp->para[0])), libp->para[1].ref ? *(TH2D**) libp->para[1].ref : *(TH2D**) (void*) (&G__Mlong(libp->para[1])));
         pobj = new vector<TH2D*,allocator<TH2D*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->insert(*((vector<TH2D*,allocator<TH2D*> >::iterator*) G__int(libp->para[0])), *((vector<TH2D*,allocator<TH2D*> >::const_iterator*) G__int(libp->para[1]))
, *((vector<TH2D*,allocator<TH2D*> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->insert(*((vector<TH2D*,allocator<TH2D*> >::iterator*) G__int(libp->para[0])), (vector<TH2D*,allocator<TH2D*> >::size_type) G__int(libp->para[1])
, libp->para[2].ref ? *(TH2D**) libp->para[2].ref : *(TH2D**) (void*) (&G__Mlong(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->erase(*((vector<TH2D*,allocator<TH2D*> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->erase(*((vector<TH2D*,allocator<TH2D*> >::iterator*) G__int(libp->para[0])), *((vector<TH2D*,allocator<TH2D*> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TH2D*,allocator<TH2D*> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<TH2D*,allocator<TH2D*> > G__TvectorlETH2DmUcOallocatorlETH2DmUgRsPgR;
static int G__L1TriggerTotemCoincidenceChipLinkDef_251_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<TH2D*,allocator<TH2D*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<TH2D*,allocator<TH2D*> >*) (soff+(sizeof(vector<TH2D*,allocator<TH2D*> >)*i)))->~G__TvectorlETH2DmUcOallocatorlETH2DmUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<TH2D*,allocator<TH2D*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<TH2D*,allocator<TH2D*> >*) (soff))->~G__TvectorlETH2DmUcOallocatorlETH2DmUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* PotCollection */
static int G__L1TriggerTotemCoincidenceChipLinkDef_254_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PotCollection* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PotCollection[n];
     } else {
       p = new((void*) gvp) PotCollection[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PotCollection;
     } else {
       p = new((void*) gvp) PotCollection;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_PotCollection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_254_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const PotCollection*) G__getstructoffset())->FindPot((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_254_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((PotCollection*) G__getstructoffset())->FindPot((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_254_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((PotCollection*) G__getstructoffset())->CreateNewRPCCInput(*(edm::Event*) libp->para[0].ref, *((const string*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_254_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) PotCollection::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_254_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PotCollection::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_254_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) PotCollection::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_254_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      PotCollection::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_254_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((PotCollection*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_254_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PotCollection::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_254_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) PotCollection::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_254_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PotCollection::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_254_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) PotCollection::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__L1TriggerTotemCoincidenceChipLinkDef_254_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   PotCollection* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new PotCollection(*(PotCollection*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_PotCollection));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef PotCollection G__TPotCollection;
static int G__L1TriggerTotemCoincidenceChipLinkDef_254_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (PotCollection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((PotCollection*) (soff+(sizeof(PotCollection)*i)))->~G__TPotCollection();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (PotCollection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((PotCollection*) (soff))->~G__TPotCollection();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__L1TriggerTotemCoincidenceChipLinkDef_254_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PotCollection* dest = (PotCollection*) G__getstructoffset();
   *dest = *(PotCollection*) libp->para[0].ref;
   const PotCollection& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> > */
static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::reference obj = ((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->at((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::const_reference obj = ((const vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->at((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator* pobj;
         vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator xobj = ((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->begin();
         pobj = new vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator* pobj;
         vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator xobj = ((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->end();
         pobj = new vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::reverse_iterator* pobj;
         vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::reverse_iterator xobj = ((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->rbegin();
         pobj = new vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::reverse_iterator* pobj;
         vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::reverse_iterator xobj = ((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->rend();
         pobj = new vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->resize((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->resize((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::size_type) G__int(libp->para[0]), (RawVsSimuPotComparator*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::reference obj = ((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->operator[]((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::const_reference obj = ((const vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->operator[]((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >[n];
     } else {
       p = new((void*) gvp) vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >;
     } else {
       p = new((void*) gvp) vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::size_type) G__int(libp->para[0]), libp->para[1].ref ? *(RawVsSimuPotComparator**) libp->para[1].ref : *(RawVsSimuPotComparator**) (void*) (&G__Mlong(libp->para[1])));
     } else {
       p = new((void*) gvp) vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::size_type) G__int(libp->para[0]), libp->para[1].ref ? *(RawVsSimuPotComparator**) libp->para[1].ref : *(RawVsSimuPotComparator**) (void*) (&G__Mlong(libp->para[1])));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >(*(vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >(*(vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >(*((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::const_iterator*) G__int(libp->para[0])), *((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >(*((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::const_iterator*) G__int(libp->para[0])), *((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >& obj = ((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->operator=(*(vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->reserve((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         RawVsSimuPotComparator*& obj = ((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         RawVsSimuPotComparator*& obj = ((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->push_back(libp->para[0].ref ? *(RawVsSimuPotComparator**) libp->para[0].ref : *(RawVsSimuPotComparator**) (void*) (&G__Mlong(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->swap(*(vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator* pobj;
         vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator xobj = ((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->insert(*((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator*) G__int(libp->para[0])), libp->para[1].ref ? *(RawVsSimuPotComparator**) libp->para[1].ref : *(RawVsSimuPotComparator**) (void*) (&G__Mlong(libp->para[1])));
         pobj = new vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->insert(*((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator*) G__int(libp->para[0])), *((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::const_iterator*) G__int(libp->para[1]))
, *((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->insert(*((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator*) G__int(libp->para[0])), (vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::size_type) G__int(libp->para[1])
, libp->para[2].ref ? *(RawVsSimuPotComparator**) libp->para[2].ref : *(RawVsSimuPotComparator**) (void*) (&G__Mlong(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->erase(*((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->erase(*((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator*) G__int(libp->para[0])), *((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> > G__TvectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR;
static int G__L1TriggerTotemCoincidenceChipLinkDef_256_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) (soff+(sizeof(vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >)*i)))->~G__TvectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*) (soff))->~G__TvectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RPTriggerAnalyzerInfoCollector */
static int G__L1TriggerTotemCoincidenceChipLinkDef_259_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RPTriggerAnalyzerInfoCollector* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RPTriggerAnalyzerInfoCollector(*(TString*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) RPTriggerAnalyzerInfoCollector(*(TString*) libp->para[0].ref);
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new RPTriggerAnalyzerInfoCollector[n];
       } else {
         p = new((void*) gvp) RPTriggerAnalyzerInfoCollector[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new RPTriggerAnalyzerInfoCollector;
       } else {
         p = new((void*) gvp) RPTriggerAnalyzerInfoCollector;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RPTriggerAnalyzerInfoCollector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_259_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) RPTriggerAnalyzerInfoCollector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_259_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RPTriggerAnalyzerInfoCollector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_259_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) RPTriggerAnalyzerInfoCollector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_259_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      RPTriggerAnalyzerInfoCollector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_259_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RPTriggerAnalyzerInfoCollector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_259_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RPTriggerAnalyzerInfoCollector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_259_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RPTriggerAnalyzerInfoCollector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_259_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RPTriggerAnalyzerInfoCollector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__L1TriggerTotemCoincidenceChipLinkDef_259_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RPTriggerAnalyzerInfoCollector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__L1TriggerTotemCoincidenceChipLinkDef_259_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   RPTriggerAnalyzerInfoCollector* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new RPTriggerAnalyzerInfoCollector(*(RPTriggerAnalyzerInfoCollector*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RPTriggerAnalyzerInfoCollector));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RPTriggerAnalyzerInfoCollector G__TRPTriggerAnalyzerInfoCollector;
static int G__L1TriggerTotemCoincidenceChipLinkDef_259_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RPTriggerAnalyzerInfoCollector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RPTriggerAnalyzerInfoCollector*) (soff+(sizeof(RPTriggerAnalyzerInfoCollector)*i)))->~G__TRPTriggerAnalyzerInfoCollector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RPTriggerAnalyzerInfoCollector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RPTriggerAnalyzerInfoCollector*) (soff))->~G__TRPTriggerAnalyzerInfoCollector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__L1TriggerTotemCoincidenceChipLinkDef_259_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RPTriggerAnalyzerInfoCollector* dest = (RPTriggerAnalyzerInfoCollector*) G__getstructoffset();
   *dest = *(RPTriggerAnalyzerInfoCollector*) libp->para[0].ref;
   const RPTriggerAnalyzerInfoCollector& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* PreTriggerStat */

/* TriggerStat */

/* TriggerStat2 */

/* TwoHalfPot */

/* TriggerStatCollection<TriggerStat> */

/* vector<TriggerStat*,allocator<TriggerStat*> > */

/* RawVsSimuPotComparator */

/* TriggerStatCollection<TriggerStat2> */

/* vector<TriggerStat2*,allocator<TriggerStat2*> > */

/* vector<TH1D*,allocator<TH1D*> > */

/* vector<TH2D*,allocator<TH2D*> > */

/* PotCollection */

/* vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> > */

/* RPTriggerAnalyzerInfoCollector */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncL1TriggerTotemCoincidenceChipLinkDef {
 public:
  G__Sizep2memfuncL1TriggerTotemCoincidenceChipLinkDef(): p(&G__Sizep2memfuncL1TriggerTotemCoincidenceChipLinkDef::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncL1TriggerTotemCoincidenceChipLinkDef::*p)();
};

size_t G__get_sizep2memfuncL1TriggerTotemCoincidenceChipLinkDef()
{
  G__Sizep2memfuncL1TriggerTotemCoincidenceChipLinkDef a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceL1TriggerTotemCoincidenceChipLinkDef() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_PreTriggerStat))) {
     PreTriggerStat *G__Lderived;
     G__Lderived=(PreTriggerStat*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_PreTriggerStat),G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_PreTriggerStat),G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat))) {
     TriggerStat *G__Lderived;
     G__Lderived=(TriggerStat*)0x1000;
     {
       PreTriggerStat *G__Lpbase=(PreTriggerStat*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat),G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_PreTriggerStat),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat),G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat),G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2))) {
     TriggerStat2 *G__Lderived;
     G__Lderived=(TriggerStat2*)0x1000;
     {
       PreTriggerStat *G__Lpbase=(PreTriggerStat*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2),G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_PreTriggerStat),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2),G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2),G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStatgR))) {
     TriggerStatCollection<TriggerStat> *G__Lderived;
     G__Lderived=(TriggerStatCollection<TriggerStat>*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStatgR),G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       vector<TriggerStat*,allocator<TriggerStat*> > *G__Lpbase=(vector<TriggerStat*,allocator<TriggerStat*> >*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStatgR),G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RawVsSimuPotComparator))) {
     RawVsSimuPotComparator *G__Lderived;
     G__Lderived=(RawVsSimuPotComparator*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RawVsSimuPotComparator),G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RawVsSimuPotComparator),G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStat2gR))) {
     TriggerStatCollection<TriggerStat2> *G__Lderived;
     G__Lderived=(TriggerStatCollection<TriggerStat2>*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStat2gR),G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       vector<TriggerStat2*,allocator<TriggerStat2*> > *G__Lpbase=(vector<TriggerStat2*,allocator<TriggerStat2*> >*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStat2gR),G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_PotCollection))) {
     PotCollection *G__Lderived;
     G__Lderived=(PotCollection*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_PotCollection),G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> > *G__Lpbase=(vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_PotCollection),G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RPTriggerAnalyzerInfoCollector))) {
     RPTriggerAnalyzerInfoCollector *G__Lderived;
     G__Lderived=(RPTriggerAnalyzerInfoCollector*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RPTriggerAnalyzerInfoCollector),G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RPTriggerAnalyzerInfoCollector),G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableL1TriggerTotemCoincidenceChipLinkDef() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TriggerStat*>",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",85,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat),256,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",85,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat),1,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",85,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat),257,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TriggerStat2*>",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",85,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2),256,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",85,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2),1,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",85,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2),257,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TH1D*>",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",85,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TH1D),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TH1D),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TH1D),256,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",85,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TH1D),1,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",85,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TH1D),257,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETH1DmUcOallocatorlETH1DmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETH1DmUcOallocatorlETH1DmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETH1DmUcOallocatorlETH1DmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETH1DmUcOallocatorlETH1DmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TH2D*>",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",85,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TH2D),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TH2D),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TH2D),256,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",85,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TH2D),1,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",85,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TH2D),257,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETH2DmUcOallocatorlETH2DmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETH2DmUcOallocatorlETH2DmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETH2DmUcOallocatorlETH2DmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETH2DmUcOallocatorlETH2DmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<RawVsSimuPotComparator*>",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",85,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RawVsSimuPotComparator),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RawVsSimuPotComparator),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RawVsSimuPotComparator),256,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",85,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RawVsSimuPotComparator),1,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",85,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RawVsSimuPotComparator),257,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* PreTriggerStat */
static void G__setup_memvarPreTriggerStat(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_PreTriggerStat));
   { PreTriggerStat *p; p=(PreTriggerStat*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fConditions)-(long)(p)),104,0,0,-1,-1,-1,1,"fConditions=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TriggerStat */
static void G__setup_memvarTriggerStat(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat));
   { TriggerStat *p; p=(TriggerStat*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fConditionANDTrigger)-(long)(p)),104,0,0,-1,-1,-1,1,"fConditionANDTrigger=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fConditionANDNoTrigger)-(long)(p)),104,0,0,-1,-1,-1,1,"fConditionANDNoTrigger=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TriggerStat2 */
static void G__setup_memvarTriggerStat2(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2));
   { TriggerStat2 *p; p=(TriggerStat2*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fConditionANDRawSimuCCoutputTheSame)-(long)(p)),104,0,0,-1,-1,-1,1,"fConditionANDRawSimuCCoutputTheSame=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fConditionANDRawSimuCCoutputNotTheSame)-(long)(p)),104,0,0,-1,-1,-1,1,"fConditionANDRawSimuCCoutputNotTheSame=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fConditionANDRawSimuCCoutputNotTheSameOdd)-(long)(p)),104,0,0,-1,-1,-1,1,"fConditionANDRawSimuCCoutputNotTheSameOdd=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fConditionANDRawSimuCCoutputNotTheSameEven)-(long)(p)),104,0,0,-1,-1,-1,1,"fConditionANDRawSimuCCoutputNotTheSameEven=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fConditionANDRawSimuCCoutputNotTheSameEvenOdd)-(long)(p)),104,0,0,-1,-1,-1,1,"fConditionANDRawSimuCCoutputNotTheSameEvenOdd=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fConditionANDTriggerRaw0Simu0)-(long)(p)),104,0,0,-1,-1,-1,1,"fConditionANDTriggerRaw0Simu0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fConditionANDTriggerRaw1Simu0)-(long)(p)),104,0,0,-1,-1,-1,1,"fConditionANDTriggerRaw1Simu0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fConditionANDTriggerRaw0Simu1)-(long)(p)),104,0,0,-1,-1,-1,1,"fConditionANDTriggerRaw0Simu1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fConditionANDTriggerRaw1Simu1)-(long)(p)),104,0,0,-1,-1,-1,1,"fConditionANDTriggerRaw1Simu1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TwoHalfPot */
static void G__setup_memvarTwoHalfPot(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TwoHalfPot));
   { TwoHalfPot *p; p=(TwoHalfPot*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fType)-(long)(p)),105,0,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_ERawOrSimu),-1,-1,1,"fType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fConditionalTriggerStat)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStatgR),-1,-1,1,"fConditionalTriggerStat=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,1,1,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_edmcLcLParameterSet),-1,-1,4,"fConfig=",0,"!");
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"verbosity=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,1,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_HalfPot),-1,-1,4,"fOddHalfPot=",0,"!");
   G__memvar_setup((void*)0,117,1,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_HalfPot),-1,-1,4,"fEvenHalfPot=",0,"!");
   }
   G__tag_memvar_reset();
}


   /* TriggerStatCollection<TriggerStat> */
static void G__setup_memvarTriggerStatCollectionlETriggerStatgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStatgR));
   { TriggerStatCollection<TriggerStat> *p; p=(TriggerStatCollection<TriggerStat>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<TriggerStat*,allocator<TriggerStat*> > */
static void G__setup_memvarvectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR));
   { vector<TriggerStat*,allocator<TriggerStat*> > *p; p=(vector<TriggerStat*,allocator<TriggerStat*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* RawVsSimuPotComparator */
static void G__setup_memvarRawVsSimuPotComparator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RawVsSimuPotComparator));
   { RawVsSimuPotComparator *p; p=(RawVsSimuPotComparator*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fConditionalTriggerStat)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStat2gR),-1,-1,1,"fConditionalTriggerStat=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,1,1,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_edmcLcLParameterSet),-1,-1,4,"fConfig=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TwoHalfPot),-1,-1,4,"fPotRaw=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TwoHalfPot),-1,-1,4,"fPotSimu=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"verbosity=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_string),-1,-1,4,"detTriggerLabel=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_string),-1,-1,4,"fittedTrackCollectionLabel=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_string),-1,-1,4,"stripDigiLabel=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fNEmptyEvents)-(long)(p)),104,0,0,-1,-1,-1,1,"fNEmptyEvents=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fHist1D)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR),G__defined_typename("vector<TH1D*>"),-1,1,"fHist1D=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fHist2D)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR),G__defined_typename("vector<TH2D*>"),-1,1,"fHist2D=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TriggerStatCollection<TriggerStat2> */
static void G__setup_memvarTriggerStatCollectionlETriggerStat2gR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStat2gR));
   { TriggerStatCollection<TriggerStat2> *p; p=(TriggerStatCollection<TriggerStat2>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<TriggerStat2*,allocator<TriggerStat2*> > */
static void G__setup_memvarvectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR));
   { vector<TriggerStat2*,allocator<TriggerStat2*> > *p; p=(vector<TriggerStat2*,allocator<TriggerStat2*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<TH1D*,allocator<TH1D*> > */
static void G__setup_memvarvectorlETH1DmUcOallocatorlETH1DmUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR));
   { vector<TH1D*,allocator<TH1D*> > *p; p=(vector<TH1D*,allocator<TH1D*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<TH2D*,allocator<TH2D*> > */
static void G__setup_memvarvectorlETH2DmUcOallocatorlETH2DmUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR));
   { vector<TH2D*,allocator<TH2D*> > *p; p=(vector<TH2D*,allocator<TH2D*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* PotCollection */
static void G__setup_memvarPotCollection(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_PotCollection));
   { PotCollection *p; p=(PotCollection*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> > */
static void G__setup_memvarvectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR));
   { vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> > *p; p=(vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* RPTriggerAnalyzerInfoCollector */
static void G__setup_memvarRPTriggerAnalyzerInfoCollector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RPTriggerAnalyzerInfoCollector));
   { RPTriggerAnalyzerInfoCollector *p; p=(RPTriggerAnalyzerInfoCollector*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fNEvents)-(long)(p)),104,0,0,-1,-1,-1,1,"fNEvents=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fNEmptyEvents)-(long)(p)),104,0,0,-1,-1,-1,1,"fNEmptyEvents=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->runName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TString),-1,-1,1,"runName=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarL1TriggerTotemCoincidenceChipLinkDef() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncPreTriggerStat(void) {
   /* PreTriggerStat */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_PreTriggerStat));
   G__memfunc_setup("PreTriggerStat",1431,G__L1TriggerTotemCoincidenceChipLinkDef_226_0_1, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_PreTriggerStat), -1, 0, 1, 1, 1, 0, "u 'TString' - 11 '\"\"' iname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConditionNEvents",1930,G__L1TriggerTotemCoincidenceChipLinkDef_226_0_2, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RawOrSimuString",1536,G__L1TriggerTotemCoincidenceChipLinkDef_226_0_3, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TString), -1, 0, 1, 3, 1, 0, "i 'ERawOrSimu' - 0 - type", (char*)NULL, (void*) G__func2void( (TString (*)(ERawOrSimu))(&PreTriggerStat::RawOrSimuString) ), 0);
   G__memfunc_setup("Class",502,G__L1TriggerTotemCoincidenceChipLinkDef_226_0_4, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&PreTriggerStat::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__L1TriggerTotemCoincidenceChipLinkDef_226_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PreTriggerStat::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__L1TriggerTotemCoincidenceChipLinkDef_226_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&PreTriggerStat::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__L1TriggerTotemCoincidenceChipLinkDef_226_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&PreTriggerStat::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__L1TriggerTotemCoincidenceChipLinkDef_226_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__L1TriggerTotemCoincidenceChipLinkDef_226_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PreTriggerStat::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__L1TriggerTotemCoincidenceChipLinkDef_226_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&PreTriggerStat::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__L1TriggerTotemCoincidenceChipLinkDef_226_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PreTriggerStat::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__L1TriggerTotemCoincidenceChipLinkDef_226_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&PreTriggerStat::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("PreTriggerStat", 1431, G__L1TriggerTotemCoincidenceChipLinkDef_226_0_16, (int) ('i'), G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_PreTriggerStat), -1, 0, 1, 1, 1, 0, "u 'PreTriggerStat' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~PreTriggerStat", 1557, G__L1TriggerTotemCoincidenceChipLinkDef_226_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__L1TriggerTotemCoincidenceChipLinkDef_226_0_18, (int) ('u'), G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_PreTriggerStat), -1, 1, 1, 1, 1, 0, "u 'PreTriggerStat' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTriggerStat(void) {
   /* TriggerStat */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat));
   G__memfunc_setup("TriggerStat",1136,G__L1TriggerTotemCoincidenceChipLinkDef_227_0_1, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat), -1, 0, 1, 1, 1, 0, "u 'TString' - 11 '\"\"' iname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConditionNEvents",1930,G__L1TriggerTotemCoincidenceChipLinkDef_227_0_2, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__L1TriggerTotemCoincidenceChipLinkDef_227_0_3, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TriggerStat::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__L1TriggerTotemCoincidenceChipLinkDef_227_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TriggerStat::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__L1TriggerTotemCoincidenceChipLinkDef_227_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TriggerStat::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__L1TriggerTotemCoincidenceChipLinkDef_227_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TriggerStat::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__L1TriggerTotemCoincidenceChipLinkDef_227_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__L1TriggerTotemCoincidenceChipLinkDef_227_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TriggerStat::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__L1TriggerTotemCoincidenceChipLinkDef_227_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TriggerStat::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__L1TriggerTotemCoincidenceChipLinkDef_227_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TriggerStat::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__L1TriggerTotemCoincidenceChipLinkDef_227_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TriggerStat::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TriggerStat", 1136, G__L1TriggerTotemCoincidenceChipLinkDef_227_0_15, (int) ('i'), G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat), -1, 0, 1, 1, 1, 0, "u 'TriggerStat' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TriggerStat", 1262, G__L1TriggerTotemCoincidenceChipLinkDef_227_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__L1TriggerTotemCoincidenceChipLinkDef_227_0_17, (int) ('u'), G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat), -1, 1, 1, 1, 1, 0, "u 'TriggerStat' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTriggerStat2(void) {
   /* TriggerStat2 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2));
   G__memfunc_setup("TriggerStat2",1186,G__L1TriggerTotemCoincidenceChipLinkDef_228_0_1, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2), -1, 0, 1, 1, 1, 0, "u 'TString' - 11 '\"\"' iname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__L1TriggerTotemCoincidenceChipLinkDef_228_0_2, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TriggerStat2::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__L1TriggerTotemCoincidenceChipLinkDef_228_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TriggerStat2::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__L1TriggerTotemCoincidenceChipLinkDef_228_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TriggerStat2::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__L1TriggerTotemCoincidenceChipLinkDef_228_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TriggerStat2::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__L1TriggerTotemCoincidenceChipLinkDef_228_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__L1TriggerTotemCoincidenceChipLinkDef_228_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TriggerStat2::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__L1TriggerTotemCoincidenceChipLinkDef_228_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TriggerStat2::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__L1TriggerTotemCoincidenceChipLinkDef_228_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TriggerStat2::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__L1TriggerTotemCoincidenceChipLinkDef_228_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TriggerStat2::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TriggerStat2", 1186, G__L1TriggerTotemCoincidenceChipLinkDef_228_0_14, (int) ('i'), G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2), -1, 0, 1, 1, 1, 0, "u 'TriggerStat2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TriggerStat2", 1312, G__L1TriggerTotemCoincidenceChipLinkDef_228_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__L1TriggerTotemCoincidenceChipLinkDef_228_0_16, (int) ('u'), G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2), -1, 1, 1, 1, 1, 0, "u 'TriggerStat2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTwoHalfPot(void) {
   /* TwoHalfPot */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TwoHalfPot));
   G__memfunc_setup("TwoHalfPot",1000,G__L1TriggerTotemCoincidenceChipLinkDef_234_0_1, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TwoHalfPot), -1, 0, 4, 1, 1, 0, 
"h - - 0 - irpID i 'ERawOrSimu' - 0 - iType "
"u 'edm::ParameterSet' - 11 - conf h - - 0 '0' verb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDecRPIdFull",1294,G__L1TriggerTotemCoincidenceChipLinkDef_234_0_2, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHalfPot",974,G__L1TriggerTotemCoincidenceChipLinkDef_234_0_3, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_HalfPot), -1, 1, 1, 1, 1, 0, "i 'EDetOrientation' - 0 - orient", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHalfPot",974,G__L1TriggerTotemCoincidenceChipLinkDef_234_0_4, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_HalfPot), -1, 1, 1, 1, 1, 9, "i 'EDetOrientation' - 0 - orient", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetType",706,G__L1TriggerTotemCoincidenceChipLinkDef_234_0_5, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TriggerSignal_UandV",1903,G__L1TriggerTotemCoincidenceChipLinkDef_234_0_6, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TriggerSignal_UorV",1821,G__L1TriggerTotemCoincidenceChipLinkDef_234_0_7, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TriggerSignal_UorV1sectorOnly",2944,G__L1TriggerTotemCoincidenceChipLinkDef_234_0_8, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TriggerSignal_UandV1sectorOnly",3026,G__L1TriggerTotemCoincidenceChipLinkDef_234_0_9, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TriggerSignal",1330,G__L1TriggerTotemCoincidenceChipLinkDef_234_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("beginJob",800,G__L1TriggerTotemCoincidenceChipLinkDef_234_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("analyze",756,G__L1TriggerTotemCoincidenceChipLinkDef_234_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'edm::Event' - 11 - event u 'edm::EventSetup' - 11 - iSetup", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("endJob",594,G__L1TriggerTotemCoincidenceChipLinkDef_234_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("analyzePotUnderCondition",2508,G__L1TriggerTotemCoincidenceChipLinkDef_234_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 11 - conditionName g - - 0 - condition", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("TwoHalfPot", 1000, G__L1TriggerTotemCoincidenceChipLinkDef_234_0_15, (int) ('i'), G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TwoHalfPot), -1, 0, 1, 1, 1, 0, "u 'TwoHalfPot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TwoHalfPot", 1126, G__L1TriggerTotemCoincidenceChipLinkDef_234_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTriggerStatCollectionlETriggerStatgR(void) {
   /* TriggerStatCollection<TriggerStat> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStatgR));
   G__memfunc_setup("TriggerStatCollection<TriggerStat>",3430,G__L1TriggerTotemCoincidenceChipLinkDef_235_0_1, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStatgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddIfNotExists",1385,G__L1TriggerTotemCoincidenceChipLinkDef_235_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddIfNotExists",1385,G__L1TriggerTotemCoincidenceChipLinkDef_235_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TriggerStat' - 0 - object", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Find",385,G__L1TriggerTotemCoincidenceChipLinkDef_235_0_4, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat), -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - iname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AssertFind",1011,G__L1TriggerTotemCoincidenceChipLinkDef_235_0_5, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat), -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - iname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AssertFind",1011,G__L1TriggerTotemCoincidenceChipLinkDef_235_0_6, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat), -1, 0, 1, 1, 1, 9, "u 'TString' - 11 - iname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Find",385,G__L1TriggerTotemCoincidenceChipLinkDef_235_0_7, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat), -1, 0, 1, 1, 1, 9, "u 'TString' - 11 - iname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__L1TriggerTotemCoincidenceChipLinkDef_235_0_8, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TriggerStatCollection<TriggerStat>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__L1TriggerTotemCoincidenceChipLinkDef_235_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TriggerStatCollection<TriggerStat>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__L1TriggerTotemCoincidenceChipLinkDef_235_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TriggerStatCollection<TriggerStat>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__L1TriggerTotemCoincidenceChipLinkDef_235_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TriggerStatCollection<TriggerStat>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__L1TriggerTotemCoincidenceChipLinkDef_235_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__L1TriggerTotemCoincidenceChipLinkDef_235_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TriggerStatCollection<TriggerStat>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__L1TriggerTotemCoincidenceChipLinkDef_235_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TriggerStatCollection<TriggerStat>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__L1TriggerTotemCoincidenceChipLinkDef_235_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TriggerStatCollection<TriggerStat>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__L1TriggerTotemCoincidenceChipLinkDef_235_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TriggerStatCollection<TriggerStat>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TriggerStatCollection<TriggerStat>", 3430, G__L1TriggerTotemCoincidenceChipLinkDef_235_0_20, (int) ('i'), 
G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStatgR), -1, 0, 1, 1, 1, 0, "u 'TriggerStatCollection<TriggerStat>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TriggerStatCollection<TriggerStat>", 3556, G__L1TriggerTotemCoincidenceChipLinkDef_235_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__L1TriggerTotemCoincidenceChipLinkDef_235_0_22, (int) ('u'), G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStatgR), -1, 1, 1, 1, 1, 0, "u 'TriggerStatCollection<TriggerStat>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR(void) {
   /* vector<TriggerStat*,allocator<TriggerStat*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR));
   G__memfunc_setup("at",213,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_1, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat), G__defined_typename("vector<TriggerStat*,allocator<TriggerStat*> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<TriggerStat*,allocator<TriggerStat*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_2, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat), G__defined_typename("vector<TriggerStat*,allocator<TriggerStat*> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<TriggerStat*,allocator<TriggerStat*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_3, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_4, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_5, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgRcLcLiteratorgR), G__defined_typename("vector<TriggerStat*,allocator<TriggerStat*> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_6, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgRcLcLiteratorgR), G__defined_typename("vector<TriggerStat*,allocator<TriggerStat*> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_7, 107, -1, G__defined_typename("vector<TriggerStat*,allocator<TriggerStat*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_8, 107, -1, G__defined_typename("vector<TriggerStat*,allocator<TriggerStat*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<TriggerStat*,allocator<TriggerStat*> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<TriggerStat*,allocator<TriggerStat*> >::size_type' 0 - sz U 'TriggerStat' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_11, 107, -1, G__defined_typename("vector<TriggerStat*,allocator<TriggerStat*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_13, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat), G__defined_typename("vector<TriggerStat*,allocator<TriggerStat*> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<TriggerStat*,allocator<TriggerStat*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_14, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat), G__defined_typename("vector<TriggerStat*,allocator<TriggerStat*> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<TriggerStat*,allocator<TriggerStat*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TriggerStat*,allocator<TriggerStat*> >",4296,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_15, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TriggerStat*,allocator<TriggerStat*> >",4296,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_16, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<TriggerStat*,allocator<TriggerStat*> >::size_type' 0 - n U 'TriggerStat' - 41 '(TriggerStat*)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TriggerStat*,allocator<TriggerStat*> >",4296,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_17, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<TriggerStat*,allocator<TriggerStat*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TriggerStat*,allocator<TriggerStat*> >",4296,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_18, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<TriggerStat*,allocator<TriggerStat*> >::iterator' 'vector<TriggerStat*,allocator<TriggerStat*> >::const_iterator' 10 - first u 'vector<TriggerStat*,allocator<TriggerStat*> >::iterator' 'vector<TriggerStat*,allocator<TriggerStat*> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_19, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<TriggerStat*,allocator<TriggerStat*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<TriggerStat*,allocator<TriggerStat*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_21, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_22, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TriggerStat' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<TriggerStat*,allocator<TriggerStat*> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_25, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<TriggerStat*,allocator<TriggerStat*> >::iterator' - 0 - position U 'TriggerStat' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<TriggerStat*,allocator<TriggerStat*> >::iterator' - 0 - position u 'vector<TriggerStat*,allocator<TriggerStat*> >::iterator' 'vector<TriggerStat*,allocator<TriggerStat*> >::const_iterator' 10 - first "
"u 'vector<TriggerStat*,allocator<TriggerStat*> >::iterator' 'vector<TriggerStat*,allocator<TriggerStat*> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<TriggerStat*,allocator<TriggerStat*> >::iterator' - 0 - position k - 'vector<TriggerStat*,allocator<TriggerStat*> >::size_type' 0 - n "
"U 'TriggerStat' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<TriggerStat*,allocator<TriggerStat*> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<TriggerStat*,allocator<TriggerStat*> >::iterator' - 0 - first u 'vector<TriggerStat*,allocator<TriggerStat*> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__L1TriggerTotemCoincidenceChipLinkDef_237_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<TriggerStat*,allocator<TriggerStat*> >", 4422, G__L1TriggerTotemCoincidenceChipLinkDef_237_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRawVsSimuPotComparator(void) {
   /* RawVsSimuPotComparator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RawVsSimuPotComparator));
   G__memfunc_setup("RawVsSimuPotComparator",2268,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_1, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RawVsSimuPotComparator), -1, 0, 3, 1, 1, 0, 
"h - - 0 '0' rpID i - - 0 '0' verb "
"U 'edm::ParameterSet' - 10 '0' conf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPot",595,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_2, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TwoHalfPot), -1, 1, 1, 1, 1, 0, "i 'ERawOrSimu' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPot",595,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_3, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TwoHalfPot), -1, 1, 1, 1, 1, 9, "i 'ERawOrSimu' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("beginJob",800,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("analyze",756,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'edm::Event' - 11 - event u 'edm::EventSetup' - 11 - iSetup", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("endJob",594,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("endJob2",644,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillHist2D",917,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_8, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TString), -1, 0, 4, 1, 1, 0, 
"u 'TString' - 11 - conditionName u 'TString' - 11 - name "
"u 'edm::Event' - 11 - event i 'EDetOrientation' - 0 - orient", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintEventTwoHalfPot",2039,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_9, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("analyzePotUnderCondition",2508,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_10, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'TString' - 11 - conditionName g - - 0 - condition "
"u 'edm::Event' - 11 - event i 'EDetOrientation' - 0 - orient", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FailingSectors",1437,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StripsOnDistrib",1555,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_12, 121, -1, -1, 0, 5, 1, 1, 0, 
"u 'TString' - 11 - conditionName u 'TString' - 11 - name "
"u 'edm::Event' - 11 - event i 'EDetOrientation' - 0 - orient "
"h - - 0 - iplane", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SectorsOnDistrib",1649,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_13, 121, -1, -1, 0, 5, 1, 1, 0, 
"u 'TString' - 11 - conditionName u 'TString' - 11 - name "
"u 'edm::Event' - 11 - event i 'EDetOrientation' - 0 - orient "
"h - - 0 - iplane", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddHist2D",791,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TH2D' - 0 - hist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddHist1D",790,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TH1D' - 0 - hist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindHist2D",911,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_16, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TH2D), -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindHist1D",910,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_17, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TH1D), -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDecRPIdFull",1294,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_18, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RPNameToId",915,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_19, 104, -1, -1, 0, 1, 1, 1, 8, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRPNPlanesDividedByTwo",2337,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_20, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRPPlanes",1061,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_21, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNSectors",1105,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_22, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNStrips",1011,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_23, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hasTheSameRawSimuCCoutputPattern",3264,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_24, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hasTheSameRawSimuCCoutputPattern",3264,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_25, 103, -1, -1, 0, 1, 1, 1, 8, "i 'EDetOrientation' - 0 - orient", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_26, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&RawVsSimuPotComparator::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RawVsSimuPotComparator::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&RawVsSimuPotComparator::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&RawVsSimuPotComparator::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RawVsSimuPotComparator::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RawVsSimuPotComparator::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RawVsSimuPotComparator::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__L1TriggerTotemCoincidenceChipLinkDef_240_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RawVsSimuPotComparator::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("RawVsSimuPotComparator", 2268, G__L1TriggerTotemCoincidenceChipLinkDef_240_0_38, (int) ('i'), 
G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RawVsSimuPotComparator), -1, 0, 1, 1, 1, 0, "u 'RawVsSimuPotComparator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RawVsSimuPotComparator", 2394, G__L1TriggerTotemCoincidenceChipLinkDef_240_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTriggerStatCollectionlETriggerStat2gR(void) {
   /* TriggerStatCollection<TriggerStat2> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStat2gR));
   G__memfunc_setup("TriggerStatCollection<TriggerStat2>",3480,G__L1TriggerTotemCoincidenceChipLinkDef_241_0_1, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStat2gR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddIfNotExists",1385,G__L1TriggerTotemCoincidenceChipLinkDef_241_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddIfNotExists",1385,G__L1TriggerTotemCoincidenceChipLinkDef_241_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TriggerStat2' - 0 - object", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Find",385,G__L1TriggerTotemCoincidenceChipLinkDef_241_0_4, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2), -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - iname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AssertFind",1011,G__L1TriggerTotemCoincidenceChipLinkDef_241_0_5, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2), -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - iname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AssertFind",1011,G__L1TriggerTotemCoincidenceChipLinkDef_241_0_6, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2), -1, 0, 1, 1, 1, 9, "u 'TString' - 11 - iname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Find",385,G__L1TriggerTotemCoincidenceChipLinkDef_241_0_7, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2), -1, 0, 1, 1, 1, 9, "u 'TString' - 11 - iname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__L1TriggerTotemCoincidenceChipLinkDef_241_0_8, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TriggerStatCollection<TriggerStat2>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__L1TriggerTotemCoincidenceChipLinkDef_241_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TriggerStatCollection<TriggerStat2>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__L1TriggerTotemCoincidenceChipLinkDef_241_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TriggerStatCollection<TriggerStat2>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__L1TriggerTotemCoincidenceChipLinkDef_241_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TriggerStatCollection<TriggerStat2>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__L1TriggerTotemCoincidenceChipLinkDef_241_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__L1TriggerTotemCoincidenceChipLinkDef_241_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TriggerStatCollection<TriggerStat2>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__L1TriggerTotemCoincidenceChipLinkDef_241_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TriggerStatCollection<TriggerStat2>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__L1TriggerTotemCoincidenceChipLinkDef_241_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TriggerStatCollection<TriggerStat2>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__L1TriggerTotemCoincidenceChipLinkDef_241_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TriggerStatCollection<TriggerStat2>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TriggerStatCollection<TriggerStat2>", 3480, G__L1TriggerTotemCoincidenceChipLinkDef_241_0_20, (int) ('i'), 
G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStat2gR), -1, 0, 1, 1, 1, 0, "u 'TriggerStatCollection<TriggerStat2>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TriggerStatCollection<TriggerStat2>", 3606, G__L1TriggerTotemCoincidenceChipLinkDef_241_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__L1TriggerTotemCoincidenceChipLinkDef_241_0_22, (int) ('u'), G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStat2gR), -1, 1, 1, 1, 1, 0, "u 'TriggerStatCollection<TriggerStat2>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR(void) {
   /* vector<TriggerStat2*,allocator<TriggerStat2*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR));
   G__memfunc_setup("at",213,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_1, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2), G__defined_typename("vector<TriggerStat2*,allocator<TriggerStat2*> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<TriggerStat2*,allocator<TriggerStat2*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_2, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2), G__defined_typename("vector<TriggerStat2*,allocator<TriggerStat2*> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<TriggerStat2*,allocator<TriggerStat2*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_3, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_4, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_5, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgRcLcLiteratorgR), G__defined_typename("vector<TriggerStat2*,allocator<TriggerStat2*> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_6, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgRcLcLiteratorgR), G__defined_typename("vector<TriggerStat2*,allocator<TriggerStat2*> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_7, 107, -1, G__defined_typename("vector<TriggerStat2*,allocator<TriggerStat2*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_8, 107, -1, G__defined_typename("vector<TriggerStat2*,allocator<TriggerStat2*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<TriggerStat2*,allocator<TriggerStat2*> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<TriggerStat2*,allocator<TriggerStat2*> >::size_type' 0 - sz U 'TriggerStat2' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_11, 107, -1, G__defined_typename("vector<TriggerStat2*,allocator<TriggerStat2*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_13, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2), G__defined_typename("vector<TriggerStat2*,allocator<TriggerStat2*> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<TriggerStat2*,allocator<TriggerStat2*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_14, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2), G__defined_typename("vector<TriggerStat2*,allocator<TriggerStat2*> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<TriggerStat2*,allocator<TriggerStat2*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TriggerStat2*,allocator<TriggerStat2*> >",4396,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_15, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TriggerStat2*,allocator<TriggerStat2*> >",4396,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_16, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<TriggerStat2*,allocator<TriggerStat2*> >::size_type' 0 - n U 'TriggerStat2' - 41 '(TriggerStat2*)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TriggerStat2*,allocator<TriggerStat2*> >",4396,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_17, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<TriggerStat2*,allocator<TriggerStat2*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TriggerStat2*,allocator<TriggerStat2*> >",4396,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_18, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator' 'vector<TriggerStat2*,allocator<TriggerStat2*> >::const_iterator' 10 - first u 'vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator' 'vector<TriggerStat2*,allocator<TriggerStat2*> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_19, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<TriggerStat2*,allocator<TriggerStat2*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<TriggerStat2*,allocator<TriggerStat2*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_21, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_22, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TriggerStat2' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<TriggerStat2*,allocator<TriggerStat2*> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_25, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator' - 0 - position U 'TriggerStat2' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator' - 0 - position u 'vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator' 'vector<TriggerStat2*,allocator<TriggerStat2*> >::const_iterator' 10 - first "
"u 'vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator' 'vector<TriggerStat2*,allocator<TriggerStat2*> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator' - 0 - position k - 'vector<TriggerStat2*,allocator<TriggerStat2*> >::size_type' 0 - n "
"U 'TriggerStat2' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator' - 0 - first u 'vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__L1TriggerTotemCoincidenceChipLinkDef_243_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<TriggerStat2*,allocator<TriggerStat2*> >", 4522, G__L1TriggerTotemCoincidenceChipLinkDef_243_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlETH1DmUcOallocatorlETH1DmUgRsPgR(void) {
   /* vector<TH1D*,allocator<TH1D*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR));
   G__memfunc_setup("at",213,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_1, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TH1D), G__defined_typename("vector<TH1D*,allocator<TH1D*> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<TH1D*,allocator<TH1D*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_2, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TH1D), G__defined_typename("vector<TH1D*,allocator<TH1D*> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<TH1D*,allocator<TH1D*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_3, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_4, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_5, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETH1DmUcOallocatorlETH1DmUgRsPgRcLcLiteratorgR), G__defined_typename("vector<TH1D*,allocator<TH1D*> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_6, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETH1DmUcOallocatorlETH1DmUgRsPgRcLcLiteratorgR), G__defined_typename("vector<TH1D*,allocator<TH1D*> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_7, 107, -1, G__defined_typename("vector<TH1D*,allocator<TH1D*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_8, 107, -1, G__defined_typename("vector<TH1D*,allocator<TH1D*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<TH1D*,allocator<TH1D*> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<TH1D*,allocator<TH1D*> >::size_type' 0 - sz U 'TH1D' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_11, 107, -1, G__defined_typename("vector<TH1D*,allocator<TH1D*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_13, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TH1D), G__defined_typename("vector<TH1D*,allocator<TH1D*> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<TH1D*,allocator<TH1D*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_14, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TH1D), G__defined_typename("vector<TH1D*,allocator<TH1D*> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<TH1D*,allocator<TH1D*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TH1D*,allocator<TH1D*> >",2570,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_15, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TH1D*,allocator<TH1D*> >",2570,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_16, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<TH1D*,allocator<TH1D*> >::size_type' 0 - n U 'TH1D' - 41 '(TH1D*)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TH1D*,allocator<TH1D*> >",2570,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_17, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<TH1D*,allocator<TH1D*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TH1D*,allocator<TH1D*> >",2570,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_18, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<TH1D*,allocator<TH1D*> >::iterator' 'vector<TH1D*,allocator<TH1D*> >::const_iterator' 10 - first u 'vector<TH1D*,allocator<TH1D*> >::iterator' 'vector<TH1D*,allocator<TH1D*> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_19, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<TH1D*,allocator<TH1D*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<TH1D*,allocator<TH1D*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_21, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TH1D), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_22, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TH1D), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TH1D' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<TH1D*,allocator<TH1D*> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_25, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<TH1D*,allocator<TH1D*> >::iterator' - 0 - position U 'TH1D' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<TH1D*,allocator<TH1D*> >::iterator' - 0 - position u 'vector<TH1D*,allocator<TH1D*> >::iterator' 'vector<TH1D*,allocator<TH1D*> >::const_iterator' 10 - first "
"u 'vector<TH1D*,allocator<TH1D*> >::iterator' 'vector<TH1D*,allocator<TH1D*> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<TH1D*,allocator<TH1D*> >::iterator' - 0 - position k - 'vector<TH1D*,allocator<TH1D*> >::size_type' 0 - n "
"U 'TH1D' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<TH1D*,allocator<TH1D*> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<TH1D*,allocator<TH1D*> >::iterator' - 0 - first u 'vector<TH1D*,allocator<TH1D*> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__L1TriggerTotemCoincidenceChipLinkDef_247_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<TH1D*,allocator<TH1D*> >", 2696, G__L1TriggerTotemCoincidenceChipLinkDef_247_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlETH2DmUcOallocatorlETH2DmUgRsPgR(void) {
   /* vector<TH2D*,allocator<TH2D*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR));
   G__memfunc_setup("at",213,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_1, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TH2D), G__defined_typename("vector<TH2D*,allocator<TH2D*> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<TH2D*,allocator<TH2D*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_2, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TH2D), G__defined_typename("vector<TH2D*,allocator<TH2D*> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<TH2D*,allocator<TH2D*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_3, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_4, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_5, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETH2DmUcOallocatorlETH2DmUgRsPgRcLcLiteratorgR), G__defined_typename("vector<TH2D*,allocator<TH2D*> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_6, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETH2DmUcOallocatorlETH2DmUgRsPgRcLcLiteratorgR), G__defined_typename("vector<TH2D*,allocator<TH2D*> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_7, 107, -1, G__defined_typename("vector<TH2D*,allocator<TH2D*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_8, 107, -1, G__defined_typename("vector<TH2D*,allocator<TH2D*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<TH2D*,allocator<TH2D*> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<TH2D*,allocator<TH2D*> >::size_type' 0 - sz U 'TH2D' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_11, 107, -1, G__defined_typename("vector<TH2D*,allocator<TH2D*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_13, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TH2D), G__defined_typename("vector<TH2D*,allocator<TH2D*> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<TH2D*,allocator<TH2D*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_14, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TH2D), G__defined_typename("vector<TH2D*,allocator<TH2D*> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<TH2D*,allocator<TH2D*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TH2D*,allocator<TH2D*> >",2572,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_15, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TH2D*,allocator<TH2D*> >",2572,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_16, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<TH2D*,allocator<TH2D*> >::size_type' 0 - n U 'TH2D' - 41 '(TH2D*)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TH2D*,allocator<TH2D*> >",2572,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_17, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<TH2D*,allocator<TH2D*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TH2D*,allocator<TH2D*> >",2572,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_18, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<TH2D*,allocator<TH2D*> >::iterator' 'vector<TH2D*,allocator<TH2D*> >::const_iterator' 10 - first u 'vector<TH2D*,allocator<TH2D*> >::iterator' 'vector<TH2D*,allocator<TH2D*> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_19, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<TH2D*,allocator<TH2D*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<TH2D*,allocator<TH2D*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_21, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TH2D), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_22, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TH2D), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TH2D' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<TH2D*,allocator<TH2D*> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_25, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<TH2D*,allocator<TH2D*> >::iterator' - 0 - position U 'TH2D' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<TH2D*,allocator<TH2D*> >::iterator' - 0 - position u 'vector<TH2D*,allocator<TH2D*> >::iterator' 'vector<TH2D*,allocator<TH2D*> >::const_iterator' 10 - first "
"u 'vector<TH2D*,allocator<TH2D*> >::iterator' 'vector<TH2D*,allocator<TH2D*> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<TH2D*,allocator<TH2D*> >::iterator' - 0 - position k - 'vector<TH2D*,allocator<TH2D*> >::size_type' 0 - n "
"U 'TH2D' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<TH2D*,allocator<TH2D*> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<TH2D*,allocator<TH2D*> >::iterator' - 0 - first u 'vector<TH2D*,allocator<TH2D*> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__L1TriggerTotemCoincidenceChipLinkDef_251_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<TH2D*,allocator<TH2D*> >", 2698, G__L1TriggerTotemCoincidenceChipLinkDef_251_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncPotCollection(void) {
   /* PotCollection */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_PotCollection));
   G__memfunc_setup("PotCollection",1343,G__L1TriggerTotemCoincidenceChipLinkDef_254_0_1, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_PotCollection), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindPot",692,G__L1TriggerTotemCoincidenceChipLinkDef_254_0_2, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RawVsSimuPotComparator), -1, 0, 1, 1, 1, 9, "h - - 0 - rpID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindPot",692,G__L1TriggerTotemCoincidenceChipLinkDef_254_0_3, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RawVsSimuPotComparator), -1, 0, 1, 1, 1, 0, "h - - 0 - rpID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateNewRPCCInput",1718,G__L1TriggerTotemCoincidenceChipLinkDef_254_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'edm::Event' - 11 - event u 'string' - 10 - detTriggerLabel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__L1TriggerTotemCoincidenceChipLinkDef_254_0_5, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&PotCollection::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__L1TriggerTotemCoincidenceChipLinkDef_254_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PotCollection::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__L1TriggerTotemCoincidenceChipLinkDef_254_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&PotCollection::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__L1TriggerTotemCoincidenceChipLinkDef_254_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&PotCollection::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__L1TriggerTotemCoincidenceChipLinkDef_254_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__L1TriggerTotemCoincidenceChipLinkDef_254_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PotCollection::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__L1TriggerTotemCoincidenceChipLinkDef_254_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&PotCollection::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__L1TriggerTotemCoincidenceChipLinkDef_254_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PotCollection::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__L1TriggerTotemCoincidenceChipLinkDef_254_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&PotCollection::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("PotCollection", 1343, G__L1TriggerTotemCoincidenceChipLinkDef_254_0_17, (int) ('i'), G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_PotCollection), -1, 0, 1, 1, 1, 0, "u 'PotCollection' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~PotCollection", 1469, G__L1TriggerTotemCoincidenceChipLinkDef_254_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__L1TriggerTotemCoincidenceChipLinkDef_254_0_19, (int) ('u'), G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_PotCollection), -1, 1, 1, 1, 1, 0, "u 'PotCollection' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR(void) {
   /* vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR));
   G__memfunc_setup("at",213,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_1, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RawVsSimuPotComparator), G__defined_typename("vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_2, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RawVsSimuPotComparator), G__defined_typename("vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_3, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_4, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_5, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgRcLcLiteratorgR), G__defined_typename("vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_6, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgRcLcLiteratorgR), G__defined_typename("vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_7, 107, -1, G__defined_typename("vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_8, 107, -1, G__defined_typename("vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::size_type' 0 - sz U 'RawVsSimuPotComparator' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_11, 107, -1, G__defined_typename("vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_13, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RawVsSimuPotComparator), G__defined_typename("vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_14, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RawVsSimuPotComparator), G__defined_typename("vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >",6560,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_15, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >",6560,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_16, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::size_type' 0 - n U 'RawVsSimuPotComparator' - 41 '(RawVsSimuPotComparator*)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >",6560,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_17, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >",6560,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_18, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator' 'vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::const_iterator' 10 - first u 'vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator' 'vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_19, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_21, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RawVsSimuPotComparator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_22, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RawVsSimuPotComparator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "U 'RawVsSimuPotComparator' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_25, 117, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator' - 0 - position U 'RawVsSimuPotComparator' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator' - 0 - position u 'vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator' 'vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::const_iterator' 10 - first "
"u 'vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator' 'vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator' - 0 - position k - 'vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::size_type' 0 - n "
"U 'RawVsSimuPotComparator' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator' - 0 - first u 'vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__L1TriggerTotemCoincidenceChipLinkDef_256_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >", 6686, G__L1TriggerTotemCoincidenceChipLinkDef_256_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRPTriggerAnalyzerInfoCollector(void) {
   /* RPTriggerAnalyzerInfoCollector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RPTriggerAnalyzerInfoCollector));
   G__memfunc_setup("RPTriggerAnalyzerInfoCollector",3055,G__L1TriggerTotemCoincidenceChipLinkDef_259_0_1, 105, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RPTriggerAnalyzerInfoCollector), -1, 0, 1, 1, 1, 0, "u 'TString' - 11 '\"_def_name_RPTriggerAnalyzerInfoCollector_\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__L1TriggerTotemCoincidenceChipLinkDef_259_0_2, 85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&RPTriggerAnalyzerInfoCollector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__L1TriggerTotemCoincidenceChipLinkDef_259_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RPTriggerAnalyzerInfoCollector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__L1TriggerTotemCoincidenceChipLinkDef_259_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&RPTriggerAnalyzerInfoCollector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__L1TriggerTotemCoincidenceChipLinkDef_259_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&RPTriggerAnalyzerInfoCollector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__L1TriggerTotemCoincidenceChipLinkDef_259_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__L1TriggerTotemCoincidenceChipLinkDef_259_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RPTriggerAnalyzerInfoCollector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__L1TriggerTotemCoincidenceChipLinkDef_259_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RPTriggerAnalyzerInfoCollector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__L1TriggerTotemCoincidenceChipLinkDef_259_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RPTriggerAnalyzerInfoCollector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__L1TriggerTotemCoincidenceChipLinkDef_259_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RPTriggerAnalyzerInfoCollector::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("RPTriggerAnalyzerInfoCollector", 3055, G__L1TriggerTotemCoincidenceChipLinkDef_259_0_14, (int) ('i'), 
G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RPTriggerAnalyzerInfoCollector), -1, 0, 1, 1, 1, 0, "u 'RPTriggerAnalyzerInfoCollector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RPTriggerAnalyzerInfoCollector", 3181, G__L1TriggerTotemCoincidenceChipLinkDef_259_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__L1TriggerTotemCoincidenceChipLinkDef_259_0_16, (int) ('u'), G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RPTriggerAnalyzerInfoCollector), -1, 1, 1, 1, 1, 0, "u 'RPTriggerAnalyzerInfoCollector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncL1TriggerTotemCoincidenceChipLinkDef() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_EDetOrientation),-1,-1,1,"kEvenV=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_EDetOrientation),-1,-1,1,"kOddU=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_ERawOrSimu),-1,-1,1,"kRaw=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__L1TriggerTotemCoincidenceChipLinkDefLN_ERawOrSimu),-1,-1,1,"kSimu=1",0,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalL1TriggerTotemCoincidenceChipLinkDef() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcL1TriggerTotemCoincidenceChipLinkDef() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_TH2D = { "TH2D" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_EDetOrientation = { "EDetOrientation" , 101 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_ERawOrSimu = { "ERawOrSimu" , 101 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_PreTriggerStat = { "PreTriggerStat" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat = { "TriggerStat" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2 = { "TriggerStat2" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_edm = { "edm" , 110 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_edmcLcLEventSetup = { "edm::EventSetup" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_edmcLcLEvent = { "edm::Event" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_edmcLcLParameterSet = { "edm::ParameterSet" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_HalfPot = { "HalfPot" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_TwoHalfPot = { "TwoHalfPot" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStatgR = { "TriggerStatCollection<TriggerStat>" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR = { "vector<TriggerStat*,allocator<TriggerStat*> >" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgRcLcLiterator = { "vector<TriggerStat*,allocator<TriggerStat*> >::iterator" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TriggerStat*,allocator<TriggerStat*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_RawVsSimuPotComparator = { "RawVsSimuPotComparator" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStat2gR = { "TriggerStatCollection<TriggerStat2>" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR = { "vector<TriggerStat2*,allocator<TriggerStat2*> >" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgRcLcLiterator = { "vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TriggerStat2*,allocator<TriggerStat2*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR = { "vector<TH1D*,allocator<TH1D*> >" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgRcLcLiterator = { "vector<TH1D*,allocator<TH1D*> >::iterator" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETH1DmUcOallocatorlETH1DmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TH1D*,allocator<TH1D*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR = { "vector<TH2D*,allocator<TH2D*> >" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgRcLcLiterator = { "vector<TH2D*,allocator<TH2D*> >::iterator" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETH2DmUcOallocatorlETH2DmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TH2D*,allocator<TH2D*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_PotCollection = { "PotCollection" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR = { "vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgRcLcLiterator = { "vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__L1TriggerTotemCoincidenceChipLinkDefLN_RPTriggerAnalyzerInfoCollector = { "RPTriggerAnalyzerInfoCollector" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableL1TriggerTotemCoincidenceChipLinkDef() {
  G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_TBuffer.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_TMemberInspector.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_TObject.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_TNamed.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_TString.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_string.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_TH1D.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_TH2D.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_EDetOrientation.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_ERawOrSimu.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_PreTriggerStat.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_edm.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_edmcLcLEventSetup.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_edmcLcLEvent.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_edmcLcLParameterSet.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_HalfPot.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_TwoHalfPot.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStatgR.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgRcLcLiterator.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_RawVsSimuPotComparator.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStat2gR.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgRcLcLiterator.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgRcLcLiterator.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETH1DmUcOallocatorlETH1DmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgRcLcLiterator.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETH2DmUcOallocatorlETH2DmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_PotCollection.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgRcLcLiterator.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__L1TriggerTotemCoincidenceChipLinkDefLN_RPTriggerAnalyzerInfoCollector.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableL1TriggerTotemCoincidenceChipLinkDef() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TClass);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TObject);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TNamed);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TString);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_string);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TH1D);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TH2D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_EDetOrientation),sizeof(int),-1,262144,(char*)NULL,NULL,NULL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_ERawOrSimu),sizeof(int),-1,262144,(char*)NULL,NULL,NULL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_PreTriggerStat),sizeof(PreTriggerStat),-1,324864,(char*)NULL,G__setup_memvarPreTriggerStat,G__setup_memfuncPreTriggerStat);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat),sizeof(TriggerStat),-1,324864,(char*)NULL,G__setup_memvarTriggerStat,G__setup_memfuncTriggerStat);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStat2),sizeof(TriggerStat2),-1,324864,(char*)NULL,G__setup_memvarTriggerStat2,G__setup_memfuncTriggerStat2);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_edm);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_edmcLcLEventSetup);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_edmcLcLEvent);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_edmcLcLParameterSet);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_HalfPot);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TwoHalfPot),sizeof(TwoHalfPot),-1,295936,(char*)NULL,G__setup_memvarTwoHalfPot,G__setup_memfuncTwoHalfPot);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStatgR),sizeof(TriggerStatCollection<TriggerStat>),-1,324864,(char*)NULL,G__setup_memvarTriggerStatCollectionlETriggerStatgR,G__setup_memfuncTriggerStatCollectionlETriggerStatgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR),sizeof(vector<TriggerStat*,allocator<TriggerStat*> >),-1,298752,(char*)NULL,G__setup_memvarvectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR,G__setup_memfuncvectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETriggerStatmUcOallocatorlETriggerStatmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RawVsSimuPotComparator),sizeof(RawVsSimuPotComparator),-1,324864,(char*)NULL,G__setup_memvarRawVsSimuPotComparator,G__setup_memfuncRawVsSimuPotComparator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_TriggerStatCollectionlETriggerStat2gR),sizeof(TriggerStatCollection<TriggerStat2>),-1,324864,(char*)NULL,G__setup_memvarTriggerStatCollectionlETriggerStat2gR,G__setup_memfuncTriggerStatCollectionlETriggerStat2gR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR),sizeof(vector<TriggerStat2*,allocator<TriggerStat2*> >),-1,298752,(char*)NULL,G__setup_memvarvectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR,G__setup_memfuncvectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgR);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETriggerStat2mUcOallocatorlETriggerStat2mUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR),sizeof(vector<TH1D*,allocator<TH1D*> >),-1,298752,(char*)NULL,G__setup_memvarvectorlETH1DmUcOallocatorlETH1DmUgRsPgR,G__setup_memfuncvectorlETH1DmUcOallocatorlETH1DmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETH1DmUcOallocatorlETH1DmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgR),sizeof(vector<TH2D*,allocator<TH2D*> >),-1,298752,(char*)NULL,G__setup_memvarvectorlETH2DmUcOallocatorlETH2DmUgRsPgR,G__setup_memfuncvectorlETH2DmUcOallocatorlETH2DmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlETH2DmUcOallocatorlETH2DmUgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlETH2DmUcOallocatorlETH2DmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_PotCollection),sizeof(PotCollection),-1,324864,(char*)NULL,G__setup_memvarPotCollection,G__setup_memfuncPotCollection);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR),sizeof(vector<RawVsSimuPotComparator*,allocator<RawVsSimuPotComparator*> >),-1,298752,(char*)NULL,G__setup_memvarvectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR,G__setup_memfuncvectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgR);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_vectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_reverse_iteratorlEvectorlERawVsSimuPotComparatormUcOallocatorlERawVsSimuPotComparatormUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__L1TriggerTotemCoincidenceChipLinkDefLN_RPTriggerAnalyzerInfoCollector),sizeof(RPTriggerAnalyzerInfoCollector),-1,324864,(char*)NULL,G__setup_memvarRPTriggerAnalyzerInfoCollector,G__setup_memfuncRPTriggerAnalyzerInfoCollector);
}
extern "C" void G__cpp_setupL1TriggerTotemCoincidenceChipLinkDef(void) {
  G__check_setup_version(30051515,"G__cpp_setupL1TriggerTotemCoincidenceChipLinkDef()");
  G__set_cpp_environmentL1TriggerTotemCoincidenceChipLinkDef();
  G__cpp_setup_tagtableL1TriggerTotemCoincidenceChipLinkDef();

  G__cpp_setup_inheritanceL1TriggerTotemCoincidenceChipLinkDef();

  G__cpp_setup_typetableL1TriggerTotemCoincidenceChipLinkDef();

  G__cpp_setup_memvarL1TriggerTotemCoincidenceChipLinkDef();

  G__cpp_setup_memfuncL1TriggerTotemCoincidenceChipLinkDef();
  G__cpp_setup_globalL1TriggerTotemCoincidenceChipLinkDef();
  G__cpp_setup_funcL1TriggerTotemCoincidenceChipLinkDef();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncL1TriggerTotemCoincidenceChipLinkDef();
  return;
}
class G__cpp_setup_initL1TriggerTotemCoincidenceChipLinkDef {
  public:
    G__cpp_setup_initL1TriggerTotemCoincidenceChipLinkDef() { G__add_setup_func("L1TriggerTotemCoincidenceChipLinkDef",(G__incsetup)(&G__cpp_setupL1TriggerTotemCoincidenceChipLinkDef)); G__call_setup_funcs(); }
   ~G__cpp_setup_initL1TriggerTotemCoincidenceChipLinkDef() { G__remove_setup_func("L1TriggerTotemCoincidenceChipLinkDef"); }
};
G__cpp_setup_initL1TriggerTotemCoincidenceChipLinkDef G__cpp_setup_initializerL1TriggerTotemCoincidenceChipLinkDef;

